{
  "rules": [
    {
      "id": "vendored-rules.generic.bicep.security.secure-parameter-for-secrets",
      "languages": [
        "generic"
      ],
      "message": "Mark sensitive parameters with the @secure() decorator. This avoids logging the value or displaying it in the Azure portal, Azure CLI, or Azure PowerShell.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-532: Insertion of Sensitive Information into Log File"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A09:2021 - Security Logging and Monitoring Failures"
        ],
        "references": [
          "https://cwe.mitre.org/data/definitions/532.html",
          "https://docs.microsoft.com/en-us/azure/azure-resource-manager/bicep/scenarios-secrets"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "bicep"
        ]
      },
      "paths": {
        "include": [
          "*.bicep"
        ]
      },
      "patterns": [
        {
          "pattern": "param $NAME string"
        },
        {
          "pattern-not-inside": "@secure()\nparam $NAME string\n"
        },
        {
          "metavariable-regex": {
            "metavariable": "$NAME",
            "regex": "(?i).*(password|secret|token)"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.generic.ci.audit.changed-semgrepignore",
      "languages": [
        "generic"
      ],
      "message": "`$1` has been added to the .semgrepignore list of ignored paths. Someone from app-sec may want to audit these changes.",
      "metadata": {
        "category": "best-practice",
        "references": [
          "https://semgrep.dev/docs/ignoring-files-folders-code/"
        ],
        "technology": [
          "semgrep"
        ]
      },
      "paths": {
        "include": [
          ".semgrepignore"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "^(.*)$\n"
        },
        {
          "pattern-not-regex": "^\\n.*$\n"
        },
        {
          "pattern-not-regex": "^#.*$\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.generic.ci.security.bash_reverse_shell",
      "languages": [
        "generic"
      ],
      "message": "Semgrep found a bash reverse shell",
      "metadata": {
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-94: Improper Control of Generation of Code ('Code Injection')"
        ],
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "ci"
        ]
      },
      "pattern-either": [
        {
          "pattern": "sh -i >& /dev/udp/.../... 0>&1\n"
        },
        {
          "pattern": "<...>/dev/tcp/.../...; sh <&... >&... 2>&\n"
        },
        {
          "pattern": "<...>/dev/tcp/.../...; cat <&... | while read line; do $line 2>&... >&...;done\n"
        },
        {
          "pattern": "sh -i ...<...> /dev/tcp/.../... ...<&... 1>&... 2>&\n"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.gradle.security.build-gradle-password-hardcoded",
      "languages": [
        "generic"
      ],
      "message": "A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. It is recommended to rotate the secret and retrieve them from a secure secret vault or Hardware Security Module (HSM), alternatively environment variables can be used if allowed by your company policy.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2020-top25": true,
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "source_rule_url": "https://semgrep.dev/playground/r/qNU2d1G/achufistov6_personal_org.groovy-build-gradle-password-hardcoded",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "secrets"
        ],
        "vulnerability_class": [
          "Hard-coded Secrets"
        ]
      },
      "paths": {
        "include": [
          "*build.gradle"
        ]
      },
      "patterns": [
        {
          "pattern": "password = env[...] ?: \"$SECRET\"\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix-regex": {
        "regex": "{{(.*?)}}",
        "replacement": "\"{{\\1}}\""
      },
      "id": "vendored-rules.generic.html-templates.security.unquoted-attribute-var",
      "languages": [
        "generic"
      ],
      "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "html-templates"
        ]
      },
      "paths": {
        "include": [
          "*.html",
          "*.mustache",
          "*.hbs"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "<$TAG ...>"
        },
        {
          "pattern-not-inside": "=\"...\""
        },
        {
          "pattern-not-inside": "='...'"
        },
        {
          "pattern": "{{ ... }}"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.generic.html-templates.security.var-in-href",
      "languages": [
        "generic"
      ],
      "message": "Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using Flask, use 'url_for()' to safely generate a URL. If using Django, use the 'url' filter to safely generate a URL. If using Mustache, use a URL encoding library, or prepend a slash '/' to the variable for relative links (`href=\"/{{link}}\"`). You may also consider setting the Content Security Policy (CSP) header.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI",
          "https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#url",
          "https://github.com/pugjs/pug/issues/2952",
          "https://content-security-policy.com/"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "html-templates"
        ]
      },
      "paths": {
        "include": [
          "*.html",
          "*.mustache",
          "*.hbs"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "<a ...>"
        },
        {
          "pattern-either": [
            {
              "pattern": "href = {{ ... }}"
            },
            {
              "pattern": "href = \"{{ ... }}\""
            },
            {
              "pattern": "href = '{{ ... }}'"
            }
          ]
        },
        {
          "pattern-not-inside": "href = {{ url_for(...) ... }}"
        },
        {
          "pattern-not-inside": "href = \"{{ url_for(...) ... }}\""
        },
        {
          "pattern-not-inside": "href = '{{ url_for(...) ... }}'"
        },
        {
          "pattern-not-inside": "href = \"/{{ ... }}\""
        },
        {
          "pattern-not-inside": "href = '/{{ ... }}'"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.generic.html-templates.security.var-in-script-src",
      "languages": [
        "generic"
      ],
      "message": "Detected a template variable used as the 'src' in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent malicious URLs from being injected and could results in a cross-site scripting (XSS) vulnerability. Prefer not to dynamically generate the 'src' attribute and use static URLs instead. If you must do this, carefully check URLs against an allowlist and be sure to URL-encode the result.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A",
          "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough",
          "https://github.com/ESAPI/owasp-esapi-js"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "html-templates"
        ]
      },
      "paths": {
        "include": [
          "*.mustache",
          "*.hbs",
          "*.html"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "<script ...>"
        },
        {
          "pattern-not-inside": "src = '...'"
        },
        {
          "pattern-not-inside": "src = \"...\""
        },
        {
          "pattern-not-inside": "nonce = '...'"
        },
        {
          "pattern-not-inside": "nonce = \"...\""
        },
        {
          "pattern": "{{ ... }}"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.generic.html-templates.security.var-in-script-tag",
      "languages": [
        "generic"
      ],
      "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A",
          "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough",
          "https://github.com/ESAPI/owasp-esapi-js"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "html-templates"
        ]
      },
      "paths": {
        "include": [
          "*.mustache",
          "*.hbs",
          "*.html"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "<script ...> ... </script>"
        },
        {
          "pattern-not-inside": "<script ... $ATTR = \"...\" ...>"
        },
        {
          "pattern-not-inside": "<script ... $ATTR = '...' ...>"
        },
        {
          "pattern": "{{ ... }}"
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix-regex": {
        "regex": "location\\s+([A-Za-z0-9/-_\\.]+)",
        "replacement": "location \\1/"
      },
      "id": "vendored-rules.generic.nginx.security.alias-path-traversal",
      "languages": [
        "generic"
      ],
      "message": "The alias in this location block is subject to a path traversal because the location path does not end in a path separator (e.g., '/'). To fix, add a path separator to the end of the path.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/Top10/A01_2021-Broken_Access_Control",
          "https://www.acunetix.com/vulnerabilities/web/path-traversal-via-misconfigured-nginx-alias/",
          "https://www.youtube.com/watch?v=CIhHpkybYsY",
          "https://github.com/orangetw/My-Presentation-Slides/blob/main/data/2018-Breaking-Parser-Logic-Take-Your-Path-Normalization-Off-And-Pop-0days-Out.pdf"
        ],
        "source-rule-url": "https://github.com/yandex/gixy/blob/master/docs/en/plugins/aliastraversal.md",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "nginx"
        ]
      },
      "paths": {
        "include": [
          "*.conf",
          "*.vhost",
          "sites-available/*",
          "sites-enabled/*"
        ]
      },
      "patterns": [
        {
          "pattern": "location $...LOCATION {\n  ...\n  alias .../;\n  ...\n}\n"
        },
        {
          "metavariable-pattern": {
            "metavariable": "$...LOCATION",
            "pattern-regex": "^.*[^/]$"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.generic.nginx.security.dynamic-proxy-host",
      "languages": [
        "generic"
      ],
      "message": "The host for this proxy URL is dynamically determined. This can be dangerous if the host can be injected by an attacker because it may forcibly alter destination of the proxy. Consider hardcoding acceptable destinations and retrieving them with 'map' or something similar.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-441: Unintended Proxy or Intermediary ('Confused Deputy')"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://nginx.org/en/docs/http/ngx_http_map_module.html"
        ],
        "source-rule-url": "https://github.com/yandex/gixy/blob/master/docs/en/plugins/ssrf.md",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "nginx"
        ]
      },
      "paths": {
        "include": [
          "*.conf",
          "*.vhost",
          "sites-available/*",
          "sites-enabled/*"
        ]
      },
      "pattern-either": [
        {
          "pattern": "proxy_pass $SCHEME://$$HOST ...;"
        },
        {
          "pattern": "proxy_pass $$SCHEME://$$HOST ...;"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.generic.nginx.security.dynamic-proxy-scheme",
      "languages": [
        "generic"
      ],
      "message": "The protocol scheme for this proxy is dynamically determined. This can be dangerous if the scheme can be injected by an attacker because it may forcibly alter the connection scheme. Consider hardcoding a scheme for this proxy.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-16: CWE CATEGORY: Configuration"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A06:2017 - Security Misconfiguration",
          "A05:2021 - Security Misconfiguration"
        ],
        "references": [
          "https://github.com/yandex/gixy/blob/master/docs/en/plugins/ssrf.md"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "nginx"
        ]
      },
      "paths": {
        "include": [
          "*.conf",
          "*.vhost",
          "sites-available/*",
          "sites-enabled/*"
        ]
      },
      "pattern": "proxy_pass $$SCHEME:// ...;",
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.generic.nginx.security.header-injection",
      "languages": [
        "generic"
      ],
      "message": "The $$VARIABLE path parameter is added as a header in the response. This could allow an attacker to inject a newline and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace in the path parameter: '[^\\s]+'.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://github.com/yandex/gixy/blob/master/docs/en/plugins/httpsplitting.md",
          "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "nginx"
        ]
      },
      "paths": {
        "include": [
          "*.conf",
          "*.vhost",
          "sites-available/*",
          "sites-enabled/*"
        ]
      },
      "pattern": "location ... <$VARIABLE> ... {\n  ...\n  add_header ... $$VARIABLE\n  ...\n}\n",
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.nginx.security.header-redefinition",
      "languages": [
        "generic"
      ],
      "message": "The 'add_header' directive is called in a 'location' block after headers have been set at the server block. Calling 'add_header' in the location block will actually overwrite the headers defined in the server block, no matter which headers are set. To fix this, explicitly set all headers or set all headers in the server block.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-16: CWE CATEGORY: Configuration"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A06:2017 - Security Misconfiguration",
          "A05:2021 - Security Misconfiguration"
        ],
        "references": [
          "https://github.com/yandex/gixy/blob/master/docs/en/plugins/addheaderredefinition.md"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "nginx"
        ]
      },
      "paths": {
        "include": [
          "*.conf",
          "*.vhost",
          "sites-available/*",
          "sites-enabled/*"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "server {\n  ...\n  add_header ...;\n  ...\n  ...\n}\n"
        },
        {
          "pattern-inside": "location ... {\n  ...\n  ...\n}\n"
        },
        {
          "pattern": "add_header ...;"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.generic.nginx.security.insecure-redirect",
      "languages": [
        "generic"
      ],
      "message": "Detected an insecure redirect in this nginx configuration. If no scheme is specified, nginx will forward the request with the incoming scheme. This could result in unencrypted communications. To fix this, include the 'https' scheme.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-319: Cleartext Transmission of Sensitive Information"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A02_2021-Cryptographic_Failures"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "nginx"
        ]
      },
      "paths": {
        "include": [
          "*.conf",
          "*.vhost",
          "sites-available/*",
          "sites-enabled/*"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "rewrite ... redirect"
            },
            {
              "pattern": "rewrite ... permanent"
            }
          ]
        },
        {
          "pattern-not-inside": "rewrite ... https ... $host ... redirect"
        },
        {
          "pattern-not-inside": "rewrite ... https ... $host ... permanent"
        },
        {
          "pattern-not-regex": "(?i)https:\\/\\/"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.generic.nginx.security.insecure-ssl-version",
      "languages": [
        "generic"
      ],
      "message": "Detected use of an insecure SSL version. Secure SSL versions are TLSv1.2 and TLS1.3; older versions are known to be broken and are susceptible to attacks. Prefer use of TLSv1.2 or later.",
      "metadata": {
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-326: Inadequate Encryption Strength"
        ],
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://www.acunetix.com/blog/web-security-zone/hardening-nginx/",
          "https://www.acunetix.com/blog/articles/tls-ssl-cipher-hardening/"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "nginx"
        ]
      },
      "paths": {
        "include": [
          "*.conf",
          "*.vhost",
          "sites-available/*",
          "sites-enabled/*"
        ]
      },
      "patterns": [
        {
          "pattern-not": "ssl_protocols TLSv1.2 TLSv1.3;"
        },
        {
          "pattern-not": "ssl_protocols TLSv1.3 TLSv1.2;"
        },
        {
          "pattern-not": "ssl_protocols TLSv1.2;"
        },
        {
          "pattern-not": "ssl_protocols TLSv1.3;"
        },
        {
          "pattern": "ssl_protocols ...;"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.generic.nginx.security.missing-internal",
      "languages": [
        "generic"
      ],
      "message": "This location block contains a 'proxy_pass' directive but does not contain the 'internal' directive. The 'internal' directive restricts access to this location to internal requests. Without 'internal', an attacker could use your server for server-side request forgeries (SSRF). Include the 'internal' directive in this block to limit exposure.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-16: CWE CATEGORY: Configuration"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A06:2017 - Security Misconfiguration",
          "A05:2021 - Security Misconfiguration"
        ],
        "references": [
          "https://github.com/yandex/gixy/blob/master/docs/en/plugins/ssrf.md",
          "https://nginx.org/en/docs/http/ngx_http_core_module.html#internal"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "nginx"
        ]
      },
      "options": {
        "generic_ellipsis_max_span": 0,
        "generic_engine": "aliengrep"
      },
      "paths": {
        "include": [
          "*.conf",
          "*.vhost",
          "sites-available/*",
          "sites-enabled/*"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "location ... {\n  ....\n  ....\n}\n"
        },
        {
          "pattern-not-inside": "location ... {\n  ....\n  internal;\n  ....\n}\n"
        },
        {
          "pattern": "proxy_pass $...URL;"
        },
        {
          "metavariable-regex": {
            "metavariable": "$...URL",
            "regex": "(.*\\$.*)"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.generic.nginx.security.missing-ssl-version",
      "languages": [
        "generic"
      ],
      "message": "This server configuration is missing the 'ssl_protocols' directive. By default, this server will use 'ssl_protocols TLSv1 TLSv1.1 TLSv1.2', and versions older than TLSv1.2 are known to be broken. Explicitly specify 'ssl_protocols TLSv1.2 TLSv1.3' to use secure TLS versions.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-326: Inadequate Encryption Strength"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://www.acunetix.com/blog/web-security-zone/hardening-nginx/",
          "https://nginx.org/en/docs/http/configuring_https_servers.html"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "nginx"
        ]
      },
      "paths": {
        "include": [
          "*.conf",
          "*.vhost",
          "sites-available/*",
          "sites-enabled/*"
        ]
      },
      "patterns": [
        {
          "pattern": "server { ... listen $PORT ssl; ... }"
        },
        {
          "pattern-not-inside": "server { ... ssl_protocols ... }"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.generic.nginx.security.possible-nginx-h2c-smuggling",
      "languages": [
        "generic"
      ],
      "message": "Conditions for Nginx H2C smuggling identified. H2C smuggling allows upgrading HTTP/1.1 connections to lesser-known HTTP/2 over cleartext (h2c) connections which can allow a bypass of reverse proxy access controls, and lead to long-lived, unrestricted HTTP traffic directly to back-end servers. To mitigate: WebSocket support required: Allow only the value websocket for HTTP/1.1 upgrade headers (e.g., Upgrade: websocket). WebSocket support not required: Do not forward Upgrade headers.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A04:2021 - Insecure Design"
        ],
        "references": [
          "https://labs.bishopfox.com/tech-blog/h2c-smuggling-request-smuggling-via-http/2-cleartext-h2c"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "nginx"
        ]
      },
      "paths": {
        "include": [
          "*.conf",
          "*.vhost",
          "sites-available/*",
          "sites-enabled/*"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "proxy_http_version 1.1 ...;\n...\nproxy_set_header Upgrade ...;\n...\nproxy_set_header Connection ...;\n"
            },
            {
              "pattern": "proxy_set_header Upgrade ...;\n...\nproxy_set_header Connection ...;\n...\nproxy_http_version 1.1 ...;\n"
            },
            {
              "pattern": "proxy_set_header Upgrade ...;\n...\nproxy_http_version 1.1 ...;\n...\nproxy_set_header Connection ...;\n"
            }
          ]
        },
        {
          "pattern-inside": "location ... {\n  ...\n}\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.generic.nginx.security.request-host-used",
      "languages": [
        "generic"
      ],
      "message": "'$http_host' and '$host' variables may contain a malicious value from attacker controlled 'Host' request header. Use an explicitly configured host value or a allow list for validation.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-290: Authentication Bypass by Spoofing"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://github.com/yandex/gixy/blob/master/docs/en/plugins/hostspoofing.md",
          "https://portswigger.net/web-security/host-header"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "nginx"
        ]
      },
      "paths": {
        "include": [
          "*conf*",
          "*nginx*",
          "*vhost*",
          "sites-available/*",
          "sites-enabled/*"
        ]
      },
      "pattern-either": [
        {
          "pattern": "$http_host"
        },
        {
          "pattern": "$host"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.adafruit-api-key",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Adafruit API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:adafruit)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9_-]{32})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.adobe-client-id",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Adobe Client ID detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:adobe)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-f0-9]{32})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.adobe-client-secret",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Adobe Client Secret detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)\\b((p8e-)(?i)[a-z0-9]{32})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.age-secret-key",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Age Secret Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "AGE-SECRET-KEY-1[QPZRY9X8GF2TVDW0S3JN54KHCE6MUA7L]{58}"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.airtable-api-key",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Airtable API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:airtable)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9]{17})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.algolia-api-key",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Algolia API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:algolia)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9]{32})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.alibaba-access-key-id",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Alibaba Access Key ID detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)\\b((LTAI)(?i)[a-z0-9]{20})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.alibaba-secret-key",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Alibaba Secret Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:alibaba)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9]{30})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.asana-client-id",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Asana Client ID detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:asana)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([0-9]{16})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.asana-client-secret",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Asana Client Secret detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:asana)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9]{32})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.atlassian-api-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Atlassian API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:atlassian|confluence|jira)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9]{24})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.authress-service-client-access-key",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Authress Service Client Access Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)\\b((?:sc|ext|scauth|authress)_[a-z0-9]{5,30}\\.[a-z0-9]{4,6}\\.acc[_-][a-z0-9-]{10,32}\\.[a-z0-9+/_=-]{30,120})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.aws-access-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks AWS Access Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?:A3T[A-Z0-9]|AKIA|ASIA|ABIA|ACCA)[A-Z0-9]{16}"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.beamer-api-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Beamer API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:beamer)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}(b_[a-z0-9=_\\-]{44})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.bitbucket-client-id",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Bitbucket Client ID detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:bitbucket)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9]{32})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.bitbucket-client-secret",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Bitbucket Client Secret detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:bitbucket)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9=_\\-]{64})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.bittrex-access-key",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Bittrex Access Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:bittrex)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9]{32})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.bittrex-secret-key",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Bittrex Secret Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:bittrex)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9]{32})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.clojars-api-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Clojars API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(CLOJARS_)[a-z0-9]{60}"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.cloudflare-api-key",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Cloudflare API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:cloudflare)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9_-]{40})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.cloudflare-global-api-key",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Cloudflare Global API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:cloudflare)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-f0-9]{37})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.cloudflare-origin-ca-key",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Cloudflare Origin Ca Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "\\b(v1\\.0-[a-f0-9]{24}-[a-f0-9]{146})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.codecov-access-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Codecov Access Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:codecov)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9]{32})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.coinbase-access-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Coinbase Access Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:coinbase)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9_-]{64})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.confluent-access-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Confluent Access Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:confluent)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9]{16})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.confluent-secret-key",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Confluent Secret Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:confluent)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9]{64})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.contentful-delivery-api-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Contentful Delivery API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:contentful)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9=_\\-]{43})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.databricks-api-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Databricks API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)\\b(dapi[a-h0-9]{32})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.datadog-access-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Datadog Access Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:datadog)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9]{40})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.defined-networking-api-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Defined Networking API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:dnkey)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}(dnkey-[a-z0-9=_\\-]{26}-[a-z0-9=_\\-]{52})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.digitalocean-access-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Digitalocean Access Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)\\b(doo_v1_[a-f0-9]{64})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.digitalocean-pat",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Digitalocean Pat credential detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)\\b(dop_v1_[a-f0-9]{64})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.digitalocean-refresh-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Digitalocean Refresh Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)\\b(dor_v1_[a-f0-9]{64})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.discord-api-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Discord API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:discord)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-f0-9]{64})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.discord-client-id",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Discord Client ID detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:discord)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([0-9]{18})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.discord-client-secret",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Discord Client Secret detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:discord)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9=_\\-]{32})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.doppler-api-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Doppler API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(dp\\.pt\\.)(?i)[a-z0-9]{43}"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.droneci-access-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Droneci Access Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:droneci)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9]{32})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.dropbox-api-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Dropbox API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:dropbox)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9]{15})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.dropbox-long-lived-api-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Dropbox Long Lived API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:dropbox)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9]{11}(AAAAAAAAAA)[a-z0-9\\-_=]{43})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.dropbox-short-lived-api-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Dropbox Short Lived API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:dropbox)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}(sl\\.[a-z0-9\\-=_]{135})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.duffel-api-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Duffel API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "duffel_(test|live)_(?i)[a-z0-9_\\-=]{43}"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.dynatrace-api-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Dynatrace API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "dt0c01\\.(?i)[a-z0-9]{24}\\.[a-z0-9]{64}"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.easypost-api-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Easypost API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "\\bEZAK(?i)[a-z0-9]{54}"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.easypost-test-api-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Easypost Test API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "\\bEZTK(?i)[a-z0-9]{54}"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.etsy-access-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Etsy Access Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:etsy)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9]{24})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.facebook-access-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Facebook Access Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)\\b(\\d{15,16}(\\||%)[0-9a-z\\-_]{27,40})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.facebook-page-access-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Facebook Page Access Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)\\b(EAA[MC][a-z0-9]{20,})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.facebook-secret",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Facebook Secret detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:facebook)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-f0-9]{32})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.facebook",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Facebook credential detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:facebook)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-f0-9]{32})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.fastly-api-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Fastly API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:fastly)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9=_\\-]{32})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.finicity-api-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Finicity API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:finicity)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-f0-9]{32})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.finicity-client-secret",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Finicity Client Secret detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:finicity)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9]{20})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.finnhub-access-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Finnhub Access Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:finnhub)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9]{20})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.flickr-access-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Flickr Access Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:flickr)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9]{32})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.flutterwave-encryption-key",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Flutterwave Encryption Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "FLWSECK_TEST-(?i)[a-h0-9]{12}"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.flutterwave-public-key",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Flutterwave Public Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "FLWPUBK_TEST-(?i)[a-h0-9]{32}-X"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.flutterwave-secret-key",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Flutterwave Secret Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "FLWSECK_TEST-(?i)[a-h0-9]{32}-X"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.frameio-api-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Frameio API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "fio-u-(?i)[a-z0-9\\-_=]{64}"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.freshbooks-access-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Freshbooks Access Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:freshbooks)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9]{64})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.gcp-api-key",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks GCP API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)\\b(AIza[0-9A-Za-z\\\\-_]{35})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.generic-api-key",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Generic API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "paths": {
        "exclude": [
          "*.svg",
          "*go.sum",
          "*cargo.lock",
          "*package.json",
          "*package-lock.json",
          "*bundle.js",
          "*pnpm-lock*",
          "*Podfile.lock",
          "*/openssl/*.h",
          "*.xcscmblueprint"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:key|api|token|secret|client|passwd|password|auth|access)(?:[0-9a-z\\-_\\t.]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:=|\\|\\|:|<=|=>|:)(?:'|@\\\"|\\\"|\\s|=|\\x60){0,5}(?!([a-z]+\\.[a-zA-Z]+)|.*(\\d{4}-\\d{2}-\\d{2})|:*(?!(\"|'))[0-9A-Za-z]+\\.[0-9A-Za-z]+,|[A-Z]+_[A-Z]+_)(?P<CONTENT>[0-9a-z\\-_.=\\~@]{10,150})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        },
        {
          "metavariable-analysis": {
            "analyzer": "entropy",
            "metavariable": "$CONTENT"
          }
        },
        {
          "focus-metavariable": "$CONTENT"
        },
        {
          "pattern-not-regex": ".*((?i)omitted|arn:aws|(?i)(pub.*key|public.*key)|(?i)clientToken|symbol|cache|author\\.).*"
        },
        {
          "pattern-not-regex": "(\\d\\.\\d\\.\\d-}|([\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3})|(\\w)\\1{5}|(?i)keywords|xxxx|eeeeeeee|0000|\\*\\*\\*|example|test|author=|author(\"|')|preview|[A-Z]+_KEY|[.]value|[.]key|-\\d\\.\\d\\.)"
        },
        {
          "metavariable-regex": {
            "metavariable": "$CONTENT",
            "regex": "(?!(^0x0*|^pub)|.*\\.(bin|json|exe)$|.*(?i)(Client|Factory)$|(^__[A-Za-z]+__$)|^(12345|abcd)|^\\d+(\\.\\d+)?$)"
          }
        },
        {
          "pattern-not-regex": "(\\w|\\.)\\1{5}"
        },
        {
          "metavariable-regex": {
            "metavariable": "$CONTENT",
            "regex": "(?!(?i).*(client|endpoint|vpn|_ec2_|aws_|authorize|author|define|config|credential|setting|sample|xxxxxx|000000|buffer|delete|aaaaaa|fewfwef|getenv|env_|system|example|ecdsa|sha256|sha1|sha2|md5|alert|wizard|target|onboard|welcome|page|exploit|experiment|expire|rabbitmq|scraper|widget|music|dns_|dns-|yahoo|want|json|action|script|fix_|fix-|develop|compas|stripe|service|master|metric|tech|gitignore|rich|open|stack|irc_|irc-|sublime|kohana|has_|has-|fabric|wordpres|role|osx_|osx-|boost|addres|queue|working|sandbox|internet|print|vision|tracking|being|generator|traffic|world|pull|rust|watcher|small|auth|full|hash|more|install|auto|complete|learn|paper|installer|research|acces|last|binding|spine|into|chat|algorithm|resource|uploader|video|maker|next|proc|lock|robot|snake|patch|matrix|drill|terminal|term|stuff|genetic|generic|identity|audit|pattern|audio|web_|web-|crud|problem|statu|cms-|cms_|arch|coffee|workflow|changelog|another|uiview|content|kitchen|gnu_|gnu-|gnu\\.|conf|couchdb|client|opencv|rendering|update|concept|varnish|gui_|gui-|gui\\.|version|shared|extra|product|still|not_|not-|not\\.|drop|ring|png_|png-|png\\.|actively|import|output|backup|start|embedded|registry|pool|semantic|instagram|bash|system|ninja|drupal|jquery|polyfill|physic|league|guide|pack|synopsi|sketch|injection|svg_|svg-|svg\\.|friendly|wave|convert|manage|camera|link|slide|timer|wrapper|gallery|url_|url-|url\\.|todomvc|requirej|party|http|payment|async|library|home|coco|gaia|display|universal|func|metadata|hipchat|under|room|config|personal|realtime|resume|database|testing|tiny|basic|forum|meetup|yet_|yet-|yet\\.|cento|dead|fluentd|editor|utilitie|run_|run-|run\\.|box_|box-|box\\.|bot_|bot-|bot\\.|making|sample|group|monitor|ajax|parallel|cassandra|ultimate|site|get_|get-|get\\.|gen_|gen-|gen\\.|gem_|gem-|gem\\.|extended|image|knife|asset|nested|zero|plugin|bracket|mule|mozilla|number|act_|act-|act\\.|map_|map-|map\\.|micro|debug|openshift|chart|expres|backend|task|source|translate|jbos|composer|sqlite|profile|mustache|mqtt|yeoman|have|builder|smart|like|oauth|school|guideline|captcha|filter|bitcoin|bridge|color|toolbox|discovery|new_|new-|new\\.|dashboard|when|setting|level|post|standard|port|platform|yui_|yui-|yui\\.|grunt|animation|haskell|icon|latex|cheat|lua_|lua-|lua\\.|gulp|case|author|without|simulator|wifi|directory|lisp|list|flat|adventure|story|storm|gpu_|gpu-|gpu\\.|store|caching|attention|solr|logger|demo|shortener|hadoop|finder|phone|pipeline|range|textmate|showcase|app_|app-|app\\.|idiomatic|edit|our_|our-|our\\.|out_|out-|out\\.|sentiment|linked|why_|why-|why\\.|local|cube|gmail|job_|job-|job\\.|rpc_|rpc-|rpc\\.|contest|tcp_|tcp-|tcp\\.|usage|buildout|weather|transfer|automated|sphinx|issue|sas_|sas-|sas\\.|parallax|jasmine|addon|machine|solution|dsl_|dsl-|dsl\\.|episode|menu|theme|best|adapter|debugger|chrome|tutorial|life|step|people|joomla|paypal|developer|solver|team|current|love|visual|date|data|canva|container|future|xml_|xml-|xml\\.|twig|nagio|spatial|original|sync|archived|refinery|science|mapping|gitlab|play|ext_|ext-|ext\\.|session|impact|set_|set-|set\\.|see_|see-|see\\.|migration|commit|community|shopify|what'|cucumber|statamic|mysql|location|tower|line|code|amqp|hello|send|index|high|notebook|alloy|python|field|document|soap|edition|email|php_|php-|php\\.|command|transport|official|upload|study|secure|angularj|akka|scalable|package|request|con_|con-|con\\.|flexible|security|comment|module|flask|graph|flash|apache|change|window|space|lambda|sheet|bookmark|carousel|friend|objective|jekyll|bootstrap|first|article|gwt_|gwt-|gwt\\.|classic|media|websocket|touch|desktop|real|read|recorder|moved|storage|validator|add-on|pusher|scs_|scs-|scs\\.|inline|asp_|asp-|asp\\.|timeline|base|encoding|ffmpeg|kindle|tinymce|pretty|jpa_|jpa-|jpa\\.|used|user|required|webhook|download|resque|espresso|cloud|mongo|benchmark|pure|cakephp|modx|mode|reactive|fuel|written|flickr|mail|brunch|meteor|dynamic|neo_|neo-|neo\\.|new_|new-|new\\.|net_|net-|net\\.|typo|type|keyboard|erlang|adobe|logging|ckeditor|message|iso_|iso-|iso\\.|hook|ldap|folder|reference|railscast|www_|www-|www\\.|tracker|azure|fork|form|digital|exporter|skin|string|template|designer|gollum|fluent|entity|language|alfred|summary|wiki|kernel|calendar|plupload|symfony|foundry|remote|talk|search|dev_|dev-|dev\\.|del_|del-|del\\.|token|idea|sencha|selector|interface|create|fun_|fun-|fun\\.|groovy|query|grail|red_|red-|red\\.|laravel|monkey|slack|supported|instant|value|center|latest|work|but_|but-|but\\.|bug_|bug-|bug\\.|virtual|tweet|statsd|studio|path|real-time|frontend|notifier|coding|tool|firmware|flow|random|mediawiki|bosh|been|beer|lightbox|theory|origin|redmine|hub_|hub-|hub\\.|require|pro_|pro-|pro\\.|ant_|ant-|ant\\.|any_|any-|any\\.|recipe|closure|mapper|event|todo|model|redi|provider|rvm_|rvm-|rvm\\.|program|memcached|rail|silex|foreman|activity|license|strategy|batch|streaming|fast|use_|use-|use\\.|usb_|usb-|usb\\.|impres|academy|slider|please|layer|cros|now_|now-|now\\.|miner|extension|own_|own-|own\\.|app_|app-|app\\.|debian|symphony|example|feature|serie|tree|project|runner|entry|leetcode|layout|webrtc|logic|login|worker|toolkit|mocha|support|back|inside|device|jenkin|contact|fake|awesome|ocaml|bit_|bit-|bit\\.|drive|screen|prototype|gist|binary|nosql|rest|overview|dart|dark|emac|mongoid|solarized|homepage|emulator|commander|django|yandex|gradle|xcode|writer|crm_|crm-|crm\\.|jade|startup|error|using|format|name|spring|parser|scratch|magic|try_|try-|try\\.|rack|directive|challenge|slim|counter|element|chosen|doc_|doc-|doc\\.|meta|should|button|packet|stream|hardware|android|infinite|password|software|ghost|xamarin|spec|chef|interview|hubot|mvc_|mvc-|mvc\\.|exercise|leaflet|launcher|air_|air-|air\\.|photo|board|boxen|way_|way-|way\\.|computing|welcome|notepad|portfolio|cat_|cat-|cat\\.|can_|can-|can\\.|magento|yaml|domain|card|yii_|yii-|yii\\.|checker|browser|upgrade|only|progres|aura|ruby_|ruby-|ruby\\.|polymer|util|lite|hackathon|rule|log_|log-|log\\.|opengl|stanford|skeleton|history|inspector|help|soon|selenium|lab_|lab-|lab\\.|scheme|schema|look|ready|leveldb|docker|game|minimal|logstash|messaging|within|heroku|mongodb|kata|suite|picker|win_|win-|win\\.|wip_|wip-|wip\\.|panel|started|starter|front-end|detector|deploy|editing|based|admin|capture|spree|page|bundle|goal|rpg_|rpg-|rpg\\.|setup|side|mean|reader|cookbook|mini|modern|seed|dom_|dom-|dom\\.|doc_|doc-|doc\\.|dot_|dot-|dot\\.|syntax|sugar|loader|website|make|kit_|kit-|kit\\.|protocol|human|daemon|golang|manager|countdown|connector|swagger|map_|map-|map\\.|mac_|mac-|mac\\.|man_|man-|man\\.|orm_|orm-|orm\\.|org_|org-|org\\.|little|zsh_|zsh-|zsh\\.|shop|show|workshop|money|grid|server|octopres|svn_|svn-|svn\\.|ember|embed|general|file|important|dropbox|portable|public|docpad|fish|sbt_|sbt-|sbt\\.|done|para|network|common|readme|popup|simple|purpose|mirror|single|cordova|exchange|object|design|gateway|account|lamp|intellij|math|mit_|mit-|mit\\.|control|enhanced|emitter|multi|add_|add-|add\\.|about|socket|preview|vagrant|cli_|cli-|cli\\.|powerful|top_|top-|top\\.|radio|watch|fluid|amazon|report|couchbase|automatic|detection|sprite|pyramid|portal|advanced|plu_|plu-|plu\\.|runtime|git_|git-|git\\.|uri_|uri-|uri\\.|haml|node|sql_|sql-|sql\\.|cool|core|obsolete|handler|iphone|extractor|array|copy|nlp_|nlp-|nlp\\.|reveal|pop_|pop-|pop\\.|engine|parse|check|html|nest|all_|all-|all\\.|chinese|buildpack|what|tag_|tag-|tag\\.|proxy|style|cookie|feed|restful|compiler|creating|prelude|context|java|rspec|mock|backbone|light|spotify|flex|related|shell|which|clas|webapp|swift|ansible|unity|console|tumblr|export|campfire|conway'|made|riak|hero|here|unix|unit|glas|smtp|how_|how-|how\\.|hot_|hot-|hot\\.|debug|release|diff|player|easy|right|old_|old-|old\\.|animate|time|push|explorer|course|training|nette|router|draft|structure|note|salt|where|spark|trello|power|method|social|via_|via-|via\\.|vim_|vim-|vim\\.|select|webkit|github|ftp_|ftp-|ftp\\.|creator|mongoose|led_|led-|led\\.|movie|currently|pdf_|pdf-|pdf\\.|load|markdown|phalcon|input|custom|atom|oracle|phonegap|ubuntu|great|rdf_|rdf-|rdf\\.|popcorn|firefox|zip_|zip-|zip\\.|cuda|dotfile|static|openwrt|viewer|powered|graphic|les_|les-|les\\.|doe_|doe-|doe\\.|maven|word|eclipse|lab_|lab-|lab\\.|hacking|steam|analytic|option|abstract|archive|reality|switcher|club|write|kafka|arduino|angular|online|title|don't|contao|notice|analyzer|learning|zend|external|staging|busines|tdd_|tdd-|tdd\\.|scanner|building|snippet|modular|bower|stm_|stm-|stm\\.|lib_|lib-|lib\\.|alpha|mobile|clean|linux|nginx|manifest|some|raspberry|gnome|ide_|ide-|ide\\.|block|statistic|info|drag|youtube|koan|facebook|paperclip|art_|art-|art\\.|quality|tab_|tab-|tab\\.|need|dojo|shield|computer|stat|state|twitter|utility|converter|hosting|devise|liferay|updated|force|tip_|tip-|tip\\.|behavior|active|call|answer|deck|better|principle|ches|bar_|bar-|bar\\.|reddit|three|haxe|just|plug-in|agile|manual|tetri|super|beta|parsing|doctrine|minecraft|useful|perl|sharing|agent|switch|view|dash|channel|repo|pebble|profiler|warning|cluster|running|markup|evented|mod_|mod-|mod\\.|share|csv_|csv-|csv\\.|response|good|house|connect|built|build|find|ipython|webgl|big_|big-|big\\.|google|scala|sdl_|sdl-|sdl\\.|sdk_|sdk-|sdk\\.|native|day_|day-|day\\.|puppet|text|routing|helper|linkedin|crawler|host|guard|merchant|poker|over|writing|free|classe|component|craft|nodej|phoenix|longer|quick|lazy|memory|clone|hacker|middleman|factory|motion|multiple|tornado|hack|ssh_|ssh-|ssh\\.|review|vimrc|driver|driven|blog|particle|table|intro|importer|thrift|xmpp|framework|refresh|react|font|librarie|variou|formatter|analysi|karma|scroll|tut_|tut-|tut\\.|apple|tag_|tag-|tag\\.|tab_|tab-|tab\\.|category|ionic|cache|homebrew|reverse|english|getting|shipping|clojure|boot|book|branch|combination|combo))"
          }
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.github-app-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Github App Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(ghu|ghs)_[0-9a-zA-Z]{36}"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.github-fine-grained-pat",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Github Fine Grained Pat credential detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "github_pat_[0-9a-zA-Z_]{82}"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.github-oauth",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Github OAuth credential detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "gho_[0-9a-zA-Z]{36}"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.github-pat",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Github Pat credential detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "ghp_[0-9a-zA-Z]{36}"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.github-refresh-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Github Refresh Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "ghr_[0-9a-zA-Z]{36}"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.gitlab-pat",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Gitlab Pat credential detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "glpat-[0-9a-zA-Z\\-\\_]{20}"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.gitlab-ptt",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Gitlab Ptt credential detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "glptt-[0-9a-f]{40}"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.gitlab-rrt",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Gitlab Rrt credential detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "GR1348941[0-9a-zA-Z\\-\\_]{20}"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.gitter-access-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Gitter Access Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:gitter)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9_-]{40})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.gocardless-api-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Gocardless API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:gocardless)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}(live_(?i)[a-z0-9\\-_=]{40})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.grafana-api-key",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Grafana API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)\\b(eyJrIjoi[A-Za-z0-9]{70,400}={0,2})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.grafana-cloud-api-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Grafana Cloud API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)\\b(glc_[A-Za-z0-9+/]{32,400}={0,2})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.grafana-service-account-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Grafana Service Account Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)\\b(glsa_[A-Za-z0-9]{32}_[A-Fa-f0-9]{8})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.harness-api-key",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Harness API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "((?:pat|sat)\\.[a-zA-Z0-9]{22}\\.[a-zA-Z0-9]{24}\\.[a-zA-Z0-9]{20})"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.hashicorp-tf-api-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Hashicorp Tf API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)[a-z0-9]{14}\\.atlasv1\\.[a-z0-9\\-_=]{60,70}"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.hashicorp-tf-password",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Hashicorp Tf Password detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:administrator_login_password|password)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}(\"[a-z0-9=_\\-]{8,20}\")(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.heroku-api-key",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Heroku API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:heroku)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.hubspot-api-key",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Hubspot API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:hubspot)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.huggingface-access-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Huggingface Access Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?:^|[\\\\'\"` >=:])(hf_[a-zA-Z]{34})(?:$|[\\\\'\"` <])"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.huggingface-organization-api-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Huggingface Organization API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?:^|[\\\\'\"` >=:\\(,)])(api_org_[a-zA-Z]{34})(?:$|[\\\\'\"` <\\),])"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.infracost-api-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Infracost API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)\\b(ico-[a-zA-Z0-9]{32})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.intercom-api-key",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Intercom API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:intercom)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9=_\\-]{60})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.intra42-client-secret",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Intra42 Client Secret detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)\\b(s-s4t2(?:ud|af)-[abcdef0123456789]{64})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.jfrog-api-key",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Jfrog API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:jfrog|artifactory|bintray|xray)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9]{73})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.jfrog-identity-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Jfrog Identity Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:jfrog|artifactory|bintray|xray)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9]{64})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.jwt-base64",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks JWT Base64 credential detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "\\bZXlK(?:(?P<alg>aGJHY2lPaU)|(?P<apu>aGNIVWlPaU)|(?P<apv>aGNIWWlPaU)|(?P<aud>aGRXUWlPaU)|(?P<b64>aU5qUWlP)|(?P<crit>amNtbDBJanBi)|(?P<cty>amRIa2lPaU)|(?P<epk>bGNHc2lPbn)|(?P<enc>bGJtTWlPaU)|(?P<jku>cWEzVWlPaU)|(?P<jwk>cWQyc2lPb)|(?P<iss>cGMzTWlPaU)|(?P<iv>cGRpSTZJ)|(?P<kid>cmFXUWlP)|(?P<key_ops>clpYbGZiM0J6SWpwY)|(?P<kty>cmRIa2lPaUp)|(?P<nonce>dWIyNWpaU0k2)|(?P<p2c>d01tTWlP)|(?P<p2s>d01uTWlPaU)|(?P<ppt>d2NIUWlPaU)|(?P<sub>emRXSWlPaU)|(?P<svt>emRuUWlP)|(?P<tag>MFlXY2lPaU)|(?P<typ>MGVYQWlPaUp)|(?P<url>MWNtd2l)|(?P<use>MWMyVWlPaUp)|(?P<ver>MlpYSWlPaU)|(?P<version>MlpYSnphVzl1SWpv)|(?P<x>NElqb2)|(?P<x5c>NE5XTWlP)|(?P<x5t>NE5YUWlPaU)|(?P<x5ts256>NE5YUWpVekkxTmlJNkl)|(?P<x5u>NE5YVWlPaU)|(?P<zip>NmFYQWlPaU))[a-zA-Z0-9\\/\\\\_+\\-\\r\\n]{40,}={0,2}"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.jwt",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks JWT credential detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "\\b(ey[a-zA-Z0-9]{17,}\\.ey[a-zA-Z0-9\\/\\\\_-]{17,}\\.(?:[a-zA-Z0-9\\/\\\\_-]{10,}={0,2})?)(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.kraken-access-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Kraken Access Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:kraken)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9\\/=_\\+\\-]{80,90})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.kucoin-access-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Kucoin Access Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:kucoin)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-f0-9]{24})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.kucoin-secret-key",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Kucoin Secret Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:kucoin)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.launchdarkly-access-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Launchdarkly Access Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:launchdarkly)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9=_\\-]{40})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.linear-api-key",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Linear API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "lin_api_(?i)[a-z0-9]{40}"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.linear-client-secret",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Linear Client Secret detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:linear)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-f0-9]{32})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.linkedin-client-id",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Linkedin Client ID detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:linkedin|linked-in)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9]{14})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.linkedin-client-secret",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Linkedin Client Secret detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:linkedin|linked-in)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9]{16})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.lob-api-key",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Lob API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:lob)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}((live|test)_[a-f0-9]{35})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.lob-pub-api-key",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Lob Pub API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:lob)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}((test|live)_pub_[a-f0-9]{31})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.mailchimp-api-key",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Mailchimp API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:MailchimpSDK.initialize|mailchimp)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-f0-9]{32}-us\\d\\d)(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.mailgun-private-api-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Mailgun Private API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:mailgun)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}(key-[a-f0-9]{32})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.mailgun-pub-key",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Mailgun Pub Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:mailgun)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}(pubkey-[a-f0-9]{32})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.mailgun-signing-key",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Mailgun Signing Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:mailgun)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-h0-9]{32}-[a-h0-9]{8}-[a-h0-9]{8})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.mapbox-api-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Mapbox API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:mapbox)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}(pk\\.[a-z0-9]{60}\\.[a-z0-9]{22})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.mattermost-access-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Mattermost Access Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:mattermost)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9]{26})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.messagebird-api-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Messagebird API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:messagebird|message-bird|message_bird)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9]{25})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.messagebird-client-id",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Messagebird Client ID detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:messagebird|message-bird|message_bird)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.microsoft-teams-webhook",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Microsoft Teams Webhook credential detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "https:\\/\\/[a-z0-9]+\\.webhook\\.office\\.com\\/webhookb2\\/[a-z0-9]{8}-([a-z0-9]{4}-){3}[a-z0-9]{12}@[a-z0-9]{8}-([a-z0-9]{4}-){3}[a-z0-9]{12}\\/IncomingWebhook\\/[a-z0-9]{32}\\/[a-z0-9]{8}-([a-z0-9]{4}-){3}[a-z0-9]{12}"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.netlify-access-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Netlify Access Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:netlify)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9=_\\-]{40,46})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.new-relic-browser-api-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks New Relic Browser API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:new-relic|newrelic|new_relic)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}(NRJS-[a-f0-9]{19})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.new-relic-insert-key",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks New Relic Insert Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:new-relic|newrelic|new_relic)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}(NRII-[a-z0-9-]{32})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.new-relic-user-api-id",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks New Relic User API ID detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:new-relic|newrelic|new_relic)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9]{64})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.new-relic-user-api-key",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks New Relic User API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:new-relic|newrelic|new_relic)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}(NRAK-[a-z0-9]{27})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.npm-access-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Npm Access Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)\\b(npm_[a-z0-9]{36})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.nytimes-access-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Nytimes Access Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:nytimes|new-york-times,|newyorktimes)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9=_\\-]{32})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.okta-access-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Okta Access Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:okta)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9=_\\-]{42})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.openai-api-key",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Openai API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)\\b(sk-[a-zA-Z0-9_-]+)(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.plaid-api-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Plaid API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:plaid)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}(access-(?:sandbox|development|production)-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.plaid-client-id",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Plaid Client ID detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:plaid)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9]{24})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.plaid-secret-key",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Plaid Secret Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:plaid)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9]{30})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.planetscale-api-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Planetscale API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)\\b(pscale_tkn_(?i)[a-z0-9=\\-_\\.]{32,64})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.planetscale-oauth-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Planetscale OAuth Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)\\b(pscale_oauth_(?i)[a-z0-9=\\-_\\.]{32,64})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.planetscale-password",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Planetscale Password detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)\\b(pscale_pw_(?i)[a-z0-9=\\-_\\.]{32,64})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.postman-api-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Postman API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)\\b(PMAK-(?i)[a-f0-9]{24}\\-[a-f0-9]{34})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.prefect-api-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Prefect API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)\\b(pnu_[a-z0-9]{36})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.private-key",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Private Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)-----BEGIN[ A-Z0-9_-]{0,100}PRIVATE KEY( BLOCK)?-----[\\s\\S-]*KEY( BLOCK)?----"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.pulumi-api-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Pulumi API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)\\b(pul-[a-f0-9]{40})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.pypi-upload-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Pypi Upload Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "pypi-AgEIcHlwaS5vcmc[A-Za-z0-9\\-_]{50,1000}"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.rapidapi-access-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Rapidapi Access Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:rapidapi)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9_-]{50})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.readme-api-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Readme API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)\\b(rdme_[a-z0-9]{70})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.rubygems-api-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Rubygems API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)\\b(rubygems_[a-f0-9]{48})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.scalingo-api-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Scalingo API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "\\b(tk-us-[a-zA-Z0-9-_]{48})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.sendbird-access-id",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Sendbird Access ID detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:sendbird)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.sendbird-access-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Sendbird Access Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:sendbird)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-f0-9]{40})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.sendgrid-api-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Sendgrid API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)\\b(SG\\.(?i)[a-z0-9=_\\-\\.]{66})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.sendinblue-api-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Sendinblue API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)\\b(xkeysib-[a-f0-9]{64}\\-(?i)[a-z0-9]{16})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.sentry-access-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Sentry Access Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:sentry)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-f0-9]{64})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.shippo-api-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Shippo API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)\\b(shippo_(live|test)_[a-f0-9]{40})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.shopify-access-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Shopify Access Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "shpat_[a-fA-F0-9]{32}"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.shopify-custom-access-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Shopify Custom Access Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "shpca_[a-fA-F0-9]{32}"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.shopify-private-app-access-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Shopify Private App Access Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "shppa_[a-fA-F0-9]{32}"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.shopify-shared-secret",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Shopify Shared Secret detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "shpss_[a-fA-F0-9]{32}"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.sidekiq-secret",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Sidekiq Secret detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:BUNDLE_ENTERPRISE__CONTRIBSYS__COM|BUNDLE_GEMS__CONTRIBSYS__COM)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-f0-9]{8}:[a-f0-9]{8})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.sidekiq-sensitive-url",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Sidekiq Sensitive URL credential detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)\\b(http(?:s??):\\/\\/)([a-f0-9]{8}:[a-f0-9]{8})@(?:gems.contribsys.com|enterprise.contribsys.com)(?:[\\/|\\#|\\?|:]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.slack-app-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Slack App Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(xapp-\\d-[A-Z0-9]+-\\d+-[a-z0-9]+)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.slack-bot-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Slack Bot Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(xoxb-[0-9]{10,13}\\-[0-9]{10,13}[a-zA-Z0-9-]*)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.slack-config-access-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Slack Config Access Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(xoxe.xox[bp]-\\d-[A-Z0-9]{163,166})"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.slack-config-refresh-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Slack Config Refresh Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(xoxe-\\d-[A-Z0-9]{146})"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.slack-legacy-bot-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Slack Legacy Bot Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(xoxb-[0-9]{8,14}\\-[a-zA-Z0-9]{18,26})"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.slack-legacy-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Slack Legacy Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(xox[os]-\\d+-\\d+-\\d+-[a-fA-F\\d]+)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.slack-legacy-workspace-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Slack Legacy Workspace Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(xox[ar]-(?:\\d-)?[0-9a-zA-Z]{8,48})"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.slack-user-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Slack User Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(xox[pe](?:-[0-9]{10,13}){3}-[a-zA-Z0-9-]{28,34})"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.slack-webhook-url",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Slack Webhook URL credential detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(https?:\\/\\/)?hooks.slack.com\\/(services|workflows)\\/[A-Za-z0-9+\\/]{43,46}"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.snyk-api-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Snyk API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:snyk_token|snyk_key|snyk_api_token|snyk_api_key|snyk_oauth_token)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.square-access-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Square Access Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)\\b((EAAA|sq0atp-)[0-9A-Za-z\\-_]{22,60})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.squarespace-access-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Squarespace Access Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:squarespace)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.stripe-access-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Stripe Access Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)\\b((sk|rk)_(test|live|prod)_[0-9a-z]{10,99})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.sumologic-access-id",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Sumologic Access ID detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i:(?:sumo)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3})(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}(su[a-zA-Z0-9]{12})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.sumologic-access-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Sumologic Access Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:sumo)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9]{64})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.telegram-bot-api-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Telegram Bot API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i:(?:telegr)(?:[0-9a-z\\(-_\\t .\\\\]{0,40})(?:[\\s|']|[\\s|\"]){0,3})(?:=|\\|\\|:|<=|=>|:|\\?=|\\()(?:'|\\\"|\\s|=|\\x60){0,5}([0-9]{5,16}:A[a-z0-9_\\-]{34})(?:['|\\\"|\\n|\\r|\\s|\\x60|;|\\\\]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.travisci-access-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Travisci Access Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:travis)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9]{22})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.twilio-api-key",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Twilio API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "SK[0-9a-fA-F]{32}"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.twitch-api-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Twitch API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:twitch)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9]{30})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.twitter-access-secret",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Twitter Access Secret detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:twitter)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9]{45})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.twitter-access-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Twitter Access Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:twitter)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([0-9]{15,25}-[a-zA-Z0-9]{20,40})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.twitter-api-key",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Twitter API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:twitter)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9]{25})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.twitter-api-secret",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Twitter API Secret detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:twitter)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9]{50})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.twitter-bearer-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Twitter Bearer Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:twitter)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}(A{22}[a-zA-Z0-9%]{80,100})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.typeform-api-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Typeform API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:typeform)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}(tfp_[a-z0-9\\-_\\.=]{59})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.vault-batch-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Vault Batch Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)\\b(hvb\\.[a-z0-9_-]{138,212})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.vault-service-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Vault Service Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)\\b(hvs\\.[a-z0-9_-]{90,100})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.yandex-access-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Yandex Access Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:yandex)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}(t1\\.[A-Z0-9a-z_-]+[=]{0,2}\\.[A-Z0-9a-z_-]{86}[=]{0,2})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.yandex-api-key",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Yandex API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:yandex)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}(AQVN[A-Za-z0-9_\\-]{35,38})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.yandex-aws-access-token",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Yandex AWS Access Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:yandex)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}(YC[a-zA-Z0-9_\\-]{38})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.gitleaks.zendesk-secret-key",
      "languages": [
        "regex"
      ],
      "message": "A gitleaks Zendesk Secret Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "source-rule-url": "https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "gitleaks"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?i)(?:zendesk)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:'|\\\"|\\s|=|\\x60){0,5}([a-z0-9]{40})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-amazon-mws-auth-token",
      "languages": [
        "regex"
      ],
      "message": "Amazon MWS Auth Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "source-rule-url": "https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "aws"
        ]
      },
      "pattern-regex": "amzn\\.mws\\.[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-artifactory-password",
      "languages": [
        "regex"
      ],
      "message": "Artifactory Password detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "source-rule-url": "https://github.com/Yelp/detect-secrets/blob/master/detect_secrets/plugins/artifactory.py",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "artifactory"
        ]
      },
      "paths": {
        "exclude": [
          "*.svg",
          "*go.sum",
          "*package.json",
          "*cargo.lock",
          "*package-lock.json",
          "*bundle.js",
          "*pnpm-lock*",
          "*Podfile.lock",
          "*/openssl/*.h",
          "*.xcscmblueprint"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "(?<ITEM>\\bAP[\\dABCDEF][a-zA-Z0-9]{8,})"
        },
        {
          "pattern-regex": ".*(?i)arti[-_]?factory.*"
        },
        {
          "pattern-not-regex": ".*(?i)sha(1|2|3|118|256|512).*"
        },
        {
          "pattern-not-regex": "(?i)-----\\s*?BEGIN[ A-Z0-9_-]*? KEY( BLOCK)?-----[\\s\\S]*?-----\\s*?END[ A-Z0-9_-]*?\\s*?-----"
        },
        {
          "metavariable-analysis": {
            "analyzer": "entropy",
            "metavariable": "$ITEM"
          }
        },
        {
          "pattern-not-regex": "(\\w|\\.|\\*)\\1{4}"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-artifactory-token",
      "languages": [
        "regex"
      ],
      "message": "Artifactory Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "source-rule-url": "https://github.com/Yelp/detect-secrets/blob/master/detect_secrets/plugins/artifactory.py",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "artifactory"
        ]
      },
      "paths": {
        "exclude": [
          "*.svg",
          "*go.sum",
          "*package.json",
          "*package-lock.json",
          "*bundle.js",
          "*pnpm-lock*",
          "*Podfile.lock",
          "*/openssl/*.h",
          "*.xcscmblueprint",
          "*cargo.lock"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "\\bAKC[a-zA-Z0-9]{10,}\n"
        },
        {
          "pattern-not-regex": "sha(128|256|512).*\n"
        },
        {
          "pattern-not-regex": "(?s)---BEGIN.*---\\Z"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-aws-access-key-id-value",
      "languages": [
        "regex"
      ],
      "message": "AWS Access Key ID Value detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "source-rule-url": "https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "aws"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "\\b(A3T[A-Z0-9]|AKIA|AGPA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}\\b"
        },
        {
          "pattern-not-regex": "(?i)example|sample|test|fake"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-aws-account-id",
      "languages": [
        "generic"
      ],
      "message": "AWS Account ID credential detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "source-rule-url": "https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "aws"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "$ACCOUNT_ID = $SECRET\n"
            },
            {
              "pattern": "$ACCOUNT_ID : $SECRET\n"
            },
            {
              "pattern": "$ACCOUNT_ID => $SECRET\n"
            },
            {
              "pattern": "$ACCOUNT_ID = \"$SECRET\"\n"
            },
            {
              "pattern": "$ACCOUNT_ID : \"$SECRET\"\n"
            },
            {
              "pattern": "$ACCOUNT_ID => \"$SECRET\"\n"
            },
            {
              "pattern": "\"$ACCOUNT_ID\" = \"$SECRET\"\n"
            },
            {
              "pattern": "\"$ACCOUNT_ID\" : \"$SECRET\"\n"
            },
            {
              "pattern": "\"$ACCOUNT_ID\" => \"$SECRET\"\n"
            }
          ]
        },
        {
          "metavariable-analysis": {
            "analyzer": "entropy",
            "metavariable": "$SECRET"
          }
        },
        {
          "metavariable-regex": {
            "metavariable": "$SECRET",
            "regex": "^((?!(12345|0000).*)[0-9]{12})$"
          }
        },
        {
          "metavariable-regex": {
            "metavariable": "$ACCOUNT_ID",
            "regex": "(AWS|aws|Aws)?_?(ACCOUNT|account|Account)_?(ID|id|Id)?(\"|')?"
          }
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-aws-appsync-graphql-key",
      "languages": [
        "regex"
      ],
      "message": "AWS Appsync Graphql Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "source-rule-url": "https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "appsync"
        ]
      },
      "pattern-regex": "da2-[a-z0-9]{26}",
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-aws-secret-access-key",
      "languages": [
        "regex"
      ],
      "message": "AWS Secret Access Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "source-rule-url": "https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "aws"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "((\"|'|`)?((?i)aws)_?\\w*((?i)secret)_?\\w*(\"|'|`)?\\s{0,50}(:|=>|=)\\s{0,50}(\"|'|`)?[A-Za-z0-9/+=]{40}(\"|'|`)?)"
        },
        {
          "pattern-not-regex": "(?i)example|sample|test|fake|xxxxxx"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-aws-session-token",
      "languages": [
        "regex"
      ],
      "message": "AWS Session Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "source-rule-url": "https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "aws"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "((?i)AWS_SESSION_TOKEN)\\s*(:|=>|=)\\s*(?P<TOKEN>[A-Za-z0-9/+=]{16,})"
        },
        {
          "pattern-not-regex": "(?i)example|sample|test|fake"
        },
        {
          "metavariable-analysis": {
            "analyzer": "entropy",
            "metavariable": "$TOKEN"
          }
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-bcrypt-hash",
      "languages": [
        "regex"
      ],
      "message": "Bcrypt Hash detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "bcrypt"
        ]
      },
      "pattern-regex": "\\$2[aby]?\\$[\\d]+\\$[./A-Za-z0-9]{53}",
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-codeclimate",
      "languages": [
        "regex"
      ],
      "message": "Codeclimate credential detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "source-rule-url": "https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "codeclimate"
        ]
      },
      "pattern-regex": "(?i)codeclima.{0,50}[\"|'|`]?[0-9a-f]{64}[\"|'|`]?",
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-etc-shadow",
      "languages": [
        "regex"
      ],
      "message": "Etc Shadow credential detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "^(\\s*)(?P<ROOT>root:[x!*]*:[0-9]*:[0-9]*)"
        },
        {
          "focus-metavariable": "$ROOT"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-facebook-access-token",
      "languages": [
        "regex"
      ],
      "message": "Facebook Access Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "source-rule-url": "https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "facebook"
        ]
      },
      "pattern-either": [
        {
          "pattern-regex": "EAACEdEose0cBA[0-9A-Za-z]+"
        },
        {
          "pattern-regex": "EAAAACZAVC6ygB[0-9A-Za-z]+"
        },
        {
          "pattern-regex": "EAAAAZAw4[0-9A-Za-z]+"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-facebook-oauth",
      "languages": [
        "regex"
      ],
      "message": "Facebook OAuth detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "source-rule-url": "https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "facebook"
        ]
      },
      "pattern-regex": "[fF][aA][cC][eE][bB][oO][oO][kK].*[tT][oO][kK][eE][nN].*['|\"]?[0-9a-f]{32}['|\"]?",
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-generic-api-key",
      "languages": [
        "regex"
      ],
      "message": "Generic API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json"
        ],
        "source-rule-url": "https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "[aA][pP][iI]_?[kK][eE][yY][=_:\\s-]+['|\"]?(?<SECRET>[0-9a-zA-Z]{32,45})['|\"]?"
        },
        {
          "metavariable-analysis": {
            "analyzer": "entropy",
            "metavariable": "$SECRET"
          }
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-generic-secret",
      "languages": [
        "regex"
      ],
      "message": "Generic Secret detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "source-rule-url": "https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "[sS][eE][cC][rR][eE][tT][:= \\t]*['|\\\"]?(?<SECRET>[0-9a-zA-Z]{32,45})['|\\\"]?"
        },
        {
          "metavariable-analysis": {
            "analyzer": "entropy",
            "metavariable": "$SECRET"
          }
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-github-token",
      "languages": [
        "generic"
      ],
      "message": "Github Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "source-rule-url": "https://github.blog/changelog/2021-03-04-authentication-token-format-updates/",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "github"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "$VAR = $SECRET\n"
            },
            {
              "pattern": "$VAR: $SECRET\n"
            },
            {
              "pattern": "$VAR = '$SECRET'\n"
            },
            {
              "pattern": "$VAR: '$SECRET'\n"
            },
            {
              "pattern": "'$VAR' = '$SECRET'\n"
            },
            {
              "pattern": "'$VAR': '$SECRET'\n"
            },
            {
              "pattern": "\"[hH][tT][tT][pP][sS]?://.*$SECRET.*\"\n"
            }
          ]
        },
        {
          "metavariable-regex": {
            "metavariable": "$SECRET",
            "regex": "gh[pousr]_[A-Za-z0-9_]{36,251}"
          }
        },
        {
          "metavariable-analysis": {
            "analyzer": "entropy",
            "metavariable": "$SECRET"
          }
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-google-api-key",
      "languages": [
        "regex"
      ],
      "message": "Google API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "source-rule-url": "https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "google"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "\\bAIzaSy[0-9A-Za-z-_]{33}\\b"
        },
        {
          "pattern-not-regex": "\\bAIzaSy[0-9A-Za-z-_]{33}\\b[=]"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-google-cloud-api-key",
      "languages": [
        "regex"
      ],
      "message": "Google Cloud API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "source-rule-url": "https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "google-cloud"
        ]
      },
      "pattern-regex": "AIza[0-9A-Za-z\\\\-_]{35}",
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-google-gcm-service-account",
      "languages": [
        "regex"
      ],
      "message": "Google GCM Service Account credential detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "source-rule-url": "https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "google-cloud"
        ]
      },
      "pattern-regex": "((\"|'|`)?type(\"|'|`)?\\s{0,50}(:|=>|=)\\s{0,50}(\"|'|`)?service_account(\"|'|`)?,?)",
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-google-oauth-access-token",
      "languages": [
        "regex"
      ],
      "message": "Google OAuth Access Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "source-rule-url": "https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "google"
        ]
      },
      "pattern-regex": "ya29\\.[0-9A-Za-z\\-_]+",
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-google-oauth-url",
      "languages": [
        "regex"
      ],
      "message": "Google OAuth detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "source-rule-url": "https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "google"
        ]
      },
      "pattern-regex": "[0-9]+-[0-9A-Za-z_]{32}\\.apps\\.googleusercontent\\.com",
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-heroku-api-key",
      "languages": [
        "regex"
      ],
      "message": "Heroku API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "source-rule-url": "https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "heroku"
        ]
      },
      "pattern-regex": "[hH][eE][rR][oO][kK][uU].*[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}",
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-hockeyapp",
      "languages": [
        "regex"
      ],
      "message": "Hockeyapp detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "source-rule-url": "https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "hockeyapp"
        ]
      },
      "pattern-regex": "(?i)hockey.{0,50}(\\\\\\\"|'|`)?[0-9a-f]{32}(\\\\\\\"|'|`)?",
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-jwt-token",
      "languages": [
        "regex"
      ],
      "message": "JWT token detected in source code. Avoid hardcoding tokens directly in your code, even if they are public or anonymous keys. Instead, use environment variables to store and access tokens at runtime. If you need the actual token values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-321: Use of Hard-coded Cryptographic Key"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"
        ],
        "source-rule-url": "https://github.com/Yelp/detect-secrets/blob/master/detect_secrets/plugins/jwt.py",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "jwt"
        ]
      },
      "pattern-regex": "eyJ[A-Za-z0-9-_=]{14,}\\.[A-Za-z0-9-_=]{13,}\\.?[A-Za-z0-9-_.+/=]*?",
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-kolide-api-key",
      "languages": [
        "regex"
      ],
      "message": "Kolide API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "kolide"
        ]
      },
      "pattern-regex": "k2sk_v[0-9]_[0-9a-zA-Z]{24}",
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-mailchimp-api-key",
      "languages": [
        "regex"
      ],
      "message": "Mailchimp API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "source-rule-url": "https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "mailchimp"
        ]
      },
      "pattern-regex": "[0-9a-f]{32}-us[0-9]{1,2}",
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-mailgun-api-key",
      "languages": [
        "regex"
      ],
      "message": "Mailgun API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "source-rule-url": "https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "mailgun"
        ]
      },
      "pattern-regex": "key-[0-9a-zA-Z]{32}",
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-npm-registry-auth-token",
      "languages": [
        "generic"
      ],
      "message": "NPM Registry Auth Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "npm"
        ]
      },
      "paths": {
        "include": [
          "*npmrc*"
        ]
      },
      "patterns": [
        {
          "pattern": "$AUTHTOKEN = $VALUE"
        },
        {
          "metavariable-regex": {
            "metavariable": "$AUTHTOKEN",
            "regex": "_(authToken|auth|password)"
          }
        },
        {
          "pattern-not": "$AUTHTOKEN = ${...}"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-onfido-live-api-token",
      "languages": [
        "regex"
      ],
      "message": "Onfido Live API Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "impact": "HIGH",
        "likelihood": "HIGH",
        "references": [
          "https://documentation.onfido.com/api/latest/#api-tokens"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "onfido"
        ]
      },
      "pattern-regex": "(?:api_live(?:_[a-zA-Z]{2})?\\.[a-zA-Z0-9-_]{11}\\.[-_a-zA-Z0-9]{32})",
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-outlook-team",
      "languages": [
        "regex"
      ],
      "message": "Outlook Team credential detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "source-rule-url": "https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "outlook"
        ]
      },
      "pattern-regex": "https://outlook\\.office\\.com/webhook/[0-9a-f-]{36}",
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-paypal-braintree-access-token",
      "languages": [
        "regex"
      ],
      "message": "Paypal Braintree Access Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "source-rule-url": "https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "paypal",
          "braintree"
        ]
      },
      "pattern-regex": "access_token\\$production\\$[0-9a-z]{16}\\$[0-9a-z]{32}",
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-pgp-private-key-block",
      "languages": [
        "regex"
      ],
      "message": "PGP Private Key Block detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "source-rule-url": "https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets"
        ]
      },
      "pattern-regex": "-----BEGIN PGP PRIVATE KEY BLOCK-----",
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-picatic-api-key",
      "languages": [
        "regex"
      ],
      "message": "Picatic API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "source-rule-url": "https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "picatic"
        ]
      },
      "pattern-regex": "sk_live_[0-9a-z]{32}",
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-private-key",
      "languages": [
        "generic"
      ],
      "message": "Private Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "source-rule-url": "https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern": "-----BEGIN $TYPE PRIVATE KEY----- $KEY"
                },
                {
                  "metavariable-regex": {
                    "metavariable": "$TYPE",
                    "regex": "(?i)([dr]sa|ec|openssh|encrypted)?"
                  }
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern": "-----BEGIN PRIVATE KEY-----\n$KEY\n"
                }
              ]
            }
          ]
        },
        {
          "metavariable-analysis": {
            "analyzer": "entropy",
            "metavariable": "$KEY"
          }
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-sauce-token",
      "languages": [
        "regex"
      ],
      "message": "Sauce Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "source-rule-url": "https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "sauce"
        ]
      },
      "pattern-regex": "(?i)sauce.{0,50}(\\\\\\\"|'|`)?[0-9a-f-]{36}(\\\\\\\"|'|`)?",
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-sendgrid-api-key",
      "languages": [
        "regex"
      ],
      "message": "Sendgrid API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "source-rule-url": "https://github.com/narendrakadali/gitrob/blob/master/rules/contentsignatures.json",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "sendgrid"
        ]
      },
      "pattern-regex": "SG\\.[a-zA-Z0-9]{22}\\.[a-zA-Z0-9-]{43}\\b",
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-slack-token",
      "languages": [
        "regex"
      ],
      "message": "Slack Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://github.com/davidburkitt/python-secret-scanner/blob/335a1f6dab8de59cf39063e57aea39a58951e939/patterns.txt#L58"
        ],
        "source-rule-url": "https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "slack"
        ]
      },
      "pattern-either": [
        {
          "pattern-regex": "(xox[pboa]-[0-9]{12}-[0-9]{12}-[0-9]{12}-[a-z0-9]{32})"
        },
        {
          "pattern-regex": "xox.-[0-9]{12}-[0-9]{12}-[0-9a-zA-Z]{24}"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-slack-webhook",
      "languages": [
        "regex"
      ],
      "message": "Slack Webhook detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://api.slack.com/messaging/webhooks"
        ],
        "source-rule-url": "https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "slack"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "https://hooks\\.slack\\.com/services/T[a-zA-Z0-9_]{8,10}/B[a-zA-Z0-9_]{8,10}/[a-zA-Z0-9_]{24}"
        },
        {
          "pattern-not": "https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-snyk-api-key",
      "languages": [
        "regex"
      ],
      "message": "Snyk API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "snyk"
        ]
      },
      "pattern-regex": "(?i)snyk.{0,50}['|\"|`]?[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}['\"\\s]?",
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-softlayer-api-key",
      "languages": [
        "regex"
      ],
      "message": "Softlayer API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "source-rule-url": "https://github.com/Yelp/detect-secrets/blob/master/detect_secrets/plugins/softlayer.py",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "softlayer"
        ]
      },
      "pattern-regex": "(?i)softlayer.{0,50}[\"|'|`]?[a-z0-9]{64}[\"|'|`]?",
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-sonarqube-docs-api-key",
      "languages": [
        "regex"
      ],
      "message": "Sonarqube Docs API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "source-rule-url": "https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "sonarqube"
        ]
      },
      "paths": {
        "exclude": [
          "*.svg",
          "*go.sum",
          "*cargo.lock",
          "*package.json",
          "*yarn.lock",
          "*package-lock.json",
          "*bundle.js",
          "*pnpm-lock*",
          "*Podfile.lock",
          "*/openssl/*.h",
          "*.xcscmblueprint"
        ]
      },
      "pattern-regex": "(?i)sonar.{0,50}(\\\\\\\"|'|`)?[0-9a-f]{40}(\\\\\\\"|'|`)?",
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-square-access-token",
      "languages": [
        "regex"
      ],
      "message": "Square Access Token detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "source-rule-url": "https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "square"
        ]
      },
      "pattern-regex": "sq0atp-[0-9A-Za-z\\-_]{22}",
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-square-oauth-secret",
      "languages": [
        "regex"
      ],
      "message": "Square OAuth Secret detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://github.com/Yelp/detect-secrets/blob/master/tests/plugins/square_oauth_test.py"
        ],
        "source-rule-url": "https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "square"
        ]
      },
      "pattern-regex": "sq0csp-[0-9A-Za-z\\\\\\-_]{43}",
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-ssh-password",
      "languages": [
        "regex"
      ],
      "message": "SSH Password detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "source-rule-url": "https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "ssh"
        ]
      },
      "pattern-regex": "sshpass -p\\s*['|\\\\\\\"][^%]",
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-stripe-api-key",
      "languages": [
        "regex"
      ],
      "message": "Stripe API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "source-rule-url": "https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "stripe"
        ]
      },
      "pattern-regex": "sk_live_[0-9a-zA-Z]{24}",
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-stripe-restricted-api-key",
      "languages": [
        "regex"
      ],
      "message": "Stripe Restricted API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "source-rule-url": "https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "stripe"
        ]
      },
      "pattern-regex": "rk_live_[0-9a-zA-Z]{24}",
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-telegram-bot-api-key",
      "languages": [
        "regex"
      ],
      "message": "Telegram Bot API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "source-rule-url": "https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "telegram"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "[0-9]+:AA[0-9A-Za-z\\-_]{33}"
        },
        {
          "pattern-not-regex": "go\\.mod.*"
        },
        {
          "pattern-not-regex": "v[\\d]+\\.[\\d]+\\.[\\d]+.*"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-twilio-api-key",
      "languages": [
        "regex"
      ],
      "message": "Twilio API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "source-rule-url": "https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "secrets",
          "twilio"
        ]
      },
      "pattern-regex": "SK[0-9a-fA-F]{32}",
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.detected-username-and-password-in-uri",
      "languages": [
        "generic"
      ],
      "message": "Username And Password In URI detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "secrets"
        ]
      },
      "patterns": [
        {
          "pattern": "$PROTOCOL://$...USERNAME:$...PASSWORD@$END"
        },
        {
          "metavariable-regex": {
            "metavariable": "$...USERNAME",
            "regex": "\\A({?)([A-Za-z])([A-Za-z0-9_-]){5,31}(}?)\\Z"
          }
        },
        {
          "metavariable-regex": {
            "metavariable": "$...PASSWORD",
            "regex": "(?!.*[\\s])(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]){6,32}"
          }
        },
        {
          "metavariable-regex": {
            "metavariable": "$PROTOCOL",
            "regex": "(.*http.*)|(.*sql.*)|(.*ftp.*)|(.*smtp.*)"
          }
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.generic.secrets.security.google-maps-apikeyleak",
      "languages": [
        "generic"
      ],
      "message": "Google Maps Apikeyleak detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-538: Insertion of Sensitive Information into Externally-Accessible File or Directory"
        ],
        "description": "Detects potential Google Maps API keys in code",
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "owasp": [
          "A3:2017 Sensitive Data Exposure"
        ],
        "references": [
          "https://ozguralp.medium.com/unauthorized-google-maps-api-key-usage-cases-and-why-you-need-to-care-1ccb28bf21e"
        ],
        "severity": "MEDIUM",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "Google Maps"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "^(AIza[0-9A-Za-z_-]{35}(?!\\S))$"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.generic.unicode.security.contains-bidirectional-characters",
      "languages": [
        "bash",
        "c",
        "csharp",
        "go",
        "java",
        "js",
        "json",
        "kotlin",
        "lua",
        "ocaml",
        "php",
        "python",
        "ruby",
        "rust",
        "scala",
        "ts",
        "yaml"
      ],
      "message": "This code contains bidirectional (bidi) characters. While this is useful for support of right-to-left languages such as Arabic or Hebrew, it can also be used to trick language parsers into executing code in a manner that is different from how it is displayed in code editing and review tools. If this is not what you were expecting, please review this code in an editor that can reveal hidden Unicode characters.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-94: Improper Control of Generation of Code ('Code Injection')"
        ],
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://trojansource.codes/"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "unicode"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern-regex": "\u202a"
            },
            {
              "pattern-regex": "\u202b"
            },
            {
              "pattern-regex": "\u202d"
            },
            {
              "pattern-regex": "\u202e"
            },
            {
              "pattern-regex": "\u2066"
            },
            {
              "pattern-regex": "\u2067"
            },
            {
              "pattern-regex": "\u2068"
            },
            {
              "pattern-regex": "\u202c"
            },
            {
              "pattern-regex": "\u2069"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.html.security.plaintext-http-link",
      "languages": [
        "html"
      ],
      "message": "This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.",
      "metadata": {
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-319: Cleartext Transmission of Sensitive Information"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://cwe.mitre.org/data/definitions/319.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "html"
        ]
      },
      "patterns": [
        {
          "pattern": "<a href=\"$URL\">...</a>"
        },
        {
          "metavariable-regex": {
            "metavariable": "$URL",
            "regex": "^(?i)http://"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.html.security.audit.eval-detected",
      "languages": [
        "html"
      ],
      "message": "Detected the use of eval(...). This can introduce  a Cross-Site-Scripting (XSS) vulnerability if this  comes from user-provided input. Follow OWASP best  practices to ensure you handle XSS within a JavaScript context correct, and consider using safer APIs to evaluate  user-input such as JSON.parse(...). ",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection",
          "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "browser"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "<script ...>$...A</script>\n"
        },
        {
          "metavariable-pattern": {
            "language": "javascript",
            "metavariable": "$...A",
            "patterns": [
              {
                "pattern-either": [
                  {
                    "pattern": "$X(...)"
                  }
                ]
              },
              {
                "pattern-not": "$X(\"...\")"
              },
              {
                "metavariable-regex": {
                  "metavariable": "$X",
                  "regex": "^(eval)$"
                }
              },
              {
                "focus-metavariable": "$X"
              }
            ]
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.html.security.audit.insecure-document-method",
      "languages": [
        "html"
      ],
      "message": "Detected the use of an inner/outerHTML assignment.  This can introduce a Cross-Site-Scripting (XSS) vulnerability if this  comes from user-provided input. If you have to use a dangerous web API,  consider using a sanitization library such as DOMPurify to sanitize  the HTML before it is assigned.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "browser"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "<script ...>$...A</script>\n"
        },
        {
          "metavariable-pattern": {
            "language": "javascript",
            "metavariable": "$...A",
            "patterns": [
              {
                "pattern-either": [
                  {
                    "patterns": [
                      {
                        "pattern-either": [
                          {
                            "pattern": "$X. ... .innerHTML = ..."
                          },
                          {
                            "pattern": "$X. ... .outerHTML = ..."
                          }
                        ]
                      },
                      {
                        "pattern-not": "$X. ... .$V = \"...\""
                      }
                    ]
                  }
                ]
              },
              {
                "focus-metavariable": "$X"
              }
            ]
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.html.security.audit.missing-integrity",
      "languages": [
        "generic"
      ],
      "message": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you\u2019re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-353: Missing Support for Integrity Check"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "html"
        ]
      },
      "paths": {
        "include": [
          "*.html"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "<script $...A >...</script>"
            },
            {
              "pattern": "<link $...A >"
            }
          ]
        },
        {
          "metavariable-pattern": {
            "metavariable": "$...A",
            "patterns": [
              {
                "pattern-either": [
                  {
                    "pattern": "src='... :// ...'"
                  },
                  {
                    "pattern": "src=\"... :// ...\""
                  },
                  {
                    "pattern": "href='... :// ...'"
                  },
                  {
                    "pattern": "href=\"... :// ...\""
                  },
                  {
                    "pattern": "src='//...'"
                  },
                  {
                    "pattern": "src=\"//...\""
                  },
                  {
                    "pattern": "href='//...'"
                  },
                  {
                    "pattern": "href=\"//...\""
                  }
                ]
              },
              {
                "pattern-not-regex": "(?is).*integrity="
              },
              {
                "pattern-not-regex": "(google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com)"
              },
              {
                "pattern-not-regex": ".*rel\\s*=\\s*['\"]?preconnect.*"
              }
            ]
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.ajv.security.audit.ajv-allerrors-true",
      "languages": [
        "js",
        "ts"
      ],
      "message": "By setting `allErrors: true` in `Ajv` library, all error objects will be allocated without limit. This allows the attacker to produce a huge number of errors which can lead to denial of service. Do not use `allErrors: true` in production.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-400: Uncontrolled Resource Consumption"
        ],
        "cwe2022-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "references": [
          "https://ajv.js.org/options.html#allerrors"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "ajv"
        ]
      },
      "pattern-either": [
        {
          "pattern": "new Ajv({...,allErrors: true,...},...)\n"
        },
        {
          "patterns": [
            {
              "pattern": "new Ajv($SETTINGS,...)\n"
            },
            {
              "pattern-inside": "$SETTINGS = {...,allErrors: true,...}\n...\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.angular.security.detect-angular-element-taint",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Use of angular.element can lead to XSS if user-input is treated as part of the HTML element within `$SINK`. It is recommended to contextually output encode user-input, before inserting into `$SINK`. If the HTML needs to be preserved it is recommended to sanitize the input using $sce.getTrustedHTML or $sanitize.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "HIGH",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.angularjs.org/api/ng/function/angular.element",
          "https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "angularjs"
        ]
      },
      "mode": "taint",
      "pattern-sanitizers": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "$sce.getTrustedHtml(...)"
                },
                {
                  "pattern": "$sanitize(...)"
                },
                {
                  "pattern": "DOMPurify.sanitize(...)"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "angular.element(...). ... .$SINK($QUERY)\n"
                },
                {
                  "pattern-inside": "$ANGULAR = angular.element(...)\n...\n$ANGULAR. ... .$SINK($QUERY)\n"
                }
              ]
            },
            {
              "metavariable-regex": {
                "metavariable": "$SINK",
                "regex": "^(after|append|html|prepend|replaceWith|wrap)$"
              }
            },
            {
              "focus-metavariable": "$QUERY"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "window.location.search"
                },
                {
                  "pattern": "window.document.location.search"
                },
                {
                  "pattern": "document.location.search"
                },
                {
                  "pattern": "location.search"
                },
                {
                  "pattern": "$location.search(...)"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "$DECODE(<... location.hash ...>)"
                },
                {
                  "pattern": "$DECODE(<... window.location.hash ...>)"
                },
                {
                  "pattern": "$DECODE(<... document.location.hash ...>)"
                },
                {
                  "pattern": "$DECODE(<... location.href ...>)"
                },
                {
                  "pattern": "$DECODE(<... window.location.href ...>)"
                },
                {
                  "pattern": "$DECODE(<... document.location.href ...>)"
                },
                {
                  "pattern": "$DECODE(<... document.URL ...>)"
                },
                {
                  "pattern": "$DECODE(<... window.document.URL ...>)"
                },
                {
                  "pattern": "$DECODE(<... document.location.href ...>)"
                },
                {
                  "pattern": "$DECODE(<... document.location.href ...>)"
                },
                {
                  "pattern": "$DECODE(<... $location.absUrl() ...>)"
                },
                {
                  "pattern": "$DECODE(<... $location.url() ...>)"
                },
                {
                  "pattern": "$DECODE(<... $location.hash() ...>)"
                }
              ]
            },
            {
              "metavariable-regex": {
                "metavariable": "$DECODE",
                "regex": "^(unescape|decodeURI|decodeURIComponent)$"
              }
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$http.$METHOD(...).$CONTINUE(function $FUNC($RES) {...})"
            },
            {
              "metavariable-regex": {
                "metavariable": "$METHOD",
                "regex": "^(get|delete|head|jsonp|post|put|patch)"
              }
            },
            {
              "pattern": "$RES.data"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.angular.security.detect-angular-open-redirect",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Use of $window.location.href can lead to open-redirect if user input is used for redirection.",
      "metadata": {
        "asvs": {
          "control_id": "5.5.1 Insecue Redirect",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v51-input-validation",
          "section": "V5 Validation, Sanitization and Encoding",
          "version": "4"
        },
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.angularjs.org/api/ng/service/$sce#trustAsJs",
          "https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "angular"
        ]
      },
      "patterns": [
        {
          "pattern": "$window.location.href = ...\n"
        },
        {
          "pattern-not": "$window.location.href = \"...\"\n"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.javascript.angular.security.detect-angular-resource-loading",
      "languages": [
        "js",
        "ts"
      ],
      "message": "$sceDelegateProvider allowlisting can introduce security issues if wildcards are used.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.angularjs.org/api/ng/service/$sce#trustAsJs",
          "https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "angular"
        ]
      },
      "pattern-either": [
        {
          "pattern": "$sceDelegateProvider.resourceUrlWhitelist([...,'**',...]);\n"
        },
        {
          "patterns": [
            {
              "pattern": "$sceDelegateProvider.resourceUrlWhitelist([...,$DOM,...]);\n"
            },
            {
              "metavariable-regex": {
                "metavariable": "$DOM",
                "regex": "^'.*\\*\\*.+'$"
              }
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.angular.security.detect-angular-sce-disabled",
      "languages": [
        "js",
        "ts"
      ],
      "message": "$sceProvider is set to false. Disabling Strict Contextual escaping (SCE) in an AngularJS application could provide additional attack surface for XSS vulnerabilities.",
      "metadata": {
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "HIGH",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.angularjs.org/api/ng/service/$sce",
          "https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "angular"
        ]
      },
      "pattern": "$sceProvider.enabled(false);\n",
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.javascript.angular.security.detect-angular-trust-as-html-method",
      "languages": [
        "js",
        "ts"
      ],
      "message": "The use of $sce.trustAsHtml can be dangerous if unsanitized user input flows through this API.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.angularjs.org/api/ng/service/$sce#trustAsHtml",
          "https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "angular"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "$SOURCE = $scope.$INPUT;\n$sce.trustAsHtml($SOURCE);\n"
            },
            {
              "pattern": "$sce.trustAsHtml($scope.$INPUT);\n"
            }
          ]
        },
        {
          "pattern-inside": "app.controller(..., function($scope,$sce){\n...\n});\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.angular.security.detect-angular-trust-as-js-method",
      "languages": [
        "js",
        "ts"
      ],
      "message": "The use of $sce.trustAsJs can be dangerous if unsanitized user input flows through this API.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.angularjs.org/api/ng/service/$sce#trustAsJs",
          "https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "angular"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "$SOURCE = $scope.$INPUT;\n$sce.trustAsJs($SOURCE);\n"
            },
            {
              "pattern": "$sce.trustAsJs($scope.$INPUT);\n"
            }
          ]
        },
        {
          "pattern-inside": "app.controller(..., function($scope,$sce){\n...\n});\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.angular.security.detect-angular-trust-as-method",
      "languages": [
        "js",
        "ts"
      ],
      "message": "The use of $sce.trustAs can be dangerous if unsanitized user input flows through this API.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.angularjs.org/api/ng/service/$sce",
          "https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "angular"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "pattern": "$sce.trustAs(...)"
        },
        {
          "pattern": "$sce.trustAsHtml(...)"
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-inside": "app.controller(..., function($scope,$sce) {\n...\n});\n"
            },
            {
              "pattern": "$scope.$X"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.angular.security.detect-angular-trust-as-resourceurl-method",
      "languages": [
        "js",
        "ts"
      ],
      "message": "The use of $sce.trustAsResourceUrl can be dangerous if unsanitized user input flows through this API.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.angularjs.org/api/ng/service/$sce#trustAsResourceUrl",
          "https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "angular"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "$SOURCE = $scope.$INPUT;\n$sce.trustAsResourceUrl($SOURCE);\n"
            },
            {
              "pattern": "$sce.trustAsResourceUrl($scope.$INPUT);\n"
            }
          ]
        },
        {
          "pattern-inside": "app.controller(..., function($scope,$sce){\n...\n});\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.angular.security.detect-angular-trust-as-url-method",
      "languages": [
        "js",
        "ts"
      ],
      "message": "The use of $sce.trustAsUrl can be dangerous if unsanitized user input flows through this API.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.angularjs.org/api/ng/service/$sce#trustAsUrl",
          "https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "angular"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "$SOURCE = $scope.$INPUT;\n$sce.trustAsUrl($SOURCE);\n"
            },
            {
              "pattern": "$sce.trustAsUrl($scope.$INPUT);\n"
            }
          ]
        },
        {
          "pattern-inside": "app.controller(..., function($scope,$sce){\n...\n});\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.angular.security.detect-angular-element-methods",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Use of angular.element can lead to XSS if user-input is treated as part of the HTML element within `$SINK`. It is recommended to contextually output encode user-input, before inserting into `$SINK`. If the HTML needs to be preserved it is recommended to sanitize the input using $sce.getTrustedHTML or $sanitize.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.angularjs.org/api/ng/function/angular.element",
          "https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "angularjs"
        ]
      },
      "mode": "taint",
      "pattern-sanitizers": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "$sce.getTrustedHtml(...)"
                },
                {
                  "pattern": "$sanitize(...)"
                },
                {
                  "pattern": "DOMPurify.sanitize(...)"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "angular.element(...). ... .$SINK($QUERY)\n"
                },
                {
                  "pattern-inside": "$ANGULAR = angular.element(...)\n...\n$ANGULAR. ... .$SINK($QUERY)\n"
                }
              ]
            },
            {
              "metavariable-regex": {
                "metavariable": "$SINK",
                "regex": "^(after|append|html|prepend|replaceWith|wrap)$"
              }
            },
            {
              "focus-metavariable": "$QUERY"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-inside": "function(..., $SCOPE, ...) { ... }\n"
                    },
                    {
                      "focus-metavariable": "$SCOPE"
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$SCOPE",
                        "regex": "^\\$scope$"
                      }
                    }
                  ]
                },
                {
                  "pattern": "$rootScope"
                },
                {
                  "pattern": "$injector.get('$rootScope')"
                },
                {
                  "pattern": "$injector.get('$scope')"
                }
              ]
            }
          ]
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.javascript.angular.security.detect-angular-trust-as-css-method",
      "languages": [
        "js",
        "ts"
      ],
      "message": "The use of $sce.trustAsCss can be dangerous if unsanitized user input flows through this API.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.angularjs.org/api/ng/service/$sce#trustAsCss",
          "https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "angular"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "$SOURCE = $scope.$INPUT;\n$sce.trustAsCss($SOURCE);\n"
            },
            {
              "pattern": "$sce.trustAsCss($scope.$INPUT);\n"
            }
          ]
        },
        {
          "pattern-inside": "app.controller(..., function($scope,$sce){\n...\n});\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.angular.security.detect-angular-translateprovider-translations-method",
      "languages": [
        "js",
        "ts"
      ],
      "message": "The use of $translateProvider.translations method can be dangerous if user input is provided to this API.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.angularjs.org/api/ng/service/$sce#trustAsUrl",
          "https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "angular",
          "typescript"
        ]
      },
      "patterns": [
        {
          "pattern": "$translateProvider.translations(...,$SOURCE);\n"
        },
        {
          "pattern-inside": "app.controller(..., function($scope,$sce){\n...\n});\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.apollo.security.apollo-axios-ssrf",
      "languages": [
        "js",
        "ts"
      ],
      "message": "User-controllable argument $DATAVAL to $METHOD passed to Axios via internal handler $INNERFUNC. This could be a server-side request forgery. A user could call a restricted API or leak internal headers to an unauthorized party. Validate your user arguments against an allowlist of known URLs, or consider refactoring so that user-controlled data is not necessary.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-918: Server-Side Request Forgery (SSRF)"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A10:2021 - Server-Side Request Forgery (SSRF)"
        ],
        "references": [
          "https://www.cvedetails.com/cve/CVE-2020-28168/",
          "https://owasp.org/www-community/attacks/Server_Side_Request_Forgery"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "apollo",
          "axios"
        ]
      },
      "patterns": [
        {
          "pattern": "const $RESPONSE = await axios.request($INNERARG,...)"
        },
        {
          "pattern-inside": "Query: {\n  $METHOD(parent, args, context, info) {\n    ...\n    $DATA = args.$DATAVAL\n    ...\n    async function $INNERFUNC(...,$INNERARG,...){\n      ...\n    }\n    ...\n    return $INNERFUNC(...,$DATA,...)\n    }\n  }\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.argon2.security.unsafe-argon2-config",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Prefer Argon2id where possible. Per RFC9016, section 4 IETF recommends selecting Argon2id unless you can guarantee an adversary has no direct access to the computing environment.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-916: Use of Password Hash With Insufficient Computational Effort"
        ],
        "impact": "LOW",
        "likelihood": "HIGH",
        "owasp": [
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html",
          "https://eprint.iacr.org/2016/759.pdf",
          "https://www.cs.tau.ac.il/~tromer/papers/cache-joc-20090619.pdf",
          "https://datatracker.ietf.org/doc/html/rfc9106#section-4"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "argon2",
          "cryptography"
        ]
      },
      "mode": "taint",
      "pattern-sanitizers": [
        {
          "patterns": [
            {
              "pattern": "{type: $ARGON.argon2id}\n...\n"
            }
          ]
        }
      ],
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern": "$Y\n"
            },
            {
              "pattern-inside": "$ARGON.hash(...,$Y)\n"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-inside": "$ARGON = require('argon2');\n...\n"
            },
            {
              "pattern": "{type: ...}\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.audit.detect-replaceall-sanitization",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detected a call to `$FUNC()` in an attempt to HTML escape the string `$STR`. Manually sanitizing input through a manually built list can be circumvented in many situations, and it's better to use a well known sanitization library such as `sanitize-html` or `DOMPurify`.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://www.npmjs.com/package/dompurify",
          "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "javascript",
          "typescript"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "$STR.$FUNC('<', '&lt;')"
            },
            {
              "pattern": "$STR.$FUNC('>', '&gt;')"
            },
            {
              "pattern": "$STR.$FUNC('\"', '&quot;')"
            },
            {
              "pattern": "$STR.$FUNC(\"'\", '&apos;')"
            },
            {
              "pattern": "$STR.$FUNC('&', '&amp;')"
            }
          ]
        },
        {
          "metavariable-regex": {
            "metavariable": "$FUNC",
            "regex": "(replace|replaceAll)"
          }
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.javascript.aws-lambda.security.detect-child-process",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Allowing spawning arbitrary programs or running shell processes with arbitrary arguments may end up in a command injection vulnerability. Try to avoid non-literal values for the command string. If it is not possible, then do not let running arbitrary commands, use a white list for inputs.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "javascript",
          "aws-lambda"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "focus-metavariable": "$CMD"
            },
            {
              "pattern-either": [
                {
                  "pattern": "exec($CMD,...)"
                },
                {
                  "pattern": "execSync($CMD,...)"
                },
                {
                  "pattern": "spawn($CMD,...)"
                },
                {
                  "pattern": "spawnSync($CMD,...)"
                },
                {
                  "pattern": "$CP.exec($CMD,...)"
                },
                {
                  "pattern": "$CP.execSync($CMD,...)"
                },
                {
                  "pattern": "$CP.spawn($CMD,...)"
                },
                {
                  "pattern": "$CP.spawnSync($CMD,...)"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "require('child_process')\n...\n"
                },
                {
                  "pattern-inside": "import 'child_process'\n...\n"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "$EVENT"
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "exports.handler = function ($EVENT, ...) {\n  ...\n}\n"
                },
                {
                  "pattern-inside": "function $FUNC ($EVENT, ...) {...}\n...\nexports.handler = $FUNC\n"
                },
                {
                  "pattern-inside": "$FUNC = function ($EVENT, ...) {...}\n...\nexports.handler = $FUNC\n"
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.javascript.aws-lambda.security.dynamodb-request-object",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detected DynamoDB query params that are tainted by `$EVENT` object. This could lead to NoSQL injection if the variable is user-controlled and not properly sanitized. Explicitly assign query params instead of passing data from `$EVENT` directly to DynamoDB client.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-943: Improper Neutralization of Special Elements in Data Query Logic"
        ],
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "javascript",
          "aws-lambda",
          "dynamodb"
        ]
      },
      "mode": "taint",
      "pattern-sanitizers": [
        {
          "patterns": [
            {
              "pattern": "{...}\n"
            }
          ]
        }
      ],
      "pattern-sinks": [
        {
          "patterns": [
            {
              "focus-metavariable": "$SINK"
            },
            {
              "pattern": "$DC.$METHOD($SINK, ...)\n"
            },
            {
              "metavariable-regex": {
                "metavariable": "$METHOD",
                "regex": "(query|send|scan|delete|put|transactWrite|update|batchExecuteStatement|executeStatement|executeTransaction|transactWriteItems)"
              }
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "$DC = new $AWS.DocumentClient(...);\n...\n"
                },
                {
                  "pattern-inside": "$DC = new $AWS.DynamoDB(...);\n...\n"
                },
                {
                  "pattern-inside": "$DC = new DynamoDBClient(...);\n...\n"
                },
                {
                  "pattern-inside": "$DC = DynamoDBDocumentClient.from(...);\n...\n"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "$EVENT"
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "exports.handler = function ($EVENT, ...) {\n  ...\n}\n"
                },
                {
                  "pattern-inside": "function $FUNC ($EVENT, ...) {...}\n...\nexports.handler = $FUNC\n"
                },
                {
                  "pattern-inside": "$FUNC = function ($EVENT, ...) {...}\n...\nexports.handler = $FUNC\n"
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.javascript.aws-lambda.security.knex-sqli",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `knex.raw('SELECT $1 from table', [userinput])`",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://knexjs.org/#Builder-fromRaw",
          "https://knexjs.org/#Builder-whereRaw"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "aws-lambda",
          "knex"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "focus-metavariable": "$QUERY"
            },
            {
              "pattern-either": [
                {
                  "pattern": "$KNEX.fromRaw($QUERY, ...)"
                },
                {
                  "pattern": "$KNEX.whereRaw($QUERY, ...)"
                },
                {
                  "pattern": "$KNEX.raw($QUERY, ...)"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "require('knex')\n...\n"
                },
                {
                  "pattern-inside": "import 'knex'\n...\n"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "exports.handler = function ($EVENT, ...) {\n  ...\n}\n"
                },
                {
                  "pattern-inside": "function $FUNC ($EVENT, ...) {...}\n...\nexports.handler = $FUNC\n"
                },
                {
                  "pattern-inside": "$FUNC = function ($EVENT, ...) {...}\n...\nexports.handler = $FUNC\n"
                }
              ]
            },
            {
              "pattern": "$EVENT"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.aws-lambda.security.mysql-sqli",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `connection.query('SELECT $1 from table', [userinput])`",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://www.npmjs.com/package/mysql2"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "aws-lambda",
          "mysql",
          "mysql2"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "focus-metavariable": "$QUERY"
            },
            {
              "pattern-either": [
                {
                  "pattern": "$POOL.query($QUERY, ...)"
                },
                {
                  "pattern": "$POOL.execute($QUERY, ...)"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "require('mysql')\n...\n"
                },
                {
                  "pattern-inside": "require('mysql2')\n...\n"
                },
                {
                  "pattern-inside": "require('mysql2/promise')\n...\n"
                },
                {
                  "pattern-inside": "import 'mysql'\n...\n"
                },
                {
                  "pattern-inside": "import 'mysql2'\n...\n"
                },
                {
                  "pattern-inside": "import 'mysql2/promise'\n...\n"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "exports.handler = function ($EVENT, ...) {\n  ...\n}\n"
                },
                {
                  "pattern-inside": "function $FUNC ($EVENT, ...) {...}\n...\nexports.handler = $FUNC\n"
                },
                {
                  "pattern-inside": "$FUNC = function ($EVENT, ...) {...}\n...\nexports.handler = $FUNC\n"
                }
              ]
            },
            {
              "pattern": "$EVENT"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.aws-lambda.security.pg-sqli",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `connection.query('SELECT $1 from table', [userinput])`",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://node-postgres.com/features/queries"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "aws-lambda",
          "postgres",
          "pg"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "focus-metavariable": "$QUERY"
            },
            {
              "pattern-either": [
                {
                  "pattern": "$DB.query($QUERY, ...)"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "require('pg')\n...\n"
                },
                {
                  "pattern-inside": "import 'pg'\n...\n"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "exports.handler = function ($EVENT, ...) {\n  ...\n}\n"
                },
                {
                  "pattern-inside": "function $FUNC ($EVENT, ...) {...}\n...\nexports.handler = $FUNC\n"
                },
                {
                  "pattern-inside": "$FUNC = function ($EVENT, ...) {...}\n...\nexports.handler = $FUNC\n"
                }
              ]
            },
            {
              "pattern": "$EVENT"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.aws-lambda.security.sequelize-sqli",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `sequelize.query('SELECT * FROM projects WHERE status = ?', { replacements: ['active'], type: QueryTypes.SELECT });`",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://sequelize.org/master/manual/raw-queries.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "aws-lambda",
          "sequelize"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "focus-metavariable": "$QUERY"
            },
            {
              "pattern-either": [
                {
                  "pattern": "$DB.query($QUERY, ...)"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "require('sequelize')\n...\n"
                },
                {
                  "pattern-inside": "import 'sequelize'\n...\n"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "exports.handler = function ($EVENT, ...) {\n  ...\n}\n"
                },
                {
                  "pattern-inside": "function $FUNC ($EVENT, ...) {...}\n...\nexports.handler = $FUNC\n"
                },
                {
                  "pattern-inside": "$FUNC = function ($EVENT, ...) {...}\n...\nexports.handler = $FUNC\n"
                }
              ]
            },
            {
              "pattern": "$EVENT"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.aws-lambda.security.tainted-eval",
      "languages": [
        "js",
        "ts"
      ],
      "message": "The `eval()` function evaluates JavaScript code represented as a string. Executing JavaScript from a string is an enormous security risk. It is far too easy for a bad actor to run arbitrary code when you use `eval()`. Ensure evaluated content is not definable by external sources.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
        ],
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "javascript",
          "aws-lambda"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "focus-metavariable": "$CODE"
            },
            {
              "pattern-either": [
                {
                  "pattern": "eval($CODE)"
                },
                {
                  "pattern": "Function(...,$CODE)"
                },
                {
                  "pattern": "new Function(...,$CODE)"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "$EVENT"
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "exports.handler = function ($EVENT, ...) {\n  ...\n}\n"
                },
                {
                  "pattern-inside": "function $FUNC ($EVENT, ...) {...}\n...\nexports.handler = $FUNC\n"
                },
                {
                  "pattern-inside": "$FUNC = function ($EVENT, ...) {...}\n...\nexports.handler = $FUNC\n"
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.aws-lambda.security.tainted-html-response",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detected user input flowing into an HTML response. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "aws-lambda"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "focus-metavariable": "$BODY"
            },
            {
              "pattern-inside": "{..., headers: {..., 'Content-Type': 'text/html', ...}, body: $BODY, ... }\n"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "exports.handler = function ($EVENT, ...) {\n  ...\n}\n"
                },
                {
                  "pattern-inside": "function $FUNC ($EVENT, ...) {...}\n...\nexports.handler = $FUNC\n"
                },
                {
                  "pattern-inside": "$FUNC = function ($EVENT, ...) {...}\n...\nexports.handler = $FUNC\n"
                }
              ]
            },
            {
              "pattern": "$EVENT"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.aws-lambda.security.tainted-html-string",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates which will safely render HTML instead.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "aws-lambda"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "\"$HTMLSTR\" + $EXPR\n"
                        },
                        {
                          "pattern": "\"$HTMLSTR\".concat(...)\n"
                        },
                        {
                          "pattern": "$UTIL.format($HTMLSTR, ...)"
                        },
                        {
                          "pattern": "format($HTMLSTR, ...)"
                        }
                      ]
                    },
                    {
                      "metavariable-pattern": {
                        "language": "generic",
                        "metavariable": "$HTMLSTR",
                        "pattern": "<$TAG ..."
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern": "`...${...}...`\n"
                    },
                    {
                      "pattern-regex": ".*<\\w+.*\n"
                    }
                  ]
                }
              ]
            },
            {
              "pattern-not-inside": "console.$LOG(...)\n"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "exports.handler = function ($EVENT, ...) {\n  ...\n}\n"
                },
                {
                  "pattern-inside": "function $FUNC ($EVENT, ...) {...}\n...\nexports.handler = $FUNC\n"
                },
                {
                  "pattern-inside": "$FUNC = function ($EVENT, ...) {...}\n...\nexports.handler = $FUNC\n"
                }
              ]
            },
            {
              "pattern": "$EVENT"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.aws-lambda.security.tainted-sql-string",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/SQL_Injection"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "aws-lambda"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "\"$SQLSTR\" + $EXPR\n"
                        },
                        {
                          "pattern": "\"$SQLSTR\".concat(...)\n"
                        },
                        {
                          "pattern": "util.format($SQLSTR, ...)"
                        }
                      ]
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$SQLSTR",
                        "regex": ".*\\b(?i)(select|delete|insert|create|update|alter|drop)\\b.*"
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern": "`...${...}...`\n"
                    },
                    {
                      "pattern-regex": ".*\\b(?i)(select|delete|insert|create|update|alter|drop)\\b.*\n"
                    }
                  ]
                }
              ]
            },
            {
              "pattern-not-inside": "console.$LOG(...)\n"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "exports.handler = function ($EVENT, ...) {\n  ...\n}\n"
                },
                {
                  "pattern-inside": "function $FUNC ($EVENT, ...) {...}\n...\nexports.handler = $FUNC\n"
                },
                {
                  "pattern-inside": "$FUNC = function ($EVENT, ...) {...}\n...\nexports.handler = $FUNC\n"
                }
              ]
            },
            {
              "pattern": "$EVENT"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.javascript.aws-lambda.security.vm-runincontext-injection",
      "languages": [
        "js",
        "ts"
      ],
      "message": "The `vm` module enables compiling and running code within V8 Virtual Machine contexts. The `vm` module is not a security mechanism. Do not use it to run untrusted code. If code passed to `vm` functions is controlled by user input it could result in command injection. Do not let user input in `vm` functions.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-94: Improper Control of Generation of Code ('Code Injection')"
        ],
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "javascript",
          "aws-lambda"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "require('vm');\n...\n"
                },
                {
                  "pattern-inside": "import 'vm'\n...\n"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$VM.runInContext($X,...)"
                },
                {
                  "pattern": "$VM.runInNewContext($X,...)"
                },
                {
                  "pattern": "$VM.runInThisContext($X,...)"
                },
                {
                  "pattern": "$VM.compileFunction($X,...)"
                },
                {
                  "pattern": "new $VM.Script($X,...)"
                },
                {
                  "pattern": "new $VM.SourceTextModule($X,...)"
                },
                {
                  "pattern": "runInContext($X,...)"
                },
                {
                  "pattern": "runInNewContext($X,...)"
                },
                {
                  "pattern": "runInThisContext($X,...)"
                },
                {
                  "pattern": "compileFunction($X,...)"
                },
                {
                  "pattern": "new Script($X,...)"
                },
                {
                  "pattern": "new SourceTextModule($X,...)"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "$EVENT"
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "exports.handler = function ($EVENT, ...) {\n  ...\n}\n"
                },
                {
                  "pattern-inside": "function $FUNC ($EVENT, ...) {...}\n...\nexports.handler = $FUNC\n"
                },
                {
                  "pattern-inside": "$FUNC = function ($EVENT, ...) {...}\n...\nexports.handler = $FUNC\n"
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.javascript.bluebird.security.audit.tofastproperties-code-execution",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Potential arbitrary code execution, whatever is provided to `toFastProperties` is sent straight to eval()",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-94: Improper Control of Generation of Code ('Code Injection')"
        ],
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "http://bluebirdjs.com/docs/getting-started.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "bluebird"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "$UTIL.toFastProperties($SINK,...)"
                },
                {
                  "pattern": "toFastProperties($SINK,...)"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "$BB = require('bluebird');\n...\n"
                },
                {
                  "pattern-inside": "import 'bluebird';\n...\n"
                }
              ]
            },
            {
              "focus-metavariable": "$SINK"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-inside": "function ... (..., $ARG,...) {...}"
            },
            {
              "focus-metavariable": "$ARG"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.browser.security.dom-based-xss",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detected possible DOM-based XSS. This occurs because a portion of the URL is being used to construct an element added directly to the page. For example, a malicious actor could send someone a link like this: http://www.some.site/page.html?default=<script>alert(document.cookie)</script> which would add the script to the page. Consider allowlisting appropriate values or using an approach which does not involve the URL.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/DOM_Based_XSS"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "browser"
        ]
      },
      "pattern-either": [
        {
          "pattern": "document.write(<... document.location.$W ...>)"
        },
        {
          "pattern": "document.write(<... location.$W ...>)"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.javascript.browser.security.eval-detected",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.",
      "metadata": {
        "asvs": {
          "control_id": "5.2.4 Dynamic Code Execution Features",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing",
          "section": "V5 Validation, Sanitization and Encoding",
          "version": "4"
        },
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "browser"
        ]
      },
      "patterns": [
        {
          "pattern-not": "eval(\"...\")"
        },
        {
          "pattern": "eval(...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.browser.security.insufficient-postmessage-origin-validation",
      "languages": [
        "js",
        "ts"
      ],
      "message": "No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-345: Insufficient Verification of Data Authenticity"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "browser"
        ]
      },
      "pattern-either": [
        {
          "patterns": [
            {
              "pattern": "window.addEventListener('message', $FUNC, ...)\n"
            },
            {
              "metavariable-pattern": {
                "metavariable": "$FUNC",
                "patterns": [
                  {
                    "pattern": "function($OBJ) { ... }\n"
                  },
                  {
                    "pattern-not": "function($OBJ) { ... if (<... $OBJ.origin ...>) { ... } ... }\n"
                  }
                ]
              }
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "function $FNAME($OBJ) { $CONTEXT }\n...\n"
                },
                {
                  "pattern-inside": "$FNAME = (...) => { $CONTEXT }\n...\n"
                }
              ]
            },
            {
              "pattern": "window.addEventListener('message', $FNAME,...)\n"
            },
            {
              "metavariable-pattern": {
                "metavariable": "$CONTEXT",
                "patterns": [
                  {
                    "pattern-not": "... if (<... $OBJ.origin ...>) { ... } ...\n"
                  }
                ]
              }
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.browser.security.js-open-redirect",
      "languages": [
        "js",
        "ts"
      ],
      "message": "The application accepts potentially user-controlled input `$PROP` which can control the location of the current window context. This can lead two types of vulnerabilities open-redirection and Cross-Site-Scripting (XSS) with JavaScript URIs. It is recommended to validate user-controllable input before allowing it to control the redirection.",
      "metadata": {
        "asvs": {
          "control_id": "5.5.1 Insecue Redirect",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v51-input-validation",
          "section": "V5 Validation, Sanitization and Encoding",
          "version": "4"
        },
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')"
        ],
        "impact": "MEDIUM",
        "interfile": true,
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "browser"
        ]
      },
      "mode": "taint",
      "options": {
        "interfile": true
      },
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "location.href = $SINK"
                },
                {
                  "pattern": "$THIS. ... .location.href = $SINK"
                },
                {
                  "pattern": "location.replace($SINK)"
                },
                {
                  "pattern": "$THIS. ... .location.replace($SINK)"
                },
                {
                  "pattern": "location = $SINK"
                },
                {
                  "pattern": "$WINDOW. ... .location = $SINK"
                }
              ]
            },
            {
              "focus-metavariable": "$SINK"
            },
            {
              "metavariable-pattern": {
                "metavariable": "$SINK",
                "patterns": [
                  {
                    "pattern-not": "\"...\" + $VALUE\n"
                  },
                  {
                    "pattern-not": "`...${$VALUE}`\n"
                  }
                ]
              }
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "$PROP = new URLSearchParams($WINDOW. ... .location.search).get('...')\n...\n"
                },
                {
                  "pattern-inside": "$PROP = new URLSearchParams(location.search).get('...')\n...\n"
                },
                {
                  "pattern-inside": "$PROP = new URLSearchParams($WINDOW. ... .location.hash.substring(1)).get('...')\n...\n"
                },
                {
                  "pattern-inside": "$PROP = new URLSearchParams(location.hash.substring(1)).get('...')\n...\n"
                }
              ]
            },
            {
              "pattern": "$PROP"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "$PROPS = new URLSearchParams($WINDOW. ... .location.search)\n...\n"
                },
                {
                  "pattern-inside": "$PROPS = new URLSearchParams(location.search)\n...\n"
                },
                {
                  "pattern-inside": "$PROPS = new URLSearchParams($WINDOW. ... .location.hash.substring(1))\n...\n"
                },
                {
                  "pattern-inside": "$PROPS = new URLSearchParams(location.hash.substring(1))\n...\n"
                }
              ]
            },
            {
              "pattern": "$PROPS.get('...')"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "$PROPS = new URL($WINDOW. ... .location.href)\n...\n"
                },
                {
                  "pattern-inside": "$PROPS = new URL(location.href)\n...\n"
                }
              ]
            },
            {
              "pattern": "$PROPS.searchParams.get('...')"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "$PROPS = new URL($WINDOW. ... .location.href).searchParams.get('...')\n...\n"
                },
                {
                  "pattern-inside": "$PROPS = new URL(location.href).searchParams.get('...')\n...\n"
                }
              ]
            },
            {
              "pattern": "$PROPS"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.browser.security.raw-html-concat",
      "languages": [
        "js",
        "ts"
      ],
      "message": "User controlled data in a HTML string may result in XSS",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/xss/"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "browser"
        ]
      },
      "mode": "taint",
      "pattern-sanitizers": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "import $S from \"underscore.string\"\n...\n"
                },
                {
                  "pattern-inside": "import * as $S from \"underscore.string\"\n...\n"
                },
                {
                  "pattern-inside": "import $S from \"underscore.string\"\n...\n"
                },
                {
                  "pattern-inside": "$S = require(\"underscore.string\")\n...\n"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$S.escapeHTML(...)"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "import $S from \"dompurify\"\n...\n"
                },
                {
                  "pattern-inside": "import { ..., $S,... } from \"dompurify\"\n...\n"
                },
                {
                  "pattern-inside": "import * as $S from \"dompurify\"\n...\n"
                },
                {
                  "pattern-inside": "$S = require(\"dompurify\")\n...\n"
                },
                {
                  "pattern-inside": "import $S from \"isomorphic-dompurify\"\n...\n"
                },
                {
                  "pattern-inside": "import * as $S from \"isomorphic-dompurify\"\n...\n"
                },
                {
                  "pattern-inside": "$S = require(\"isomorphic-dompurify\")\n...\n"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-inside": "$VALUE = $S(...)\n...\n"
                    },
                    {
                      "pattern": "$VALUE.sanitize(...)"
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "$VALUE = $S.sanitize\n...\n"
                    },
                    {
                      "pattern": "$S(...)"
                    }
                  ]
                },
                {
                  "pattern": "$S.sanitize(...)"
                },
                {
                  "pattern": "$S(...)"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "import $S from 'xss';\n...\n"
                },
                {
                  "pattern-inside": "import * as $S from 'xss';\n...\n"
                },
                {
                  "pattern-inside": "$S = require(\"xss\")\n...\n"
                }
              ]
            },
            {
              "pattern": "$S(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "import $S from 'sanitize-html';\n...\n"
                },
                {
                  "pattern-inside": "import * as $S from \"sanitize-html\";\n...\n"
                },
                {
                  "pattern-inside": "$S = require(\"sanitize-html\")\n...\n"
                }
              ]
            },
            {
              "pattern": "$S(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "$S = new Remarkable()\n...\n"
                }
              ]
            },
            {
              "pattern": "$S.render(...)"
            }
          ]
        }
      ],
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern": "$STRING + $EXPR"
                    },
                    {
                      "pattern-not": "$STRING + \"...\""
                    },
                    {
                      "metavariable-pattern": {
                        "language": "generic",
                        "metavariable": "$STRING",
                        "patterns": [
                          {
                            "pattern": "<$TAG ..."
                          },
                          {
                            "pattern-not": "<$TAG ...>...</$TAG>..."
                          }
                        ]
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern": "$EXPR + $STRING"
                    },
                    {
                      "pattern-not": "\"...\" + $STRING"
                    },
                    {
                      "metavariable-pattern": {
                        "language": "generic",
                        "metavariable": "$STRING",
                        "patterns": [
                          {
                            "pattern": "... </$TAG"
                          }
                        ]
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern": "[..., $STRING, ...].join(...)"
                    },
                    {
                      "metavariable-pattern": {
                        "language": "generic",
                        "metavariable": "$STRING",
                        "patterns": [
                          {
                            "pattern": "<$TAG ..."
                          }
                        ]
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern": "[..., $STRING, ...].join(...)"
                    },
                    {
                      "metavariable-pattern": {
                        "language": "generic",
                        "metavariable": "$STRING",
                        "patterns": [
                          {
                            "pattern": "... </$TAG"
                          }
                        ]
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern": "$VAR += $STRING"
                    },
                    {
                      "metavariable-pattern": {
                        "language": "generic",
                        "metavariable": "$STRING",
                        "patterns": [
                          {
                            "pattern": "<$TAG ..."
                          }
                        ]
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern": "$VAR += $STRING"
                    },
                    {
                      "metavariable-pattern": {
                        "language": "generic",
                        "metavariable": "$STRING",
                        "patterns": [
                          {
                            "pattern": "... </$TAG"
                          }
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "location.href"
                },
                {
                  "pattern": "location.hash"
                },
                {
                  "pattern": "location.search"
                },
                {
                  "pattern": "$WINDOW. ... .location.href"
                },
                {
                  "pattern": "$WINDOW. ... .location.hash"
                },
                {
                  "pattern": "$WINDOW. ... .location.search"
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.browser.security.raw-html-join",
      "languages": [
        "js",
        "ts"
      ],
      "message": "User controlled data in a HTML string may result in XSS",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/xss/"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "browser"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern": "[..., $STRING, ...].join(...)\n"
                },
                {
                  "metavariable-pattern": {
                    "language": "generic",
                    "metavariable": "$STRING",
                    "patterns": [
                      {
                        "pattern-either": [
                          {
                            "pattern": "... </$TAG\n"
                          },
                          {
                            "pattern": "<$TAG ...\n"
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "pattern-not": "[..., \"$HARDCODED\", ...].join(\"...\")\n"
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.browser.security.wildcard-postmessage-configuration",
      "languages": [
        "js",
        "ts"
      ],
      "message": "The target origin of the window.postMessage() API is set to \"*\". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-345: Insufficient Verification of Data Authenticity"
        ],
        "impact": "MEDIUM",
        "likelihood": "HIGH",
        "owasp": [
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "browser"
        ]
      },
      "pattern": "$OBJECT.postMessage(...,'*')",
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.browser.security.js-open-redirect-from-function",
      "languages": [
        "js",
        "ts"
      ],
      "message": "The application accepts potentially user-controlled input `$PROP` which can control the location of the current window context. This can lead two types of vulnerabilities open-redirection and Cross-Site-Scripting (XSS) with JavaScript URIs. It is recommended to validate user-controllable input before allowing it to control the redirection.",
      "metadata": {
        "asvs": {
          "control_id": "5.5.1 Insecue Redirect",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v51-input-validation",
          "section": "V5 Validation, Sanitization and Encoding",
          "version": "4"
        },
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "browser"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "location.href = $SINK"
                },
                {
                  "pattern": "window.location.href = $SINK"
                },
                {
                  "pattern": "this.window.location.href = $SINK"
                },
                {
                  "pattern": "this.location.href = $SINK"
                },
                {
                  "pattern": "location.replace($SINK)"
                },
                {
                  "pattern": "window.location.replace($SINK)"
                },
                {
                  "pattern": "this.window.location.replace($SINK)"
                },
                {
                  "pattern": "this.location.replace($SINK)"
                }
              ]
            },
            {
              "focus-metavariable": "$SINK"
            },
            {
              "metavariable-pattern": {
                "metavariable": "$SINK",
                "patterns": [
                  {
                    "pattern-not": "\"...\" + $VALUE\n"
                  },
                  {
                    "pattern-not": "`...${$VALUE}`\n"
                  }
                ]
              }
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-inside": "function ... (..., $PROP, ...) { ... }\n"
            },
            {
              "focus-metavariable": "$PROP"
            }
          ]
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.javascript.browser.security.insecure-document-method",
      "languages": [
        "js",
        "ts"
      ],
      "message": "XSS Vulnerability: Unsafe DOM Manipulation. User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities. Replace with safe DOM methods: Use createElement() + appendChild() + textContent for dynamic content.  Avoid use innerHTML with user data: Even escaped data can be risky.  If HTML injection is absolutely necessary: Sanitize with DOMPurify library first.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "browser"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "$EL.innerHTML = $HTML;\n"
            },
            {
              "pattern": "$EL.outerHTML = $HTML;\n"
            },
            {
              "pattern": "document.write(...)"
            }
          ]
        },
        {
          "pattern-not": "$EL.innerHTML = \"...\";\n"
        },
        {
          "pattern-not": "$EL.outerHTML = \"...\";\n"
        },
        {
          "pattern-not": "document.write(\"...\")"
        },
        {
          "pattern-not": "$EL.innerHTML = DOMPurify.sanitize(...);\n"
        },
        {
          "pattern-not": "$EL.outerHTML = DOMPurify.sanitize(...);\n"
        },
        {
          "pattern-not": "$EL.innerHTML = $OBJ.sanitize(...);\n"
        },
        {
          "pattern-not": "$EL.outerHTML = $OBJ.sanitize(...);\n"
        },
        {
          "pattern-not": "$EL.innerHTML = $OBJ.sanitizeHtml(...);\n"
        },
        {
          "pattern-not": "$EL.outerHTML = $OBJ.sanitizeHtml(...);\n"
        },
        {
          "pattern-not": "$EL.innerHTML = sanitize(...);\n"
        },
        {
          "pattern-not": "$EL.outerHTML = sanitize(...);\n"
        },
        {
          "pattern-not": "$EL.innerHTML = sanitizeHtml(...);\n"
        },
        {
          "pattern-not": "$EL.outerHTML = sanitizeHtml(...);\n"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.javascript.chrome-remote-interface.security.audit.chrome-remote-interface-compilescript-injection",
      "languages": [
        "js",
        "ts"
      ],
      "message": "If unverified user data can reach the `compileScript` method it can result in Server-Side Request Forgery vulnerabilities",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-918: Server-Side Request Forgery (SSRF)"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A10:2021 - Server-Side Request Forgery (SSRF)"
        ],
        "references": [
          "https://github.com/cyrus-and/chrome-remote-interface"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "chrome-remote-interface"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "require('chrome-remote-interface');\n...\n"
                },
                {
                  "pattern-inside": "import 'chrome-remote-interface';\n...\n"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$RUNTIME.compileScript({expression: $SINK},...)\n"
                },
                {
                  "pattern": "$RUNTIME.evaluate({expression: $SINK},...)\n"
                },
                {
                  "pattern": "$PAGE.navigate({url: $SINK},...)\n"
                },
                {
                  "pattern": "$RUNTIME.printToPDF({headerTemplate: $SINK},...)\n"
                },
                {
                  "pattern": "$RUNTIME.printToPDF({footerTemplate: $SINK},...)\n"
                },
                {
                  "pattern": "$PAGE.setDocumentContent({html: $SINK},...)\n"
                }
              ]
            },
            {
              "focus-metavariable": "$SINK"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-inside": "function ... (..., $ARG,...) {...}"
            },
            {
              "focus-metavariable": "$ARG"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.deno.security.audit.deno-dangerous-run",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detected non-literal calls to Deno.run(). This could lead to a command injection vulnerability.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://deno.land/manual/examples/subprocess#simple-example"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "deno"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "Deno.run({cmd: [$INPUT,...]},...)\n"
                },
                {
                  "pattern": "Deno.run({cmd: [\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$INPUT,...]},...)\n"
                },
                {
                  "patterns": [
                    {
                      "pattern": "Deno.run({cmd: [$CMD,\"-c\",$INPUT,...]},...)\n"
                    },
                    {
                      "pattern-inside": "$CMD = \"=~/(sh|bash|ksh|csh|tcsh|zsh)/\"\n...\n"
                    }
                  ]
                }
              ]
            },
            {
              "focus-metavariable": "$INPUT"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-inside": "function ... (..., $ARG,...) {...}"
            },
            {
              "focus-metavariable": "$ARG"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.javascript.express.security.cors-misconfiguration",
      "languages": [
        "js",
        "ts"
      ],
      "message": "By letting user input control CORS parameters, there is a risk that software does not properly verify that the source of data or communication is valid. Use literal values for CORS settings.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-346: Origin Validation Error"
        ],
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "express"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "$RES.set($HEADER, $X)"
                },
                {
                  "pattern": "$RES.header($HEADER, $X)"
                },
                {
                  "pattern": "$RES.setHeader($HEADER, $X)"
                },
                {
                  "pattern": "$RES.set({$HEADER: $X}, ...)\n"
                },
                {
                  "pattern": "$RES.writeHead($STATUS, {$HEADER: $X}, ...)\n"
                }
              ]
            },
            {
              "focus-metavariable": "$X"
            },
            {
              "metavariable-regex": {
                "metavariable": "$HEADER",
                "regex": ".*(Access-Control-Allow-Origin|access-control-allow-origin).*"
              }
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "function ... ($REQ, $RES) {...}"
                },
                {
                  "pattern-inside": "function ... ($REQ, $RES, $NEXT) {...}"
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES) {...})"
                        },
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})"
                        }
                      ]
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "^(get|post|put|head|delete|options)$"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$REQ.query"
                },
                {
                  "pattern": "$REQ.body"
                },
                {
                  "pattern": "$REQ.params"
                },
                {
                  "pattern": "$REQ.cookies"
                },
                {
                  "pattern": "$REQ.headers"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>\n{...}\n"
                },
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response) => {...}\n"
                }
              ]
            },
            {
              "focus-metavariable": "$REQ"
            },
            {
              "pattern-either": [
                {
                  "pattern": "params"
                },
                {
                  "pattern": "query"
                },
                {
                  "pattern": "cookies"
                },
                {
                  "pattern": "headers"
                },
                {
                  "pattern": "body"
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.express.security.express-data-exfiltration",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Depending on the context, user control data in `Object.assign` can cause web response to include data that it should not have or can lead to a mass assignment vulnerability.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://en.wikipedia.org/wiki/Mass_assignment_vulnerability",
          "https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "express"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "pattern": "Object.assign(...)"
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "function ... ($REQ, $RES) {...}"
                },
                {
                  "pattern-inside": "function ... ($REQ, $RES, $NEXT) {...}"
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES) {...})"
                        },
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})"
                        }
                      ]
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "^(get|post|put|head|delete|options)$"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$REQ.query"
                },
                {
                  "pattern": "$REQ.body"
                },
                {
                  "pattern": "$REQ.params"
                },
                {
                  "pattern": "$REQ.cookies"
                },
                {
                  "pattern": "$REQ.headers"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>\n{...}\n"
                },
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response) => {...}\n"
                }
              ]
            },
            {
              "focus-metavariable": "$REQ"
            },
            {
              "pattern-either": [
                {
                  "pattern": "params"
                },
                {
                  "pattern": "query"
                },
                {
                  "pattern": "cookies"
                },
                {
                  "pattern": "headers"
                },
                {
                  "pattern": "body"
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.express.security.express-expat-xxe",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities.",
      "metadata": {
        "asvs": {
          "control_id": "5.5.2 Insecue XML Deserialization",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention",
          "section": "V5 Validation, Sanitization and Encoding",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-611: Improper Restriction of XML External Entity Reference"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "interfile": true,
        "likelihood": "MEDIUM",
        "owasp": [
          "A04:2017 - XML External Entities (XXE)",
          "A05:2021 - Security Misconfiguration"
        ],
        "references": [
          "https://github.com/astro/node-expat"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "express"
        ]
      },
      "mode": "taint",
      "options": {
        "interfile": true
      },
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "$XML = require('node-expat')\n...\n"
                },
                {
                  "pattern-inside": "import $XML from 'node-expat'\n...\n"
                },
                {
                  "pattern-inside": "import * as $XML from 'node-expat'\n...\n"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "$PARSER = new $XML.Parser(...);\n...\n"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$PARSER.parse($QUERY)"
                },
                {
                  "pattern": "$PARSER.write($QUERY)"
                }
              ]
            },
            {
              "focus-metavariable": "$QUERY"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "function ... ($REQ, $RES) {...}"
                },
                {
                  "pattern-inside": "function ... ($REQ, $RES, $NEXT) {...}"
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES) {...})"
                        },
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})"
                        }
                      ]
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "^(get|post|put|head|delete|options)$"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$REQ.query"
                },
                {
                  "pattern": "$REQ.body"
                },
                {
                  "pattern": "$REQ.params"
                },
                {
                  "pattern": "$REQ.cookies"
                },
                {
                  "pattern": "$REQ.headers"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>\n{...}\n"
                },
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response) => {...}\n"
                }
              ]
            },
            {
              "focus-metavariable": "$REQ"
            },
            {
              "pattern-either": [
                {
                  "pattern": "params"
                },
                {
                  "pattern": "query"
                },
                {
                  "pattern": "cookies"
                },
                {
                  "pattern": "headers"
                },
                {
                  "pattern": "body"
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.javascript.express.security.express-insecure-template-usage",
      "languages": [
        "js",
        "ts"
      ],
      "message": "User data from `$REQ` is being compiled into the template, which can lead to a Server Side Template Injection (SSTI) vulnerability.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-1336: Improper Neutralization of Special Elements Used in a Template Engine"
        ],
        "impact": "MEDIUM",
        "interfile": true,
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2021 - Injection",
          "A01:2017 - Injection"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html"
        ],
        "source_rule_url": [
          "https://github.com/github/codeql/blob/2ba2642c7ab29b9eedef33bcc2b8cd1d203d0c10/javascript/ql/test/query-tests/Security/CWE-094/CodeInjection/template-sinks.js"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "javascript",
          "typescript",
          "express",
          "pug",
          "jade",
          "dot",
          "ejs",
          "nunjucks",
          "lodash",
          "handlbars",
          "mustache",
          "hogan.js",
          "eta",
          "squirrelly"
        ]
      },
      "mode": "taint",
      "options": {
        "interfile": true
      },
      "pattern-propagators": [
        {
          "from": "$E",
          "pattern": "$MODEL.$FIND($E).then((...,$S,...)=>{...})",
          "to": "$S"
        }
      ],
      "pattern-sinks": [
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern-either": [
                    {
                      "pattern-inside": "$PUG = require('pug')\n...\n"
                    },
                    {
                      "pattern-inside": "import * as $PUG from 'pug'\n...\n"
                    },
                    {
                      "pattern-inside": "$PUG = require('jade')\n...\n"
                    },
                    {
                      "pattern-inside": "import * as $PUG from 'jade'\n...\n"
                    }
                  ]
                },
                {
                  "pattern-either": [
                    {
                      "pattern": "$PUG.compile(...)"
                    },
                    {
                      "pattern": "$PUG.compileClient(...)"
                    },
                    {
                      "pattern": "$PUG.compileClientWithDependenciesTracked(...)"
                    },
                    {
                      "pattern": "$PUG.render(...)"
                    }
                  ]
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern-either": [
                    {
                      "pattern-inside": "$PUG = require('dot')\n...\n"
                    },
                    {
                      "pattern-inside": "import * as $PUG from 'dot'\n...\n"
                    }
                  ]
                },
                {
                  "pattern-either": [
                    {
                      "pattern": "$PUG.template(...)"
                    },
                    {
                      "pattern": "$PUG.compile(...)"
                    }
                  ]
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern-either": [
                    {
                      "pattern-inside": "$PUG = require('ejs')\n...\n"
                    },
                    {
                      "pattern-inside": "import * as $PUG from 'ejs'\n...\n"
                    }
                  ]
                },
                {
                  "pattern-either": [
                    {
                      "pattern": "$PUG.render(...)"
                    }
                  ]
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern-either": [
                    {
                      "pattern-inside": "$PUG = require('nunjucks')\n...\n"
                    },
                    {
                      "pattern-inside": "import * as $PUG from 'nunjucks'\n...\n"
                    }
                  ]
                },
                {
                  "pattern-either": [
                    {
                      "pattern": "$PUG.renderString(...)"
                    }
                  ]
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern-either": [
                    {
                      "pattern-inside": "$PUG = require('lodash')\n...\n"
                    },
                    {
                      "pattern-inside": "import * as $PUG from 'lodash'\n...\n"
                    }
                  ]
                },
                {
                  "pattern-either": [
                    {
                      "pattern": "$PUG.template(...)"
                    }
                  ]
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern-either": [
                    {
                      "pattern-inside": "$PUG = require('mustache')\n...\n"
                    },
                    {
                      "pattern-inside": "import * as $PUG from 'mustache'\n...\n"
                    },
                    {
                      "pattern-inside": "$PUG = require('eta')\n...\n"
                    },
                    {
                      "pattern-inside": "import * as $PUG from 'eta'\n...\n"
                    },
                    {
                      "pattern-inside": "$PUG = require('squirrelly')\n...\n"
                    },
                    {
                      "pattern-inside": "import * as $PUG from 'squirrelly'\n...\n"
                    }
                  ]
                },
                {
                  "pattern-either": [
                    {
                      "pattern": "$PUG.render(...)"
                    }
                  ]
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern-either": [
                    {
                      "pattern-inside": "$PUG = require('hogan.js')\n...\n"
                    },
                    {
                      "pattern-inside": "import * as $PUG from 'hogan.js'\n...\n"
                    },
                    {
                      "pattern-inside": "$PUG = require('handlebars')\n...\n"
                    },
                    {
                      "pattern-inside": "import * as $PUG from 'handlebars'\n...\n"
                    }
                  ]
                },
                {
                  "pattern-either": [
                    {
                      "pattern": "$PUG.compile(...)"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "function ... ($REQ, $RES) {...}"
                },
                {
                  "pattern-inside": "function ... ($REQ, $RES, $NEXT) {...}"
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES) {...})"
                        },
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})"
                        }
                      ]
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "^(get|post|put|head|delete|options)$"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$REQ.query"
                },
                {
                  "pattern": "$REQ.body"
                },
                {
                  "pattern": "$REQ.params"
                },
                {
                  "pattern": "$REQ.cookies"
                },
                {
                  "pattern": "$REQ.headers"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>\n{...}\n"
                },
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response) => {...}\n"
                }
              ]
            },
            {
              "focus-metavariable": "$REQ"
            },
            {
              "pattern-either": [
                {
                  "pattern": "params"
                },
                {
                  "pattern": "query"
                },
                {
                  "pattern": "cookies"
                },
                {
                  "pattern": "headers"
                },
                {
                  "pattern": "body"
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.express.security.express-jwt-hardcoded-secret",
      "languages": [
        "js",
        "ts"
      ],
      "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",
      "metadata": {
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "interfile": true,
        "likelihood": "HIGH",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "express",
          "secrets"
        ]
      },
      "options": {
        "interfile": true
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern-inside": "$JWT = require('express-jwt');\n...\n"
            },
            {
              "pattern-inside": "import $JWT from 'express-jwt';\n...\n"
            },
            {
              "pattern-inside": "import * as $JWT from 'express-jwt';\n...\n"
            },
            {
              "pattern-inside": "import { ..., $JWT, ... } from 'express-jwt';\n...\n"
            }
          ]
        },
        {
          "pattern-either": [
            {
              "pattern": "$JWT({...,secret: \"$Y\",...},...)\n"
            },
            {
              "pattern": "$OPTS = \"$Y\";\n...\n$JWT({...,secret: $OPTS},...);\n"
            }
          ]
        },
        {
          "focus-metavariable": "$Y"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.express.security.express-phantom-injection",
      "languages": [
        "js",
        "ts"
      ],
      "message": "If unverified user data can reach the `phantom` methods it can result in Server-Side Request Forgery vulnerabilities",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-918: Server-Side Request Forgery (SSRF)"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A10:2021 - Server-Side Request Forgery (SSRF)"
        ],
        "references": [
          "https://phantomjs.org/page-automation.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "express"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "require('phantom');\n...\n"
                },
                {
                  "pattern-inside": "import 'phantom';\n...\n"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$PAGE.open($SINK,...)"
                },
                {
                  "pattern": "$PAGE.setContent($SINK,...)"
                },
                {
                  "pattern": "$PAGE.openUrl($SINK,...)"
                },
                {
                  "pattern": "$PAGE.evaluateJavaScript($SINK,...)"
                },
                {
                  "pattern": "$PAGE.property(\"content\",$SINK,...)"
                }
              ]
            },
            {
              "focus-metavariable": "$SINK"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "function ... ($REQ, $RES) {...}"
                },
                {
                  "pattern-inside": "function ... ($REQ, $RES, $NEXT) {...}"
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES) {...})"
                        },
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})"
                        }
                      ]
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "^(get|post|put|head|delete|options)$"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$REQ.query"
                },
                {
                  "pattern": "$REQ.body"
                },
                {
                  "pattern": "$REQ.params"
                },
                {
                  "pattern": "$REQ.cookies"
                },
                {
                  "pattern": "$REQ.headers"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>\n{...}\n"
                },
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response) => {...}\n"
                }
              ]
            },
            {
              "focus-metavariable": "$REQ"
            },
            {
              "pattern-either": [
                {
                  "pattern": "params"
                },
                {
                  "pattern": "query"
                },
                {
                  "pattern": "cookies"
                },
                {
                  "pattern": "headers"
                },
                {
                  "pattern": "body"
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.javascript.express.security.express-puppeteer-injection",
      "languages": [
        "js",
        "ts"
      ],
      "message": "If unverified user data can reach the `puppeteer` methods it can result in Server-Side Request Forgery vulnerabilities",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-918: Server-Side Request Forgery (SSRF)"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A10:2021 - Server-Side Request Forgery (SSRF)"
        ],
        "references": [
          "https://pptr.dev/api/puppeteer.page"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "express"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "require('puppeteer');\n...\n"
                },
                {
                  "pattern-inside": "import 'puppeteer';\n...\n"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$PAGE.goto($SINK,...)"
                },
                {
                  "pattern": "$PAGE.setContent($SINK,...)"
                },
                {
                  "pattern": "$PAGE.evaluate($SINK,...)"
                },
                {
                  "pattern": "$PAGE.evaluate($CODE,$SINK,...)"
                },
                {
                  "pattern": "$PAGE.evaluateHandle($SINK,...)"
                },
                {
                  "pattern": "$PAGE.evaluateHandle($CODE,$SINK,...)"
                },
                {
                  "pattern": "$PAGE.evaluateOnNewDocument($SINK,...)"
                },
                {
                  "pattern": "$PAGE.evaluateOnNewDocument($CODE,$SINK,...)"
                }
              ]
            },
            {
              "focus-metavariable": "$SINK"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "function ... ($REQ, $RES) {...}"
                },
                {
                  "pattern-inside": "function ... ($REQ, $RES, $NEXT) {...}"
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES) {...})"
                        },
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})"
                        }
                      ]
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "^(get|post|put|head|delete|options)$"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$REQ.query"
                },
                {
                  "pattern": "$REQ.body"
                },
                {
                  "pattern": "$REQ.params"
                },
                {
                  "pattern": "$REQ.cookies"
                },
                {
                  "pattern": "$REQ.headers"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>\n{...}\n"
                },
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response) => {...}\n"
                }
              ]
            },
            {
              "focus-metavariable": "$REQ"
            },
            {
              "pattern-either": [
                {
                  "pattern": "params"
                },
                {
                  "pattern": "query"
                },
                {
                  "pattern": "cookies"
                },
                {
                  "pattern": "headers"
                },
                {
                  "pattern": "body"
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.javascript.express.security.express-vm-injection",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Make sure that unverified user data can not reach `$VM`.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-94: Improper Control of Generation of Code ('Code Injection')"
        ],
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "express"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-inside": "$VM = require('vm');\n...\n"
            },
            {
              "pattern-either": [
                {
                  "pattern": "$VM.runInContext(...)\n"
                },
                {
                  "pattern": "$VM.runInNewContext(...)\n"
                },
                {
                  "pattern": "$VM.compileFunction(...)\n"
                },
                {
                  "pattern": "$VM.runInThisContext(...)\n"
                },
                {
                  "pattern": "new $VM.Script(...)"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "function ... ($REQ, $RES) {...}"
                },
                {
                  "pattern-inside": "function ... ($REQ, $RES, $NEXT) {...}"
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES) {...})"
                        },
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})"
                        }
                      ]
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "^(get|post|put|head|delete|options)$"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$REQ.query"
                },
                {
                  "pattern": "$REQ.body"
                },
                {
                  "pattern": "$REQ.params"
                },
                {
                  "pattern": "$REQ.cookies"
                },
                {
                  "pattern": "$REQ.headers"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>\n{...}\n"
                },
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response) => {...}\n"
                }
              ]
            },
            {
              "focus-metavariable": "$REQ"
            },
            {
              "pattern-either": [
                {
                  "pattern": "params"
                },
                {
                  "pattern": "query"
                },
                {
                  "pattern": "cookies"
                },
                {
                  "pattern": "headers"
                },
                {
                  "pattern": "body"
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.javascript.express.security.express-vm2-injection",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Make sure that unverified user data can not reach `vm2`.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-94: Improper Control of Generation of Code ('Code Injection')"
        ],
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "express"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-inside": "require('vm2')\n...\n"
            },
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "$VM = new VM(...)\n...\n"
                        },
                        {
                          "pattern-inside": "$VM = new NodeVM(...)\n...\n"
                        }
                      ]
                    },
                    {
                      "pattern": "$VM.run(...)\n"
                    }
                  ]
                },
                {
                  "pattern": "new VM(...).run(...)\n"
                },
                {
                  "pattern": "new NodeVM(...).run(...)\n"
                },
                {
                  "pattern": "new VMScript(...)\n"
                },
                {
                  "pattern": "new VM(...)\n"
                },
                {
                  "pattern": "new NodeVM(...)"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "function ... ($REQ, $RES) {...}"
                },
                {
                  "pattern-inside": "function ... ($REQ, $RES, $NEXT) {...}"
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES) {...})"
                        },
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})"
                        }
                      ]
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "^(get|post|put|head|delete|options)$"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$REQ.query"
                },
                {
                  "pattern": "$REQ.body"
                },
                {
                  "pattern": "$REQ.params"
                },
                {
                  "pattern": "$REQ.cookies"
                },
                {
                  "pattern": "$REQ.headers"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>\n{...}\n"
                },
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response) => {...}\n"
                }
              ]
            },
            {
              "focus-metavariable": "$REQ"
            },
            {
              "pattern-either": [
                {
                  "pattern": "params"
                },
                {
                  "pattern": "query"
                },
                {
                  "pattern": "cookies"
                },
                {
                  "pattern": "headers"
                },
                {
                  "pattern": "body"
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.express.security.express-xml2json-xxe",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities",
      "metadata": {
        "asvs": {
          "control_id": "5.5.2 Insecue XML Deserialization",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention",
          "section": "V5 Validation, Sanitization and Encoding",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-611: Improper Restriction of XML External Entity Reference"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A04:2017 - XML External Entities (XXE)",
          "A05:2021 - Security Misconfiguration"
        ],
        "references": [
          "https://www.npmjs.com/package/xml2json"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "express"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "require('xml2json');\n...\n"
                },
                {
                  "pattern-inside": "import 'xml2json';\n...\n"
                }
              ]
            },
            {
              "pattern": "$EXPAT.toJson($SINK,...)"
            },
            {
              "focus-metavariable": "$SINK"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "function ... ($REQ, $RES) {...}"
                },
                {
                  "pattern-inside": "function ... ($REQ, $RES, $NEXT) {...}"
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES) {...})"
                        },
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})"
                        }
                      ]
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "^(get|post|put|head|delete|options)$"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$REQ.query"
                },
                {
                  "pattern": "$REQ.body"
                },
                {
                  "pattern": "$REQ.params"
                },
                {
                  "pattern": "$REQ.cookies"
                },
                {
                  "pattern": "$REQ.headers"
                },
                {
                  "pattern": "$REQ.files.$ANYTHING.data.toString('utf8')"
                },
                {
                  "pattern": "$REQ.files.$ANYTHING['data'].toString('utf8')"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>\n{...}\n"
                },
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response) => {...}\n"
                }
              ]
            },
            {
              "focus-metavariable": "$REQ"
            },
            {
              "pattern-either": [
                {
                  "pattern": "params"
                },
                {
                  "pattern": "query"
                },
                {
                  "pattern": "cookies"
                },
                {
                  "pattern": "headers"
                },
                {
                  "pattern": "body"
                },
                {
                  "pattern": "files.$ANYTHING.data.toString('utf8')"
                },
                {
                  "pattern": "files.$ANYTHING['data'].toString('utf8')"
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.javascript.express.security.require-request",
      "languages": [
        "js",
        "ts"
      ],
      "message": "If an attacker controls the x in require(x) then they can cause code to load that was not intended to run on the server.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-706: Use of Incorrectly-Resolved Name or Reference"
        ],
        "impact": "MEDIUM",
        "interfile": true,
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://github.com/google/node-sec-roadmap/blob/master/chapter-2/dynamism.md#dynamism-when-you-need-it"
        ],
        "source-rule-url": "https://nodesecroadmap.fyi/chapter-1/threat-UIR.html",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "express"
        ]
      },
      "mode": "taint",
      "options": {
        "interfile": true
      },
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern": "require($SINK)"
            },
            {
              "focus-metavariable": "$SINK"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "function ... ($REQ, $RES) {...}"
                },
                {
                  "pattern-inside": "function ... ($REQ, $RES, $NEXT) {...}"
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES) {...})"
                        },
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})"
                        }
                      ]
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "^(get|post|put|head|delete|options)$"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$REQ.query"
                },
                {
                  "pattern": "$REQ.body"
                },
                {
                  "pattern": "$REQ.params"
                },
                {
                  "pattern": "$REQ.cookies"
                },
                {
                  "pattern": "$REQ.headers"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>\n{...}\n"
                },
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response) => {...}\n"
                }
              ]
            },
            {
              "focus-metavariable": "$REQ"
            },
            {
              "pattern-either": [
                {
                  "pattern": "params"
                },
                {
                  "pattern": "query"
                },
                {
                  "pattern": "cookies"
                },
                {
                  "pattern": "headers"
                },
                {
                  "pattern": "body"
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.javascript.express.security.x-frame-options-misconfiguration",
      "languages": [
        "js",
        "ts"
      ],
      "message": "By letting user input control `X-Frame-Options` header, there is a risk that software does not properly verify whether or not a browser should be allowed to render a page in an `iframe`.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-451: User Interface (UI) Misrepresentation of Critical Information"
        ],
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A04:2021 - Insecure Design"
        ],
        "references": [
          "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "express"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "$RES.set($HEADER, ...)"
                },
                {
                  "pattern": "$RES.header($HEADER, ...)"
                },
                {
                  "pattern": "$RES.setHeader($HEADER, ...)"
                },
                {
                  "pattern": "$RES.set({$HEADER: ...}, ...)\n"
                },
                {
                  "pattern": "$RES.writeHead($STATUS, {$HEADER: ...}, ...)\n"
                }
              ]
            },
            {
              "metavariable-regex": {
                "metavariable": "$HEADER",
                "regex": ".*(X-Frame-Options|x-frame-options).*"
              }
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "function ... ($REQ, $RES) {...}"
                },
                {
                  "pattern-inside": "function ... ($REQ, $RES, $NEXT) {...}"
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES) {...})"
                        },
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})"
                        }
                      ]
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "^(get|post|put|head|delete|options)$"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$REQ.query"
                },
                {
                  "pattern": "$REQ.body"
                },
                {
                  "pattern": "$REQ.params"
                },
                {
                  "pattern": "$REQ.cookies"
                },
                {
                  "pattern": "$REQ.headers"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>\n{...}\n"
                },
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response) => {...}\n"
                }
              ]
            },
            {
              "focus-metavariable": "$REQ"
            },
            {
              "pattern-either": [
                {
                  "pattern": "params"
                },
                {
                  "pattern": "query"
                },
                {
                  "pattern": "cookies"
                },
                {
                  "pattern": "headers"
                },
                {
                  "pattern": "body"
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.express.security.express-sandbox-code-injection",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Make sure that unverified user data can not reach `sandbox`.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-94: Improper Control of Generation of Code ('Code Injection')"
        ],
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "express"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-inside": "$SANDBOX = require('sandbox');\n...\n"
            },
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-inside": "$S = new $SANDBOX(...);\n...\n"
                    },
                    {
                      "pattern": "$S.run(...)\n"
                    }
                  ]
                },
                {
                  "pattern": "new $SANDBOX($OPTS).run(...)\n"
                },
                {
                  "pattern": "new $SANDBOX().run(...)"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "function ... ($REQ, $RES) {...}"
                },
                {
                  "pattern-inside": "function ... ($REQ, $RES, $NEXT) {...}"
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES) {...})"
                        },
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})"
                        }
                      ]
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "^(get|post|put|head|delete|options)$"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$REQ.query"
                },
                {
                  "pattern": "$REQ.body"
                },
                {
                  "pattern": "$REQ.params"
                },
                {
                  "pattern": "$REQ.cookies"
                },
                {
                  "pattern": "$REQ.headers"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>\n{...}\n"
                },
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response) => {...}\n"
                }
              ]
            },
            {
              "focus-metavariable": "$REQ"
            },
            {
              "pattern-either": [
                {
                  "pattern": "params"
                },
                {
                  "pattern": "query"
                },
                {
                  "pattern": "cookies"
                },
                {
                  "pattern": "headers"
                },
                {
                  "pattern": "body"
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.javascript.express.security.express-wkhtmltoimage-injection",
      "languages": [
        "js",
        "ts"
      ],
      "message": "If unverified user data can reach the `phantom` methods it can result in Server-Side Request Forgery vulnerabilities",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-918: Server-Side Request Forgery (SSRF)"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A10:2021 - Server-Side Request Forgery (SSRF)"
        ],
        "references": [
          "https://www.npmjs.com/package/wkhtmltopdf"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "express"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern": "$WK.generate($SINK,...)"
            },
            {
              "focus-metavariable": "$SINK"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "function ... ($REQ, $RES) {...}"
                },
                {
                  "pattern-inside": "function ... ($REQ, $RES, $NEXT) {...}"
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES) {...})"
                        },
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})"
                        }
                      ]
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "^(get|post|put|head|delete|options)$"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$REQ.query"
                },
                {
                  "pattern": "$REQ.body"
                },
                {
                  "pattern": "$REQ.params"
                },
                {
                  "pattern": "$REQ.cookies"
                },
                {
                  "pattern": "$REQ.headers"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>\n{...}\n"
                },
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response) => {...}\n"
                }
              ]
            },
            {
              "focus-metavariable": "$REQ"
            },
            {
              "pattern-either": [
                {
                  "pattern": "params"
                },
                {
                  "pattern": "query"
                },
                {
                  "pattern": "cookies"
                },
                {
                  "pattern": "headers"
                },
                {
                  "pattern": "body"
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.javascript.express.security.express-wkhtmltopdf-injection",
      "languages": [
        "js",
        "ts"
      ],
      "message": "If unverified user data can reach the `wkhtmltopdf` methods it can result in Server-Side Request Forgery vulnerabilities",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-918: Server-Side Request Forgery (SSRF)"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A10:2021 - Server-Side Request Forgery (SSRF)"
        ],
        "references": [
          "https://www.npmjs.com/package/wkhtmltopdf"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "express"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-inside": "$WK = require('wkhtmltopdf');\n...\n"
            },
            {
              "pattern": "$WK($SINK,...)"
            },
            {
              "focus-metavariable": "$SINK"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "function ... ($REQ, $RES) {...}"
                },
                {
                  "pattern-inside": "function ... ($REQ, $RES, $NEXT) {...}"
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES) {...})"
                        },
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})"
                        }
                      ]
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "^(get|post|put|head|delete|options)$"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$REQ.query"
                },
                {
                  "pattern": "$REQ.body"
                },
                {
                  "pattern": "$REQ.params"
                },
                {
                  "pattern": "$REQ.cookies"
                },
                {
                  "pattern": "$REQ.headers"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>\n{...}\n"
                },
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response) => {...}\n"
                }
              ]
            },
            {
              "focus-metavariable": "$REQ"
            },
            {
              "pattern-either": [
                {
                  "pattern": "params"
                },
                {
                  "pattern": "query"
                },
                {
                  "pattern": "cookies"
                },
                {
                  "pattern": "headers"
                },
                {
                  "pattern": "body"
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.javascript.express.security.audit.express-check-directory-listing",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-548: Exposure of Information Through Directory Listing"
        ],
        "impact": "MEDIUM",
        "interfile": true,
        "likelihood": "HIGH",
        "owasp": [
          "A06:2017 - Security Misconfiguration",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://www.npmjs.com/package/serve-index",
          "https://www.acunetix.com/blog/articles/directory-listing-information-disclosure/"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "express"
        ]
      },
      "options": {
        "interfile": true
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "$APP.use(require('serve-index')(...))\n"
            },
            {
              "patterns": [
                {
                  "pattern-either": [
                    {
                      "pattern-inside": "$SERVEINDEX = require('serve-index')\n...\n"
                    },
                    {
                      "pattern-inside": "import $SERVEINDEX from 'serve-index'\n...\n"
                    },
                    {
                      "pattern-inside": "import * as $SERVEINDEX from 'serve-index'\n...\n"
                    }
                  ]
                },
                {
                  "pattern-either": [
                    {
                      "patterns": [
                        {
                          "pattern-inside": "$VALUE = $SERVEINDEX(...)\n...\n"
                        },
                        {
                          "pattern": "$VALUE(...)\n"
                        }
                      ]
                    },
                    {
                      "pattern": "$APP.use(..., $SERVEINDEX(...), ...)\n"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.express.security.audit.express-detect-notevil-usage",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detected usage of the `notevil` package, which is unmaintained and has vulnerabilities. Using any sort of `eval()` functionality can be very dangerous, but if you must, the `eval` package is an up to date alternative. Be sure that only trusted input reaches an `eval()` function.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-1104: Use of Unmaintained Third Party Components"
        ],
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A06:2021 - Vulnerable and Outdated Components"
        ],
        "references": [
          "https://github.com/mmckegg/notevil"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "javascript",
          "typescript"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern-inside": "import $EVAL from 'notevil'\n...\n"
            },
            {
              "pattern-inside": "import {$EVAL} from 'notevil'\n...\n"
            },
            {
              "pattern-inside": "$EVAL = require('notevil')\n...\n"
            }
          ]
        },
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern": "$EVAL(...)"
                },
                {
                  "pattern-not": "$EVAL('...')"
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern-either": [
                    {
                      "pattern": "$VM.runInContext(\"$CMD\", ...)"
                    },
                    {
                      "pattern": "$VM.runInNewContext(\"$CMD\", ...)"
                    },
                    {
                      "pattern": "$VM.runInThisContext(\"$CMD\", ...)"
                    },
                    {
                      "pattern": "$VM.compileFunction(\"$CMD\", ...)"
                    }
                  ]
                },
                {
                  "metavariable-pattern": {
                    "language": "typescript",
                    "metavariable": "$CMD",
                    "patterns": [
                      {
                        "pattern": "$EVAL(...)"
                      },
                      {
                        "pattern-not": "$EVAL('...')"
                      }
                    ]
                  }
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.express.security.audit.express-jwt-not-revoked",
      "languages": [
        "js",
        "ts"
      ],
      "message": "No token revoking configured for `express-jwt`. A leaked token could still be used and unable to be revoked. Consider using function as the `isRevoked` option.",
      "metadata": {
        "asvs": {
          "control_id": "3.5.3 Insecue Stateless Session Tokens",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management",
          "section": "V3: Session Management Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-522: Insufficiently Protected Credentials"
        ],
        "cwe2021-top25": true,
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A02:2017 - Broken Authentication",
          "A04:2021 - Insecure Design"
        ],
        "references": [
          "https://owasp.org/Top10/A04_2021-Insecure_Design"
        ],
        "source-rule-url": "https://github.com/goldbergyoni/nodebestpractices/blob/master/sections/security/expirejwt.md",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "express"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "$JWT = require('express-jwt');\n...\n"
        },
        {
          "pattern": "$JWT(...)"
        },
        {
          "pattern-not-inside": "$JWT(<... {isRevoked:...} ...>,...)"
        },
        {
          "pattern-not-inside": "$OPTS = <... {isRevoked:...} ...>;\n...\n$JWT($OPTS,...);"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.express.security.audit.express-libxml-noent",
      "languages": [
        "js",
        "ts"
      ],
      "message": "The libxml library processes user-input with the `noent` attribute is set to `true` which can lead to being vulnerable to XML External Entities (XXE) type attacks. It is recommended to set `noent` to `false` when using this feature to ensure you are protected.",
      "metadata": {
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-611: Improper Restriction of XML External Entity Reference"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "interfile": true,
        "likelihood": "HIGH",
        "owasp": [
          "A04:2017 - XML External Entities (XXE)",
          "A05:2021 - Security Misconfiguration"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "express"
        ]
      },
      "mode": "taint",
      "options": {
        "interfile": true
      },
      "pattern-sinks": [
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern-either": [
                    {
                      "pattern-inside": "$XML = require('$IMPORT')\n...\n"
                    },
                    {
                      "pattern-inside": "import $XML from '$IMPORT'\n  ...\n"
                    },
                    {
                      "pattern-inside": "import * as $XML from '$IMPORT'\n...\n"
                    }
                  ]
                },
                {
                  "metavariable-regex": {
                    "metavariable": "$IMPORT",
                    "regex": "^(libxmljs|libxmljs2)$"
                  }
                },
                {
                  "pattern-inside": "$XML.$FUNC($QUERY, {...,noent:true,...})"
                },
                {
                  "metavariable-regex": {
                    "metavariable": "$FUNC",
                    "regex": "^(parseXmlString|parseXml)$"
                  }
                },
                {
                  "focus-metavariable": "$QUERY"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "function ... ($REQ, $RES) {...}"
                },
                {
                  "pattern-inside": "function ... ($REQ, $RES, $NEXT) {...}"
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES) {...})"
                        },
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})"
                        }
                      ]
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "^(get|post|put|head|delete|options)$"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$REQ.query"
                },
                {
                  "pattern": "$REQ.body"
                },
                {
                  "pattern": "$REQ.params"
                },
                {
                  "pattern": "$REQ.cookies"
                },
                {
                  "pattern": "$REQ.headers"
                },
                {
                  "pattern": "$REQ.files.$ANYTHING.data.toString('utf8')"
                },
                {
                  "pattern": "$REQ.files.$ANYTHING['data'].toString('utf8')"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>\n{...}\n"
                },
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response) => {...}\n"
                }
              ]
            },
            {
              "focus-metavariable": "$REQ"
            },
            {
              "pattern-either": [
                {
                  "pattern": "params"
                },
                {
                  "pattern": "query"
                },
                {
                  "pattern": "cookies"
                },
                {
                  "pattern": "headers"
                },
                {
                  "pattern": "body"
                },
                {
                  "pattern": "files.$ANYTHING.data.toString('utf8')"
                },
                {
                  "pattern": "files.$ANYTHING['data'].toString('utf8')"
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.javascript.express.security.audit.express-libxml-vm-noent",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detected use of parseXml() function with the `noent` field set to `true`. This can lead to an XML External Entities (XXE) attack if untrusted data is passed into it.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-611: Improper Restriction of XML External Entity Reference"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A04:2017 - XML External Entities (XXE)",
          "A05:2021 - Security Misconfiguration"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "express"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern-either": [
                    {
                      "pattern": "$VM.runInContext(\"$CMD\", ...)"
                    },
                    {
                      "pattern": "$VM.runInNewContext(\"$CMD\", ...)"
                    },
                    {
                      "pattern": "$VM.runInThisContext(\"$CMD\", ...)"
                    },
                    {
                      "pattern": "$VM.compileFunction(\"$CMD\", ...)"
                    }
                  ]
                },
                {
                  "metavariable-pattern": {
                    "language": "typescript",
                    "metavariable": "$CMD",
                    "pattern-either": [
                      {
                        "pattern": "$LIBXML.parseXml($DATA, {..., noent: true, ...}, ...)\n"
                      },
                      {
                        "patterns": [
                          {
                            "pattern-inside": "$OPTS = {..., noent: true, ...}\n...\n"
                          },
                          {
                            "pattern": "$LIBXML.parseXml( $DATA, $OPTS )"
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            },
            {
              "pattern": "$LIBXML.parseXml($DATA, {..., noent: true, ...}, ...)\n"
            },
            {
              "patterns": [
                {
                  "pattern-inside": "$OPTS = {..., noent: true, ...}\n...\n"
                },
                {
                  "pattern": "$LIBXML.parseXml( $DATA, $OPTS )"
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.express.security.audit.express-open-redirect",
      "languages": [
        "js",
        "ts"
      ],
      "message": "The application redirects to a URL specified by user-supplied input `$REQ` that is not validated. This could redirect users to malicious locations. Consider using an allow-list approach to validate URLs, or warn users they are being redirected to a third-party website.",
      "metadata": {
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "express"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true,
        "taint_unify_mvars": true
      },
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "$RES.redirect(\"$HTTP\"+$REQ. ... .$VALUE)"
                },
                {
                  "pattern": "$RES.redirect(\"$HTTP\"+$REQ. ... .$VALUE + $...A)"
                },
                {
                  "pattern": "$RES.redirect(`$HTTP${$REQ. ... .$VALUE}...`)"
                },
                {
                  "pattern": "$RES.redirect(\"$HTTP\"+$REQ.$VALUE[...])"
                },
                {
                  "pattern": "$RES.redirect(\"$HTTP\"+$REQ.$VALUE[...] + $...A)"
                },
                {
                  "pattern": "$RES.redirect(`$HTTP${$REQ.$VALUE[...]}...`)"
                }
              ]
            },
            {
              "metavariable-regex": {
                "metavariable": "$HTTP",
                "regex": "^https?:\\/\\/$"
              }
            },
            {
              "pattern-either": [
                {
                  "pattern": "$REQ. ... .$VALUE"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "$RES.redirect($REQ. ... .$VALUE)"
                },
                {
                  "pattern": "$RES.redirect($REQ. ... .$VALUE + $...A)"
                },
                {
                  "pattern": "$RES.redirect(`${$REQ. ... .$VALUE}...`)"
                }
              ]
            },
            {
              "pattern": "$REQ. ... .$VALUE"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "$RES.redirect($REQ.$VALUE['...'])"
                },
                {
                  "pattern": "$RES.redirect($REQ.$VALUE['...'] + $...A)"
                },
                {
                  "pattern": "$RES.redirect(`${$REQ.$VALUE['...']}...`)"
                }
              ]
            },
            {
              "pattern": "$REQ.$VALUE"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "$ASSIGN = $REQ. ... .$VALUE\n...\n"
                },
                {
                  "pattern-inside": "$ASSIGN = $REQ.$VALUE['...']\n...\n"
                },
                {
                  "pattern-inside": "$ASSIGN = $REQ. ... .$VALUE + $...A\n...\n"
                },
                {
                  "pattern-inside": "$ASSIGN = $REQ.$VALUE['...'] + $...A\n...     \n"
                },
                {
                  "pattern-inside": "$ASSIGN = `${$REQ. ... .$VALUE}...`\n...\n"
                },
                {
                  "pattern-inside": "$ASSIGN = `${$REQ.$VALUE['...']}...`\n...                    \n"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$RES.redirect($ASSIGN)"
                },
                {
                  "pattern": "$RES.redirect($ASSIGN + $...FOO)"
                },
                {
                  "pattern": "$RES.redirect(`${$ASSIGN}...`)"
                }
              ]
            },
            {
              "focus-metavariable": "$ASSIGN"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "function ... ($REQ, $RES) {...}"
                },
                {
                  "pattern-inside": "function ... ($REQ, $RES, $NEXT) {...}"
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES) {...})"
                        },
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})"
                        }
                      ]
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "^(get|post|put|head|delete|options)$"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$REQ.query"
                },
                {
                  "pattern": "$REQ.body"
                },
                {
                  "pattern": "$REQ.params"
                },
                {
                  "pattern": "$REQ.cookies"
                },
                {
                  "pattern": "$REQ.headers"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>\n{...}\n"
                },
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response) => {...}\n"
                }
              ]
            },
            {
              "focus-metavariable": "$REQ"
            },
            {
              "pattern-either": [
                {
                  "pattern": "params"
                },
                {
                  "pattern": "query"
                },
                {
                  "pattern": "cookies"
                },
                {
                  "pattern": "headers"
                },
                {
                  "pattern": "body"
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.express.security.audit.express-path-join-resolve-traversal",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Possible writing outside of the destination, make sure that the target path is nested in the intended destination",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "HIGH",
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "express",
          "node.js"
        ]
      },
      "mode": "taint",
      "pattern-sanitizers": [
        {
          "pattern": "$Y.replace(...)"
        },
        {
          "pattern": "$Y.indexOf(...)"
        },
        {
          "pattern": "function ... (...) {\n    ...\n    <... $Y.indexOf(...) ...>\n    ...\n}\n"
        },
        {
          "patterns": [
            {
              "pattern": "$FUNC(...)"
            },
            {
              "metavariable-regex": {
                "metavariable": "$FUNC",
                "regex": "sanitize"
              }
            }
          ]
        }
      ],
      "pattern-sinks": [
        {
          "patterns": [
            {
              "focus-metavariable": "$SINK"
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "$PATH = require('path');\n...\n"
                },
                {
                  "pattern-inside": "import $PATH from 'path';\n...\n"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$PATH.join(...,$SINK,...)"
                },
                {
                  "pattern": "$PATH.resolve(...,$SINK,...)"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "focus-metavariable": "$SINK"
            },
            {
              "pattern-inside": "import 'path';\n...\n"
            },
            {
              "pattern-either": [
                {
                  "pattern": "path.join(...,$SINK,...)"
                },
                {
                  "pattern": "path.resolve(...,$SINK,...)"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "function ... ($REQ, $RES) {...}"
                },
                {
                  "pattern-inside": "function ... ($REQ, $RES, $NEXT) {...}"
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES) {...})"
                        },
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})"
                        }
                      ]
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "^(get|post|put|head|delete|options)$"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$REQ.query"
                },
                {
                  "pattern": "$REQ.body"
                },
                {
                  "pattern": "$REQ.params"
                },
                {
                  "pattern": "$REQ.cookies"
                },
                {
                  "pattern": "$REQ.headers"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>\n{...}\n"
                },
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response) => {...}\n"
                }
              ]
            },
            {
              "focus-metavariable": "$REQ"
            },
            {
              "pattern-either": [
                {
                  "pattern": "params"
                },
                {
                  "pattern": "query"
                },
                {
                  "pattern": "cookies"
                },
                {
                  "pattern": "headers"
                },
                {
                  "pattern": "body"
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.express.security.audit.express-res-sendfile",
      "languages": [
        "js",
        "ts"
      ],
      "message": "The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-73: External Control of File Name or Path"
        ],
        "impact": "MEDIUM",
        "likelihood": "HIGH",
        "owasp": [
          "A04:2021 - Insecure Design"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "express"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "$RES.$METH($QUERY,...)"
                }
              ]
            },
            {
              "pattern-not-inside": "$RES.$METH($QUERY,$OPTIONS)"
            },
            {
              "metavariable-regex": {
                "metavariable": "$METH",
                "regex": "^(sendfile|sendFile)$"
              }
            },
            {
              "focus-metavariable": "$QUERY"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "function ... ($REQ, $RES) {...}"
                },
                {
                  "pattern-inside": "function ... ($REQ, $RES, $NEXT) {...}"
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES) {...})"
                        },
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})"
                        }
                      ]
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "^(get|post|put|head|delete|options)$"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$REQ.query"
                },
                {
                  "pattern": "$REQ.body"
                },
                {
                  "pattern": "$REQ.params"
                },
                {
                  "pattern": "$REQ.cookies"
                },
                {
                  "pattern": "$REQ.headers"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>\n{...}\n"
                },
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response) => {...}\n"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "params"
                },
                {
                  "pattern": "query"
                },
                {
                  "pattern": "cookies"
                },
                {
                  "pattern": "headers"
                },
                {
                  "pattern": "body"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "function ... (...,$REQ: $TYPE, ...) {...}\n"
                        }
                      ]
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$TYPE",
                        "regex": "^(string|String)"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.express.security.audit.express-session-hardcoded-secret",
      "languages": [
        "js",
        "ts"
      ],
      "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",
      "metadata": {
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "interfile": true,
        "likelihood": "HIGH",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "express",
          "secrets"
        ]
      },
      "options": {
        "interfile": true
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern-inside": "$SESSION = require('express-session');\n...\n"
            },
            {
              "pattern-inside": "import $SESSION from 'express-session'\n...\n"
            },
            {
              "pattern-inside": "import {..., $SESSION, ...} from 'express-session'\n...\n"
            },
            {
              "pattern-inside": "import * as $SESSION from 'express-session'\n...\n"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "$APP.use($SESSION({...}))"
                },
                {
                  "pattern": "$SECRET = $VALUE\n...\n$APP.use($SESSION($SECRET))\n"
                }
              ]
            },
            {
              "pattern": "secret: '$Y'\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.express.security.audit.express-ssrf",
      "languages": [
        "js",
        "ts"
      ],
      "message": "The following request $REQUEST.$METHOD() was found to be crafted from user-input `$REQ` which can lead to Server-Side Request Forgery (SSRF) vulnerabilities. It is recommended where possible to not allow user-input to craft the base request, but to be treated as part of the path or query parameter. When user-input is necessary to craft the request, it is recommeneded to follow OWASP best practices to prevent abuse. ",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-918: Server-Side Request Forgery (SSRF)"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "owasp": [
          "A10:2021 - Server-Side Request Forgery (SSRF)"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "express"
        ]
      },
      "mode": "taint",
      "options": {
        "taint_unify_mvars": true
      },
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "$REQUEST = require('request')\n...\n"
                },
                {
                  "pattern-inside": "import * as $REQUEST from 'request'\n...\n"
                },
                {
                  "pattern-inside": "import $REQUEST from 'request'\n...\n"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$REQUEST.$METHOD(\"$HTTP\"+$REQ. ... .$VALUE)"
                },
                {
                  "pattern": "$REQUEST.$METHOD(\"$HTTP\"+$REQ. ... .$VALUE + $...A)"
                },
                {
                  "pattern": "$REQUEST.$METHOD(`$HTTP${$REQ. ... .$VALUE}...`)"
                },
                {
                  "pattern": "$REQUEST.$METHOD(\"$HTTP\"+$REQ.$VALUE[...])"
                },
                {
                  "pattern": "$REQUEST.$METHOD(\"$HTTP\"+$REQ.$VALUE[...] + $...A)"
                },
                {
                  "pattern": "$REQUEST.$METHOD(`$HTTP${$REQ.$VALUE[...]}...`)"
                }
              ]
            },
            {
              "metavariable-regex": {
                "metavariable": "$METHOD",
                "regex": "^(get|post|put|patch|del|head|delete)$"
              }
            },
            {
              "metavariable-regex": {
                "metavariable": "$HTTP",
                "regex": "^(https?:\\/\\/|//)$"
              }
            },
            {
              "pattern-either": [
                {
                  "pattern": "$REQ. ... .$VALUE"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "$REQUEST = require('request')\n...\n"
                },
                {
                  "pattern-inside": "import * as $REQUEST from 'request'\n...\n"
                },
                {
                  "pattern-inside": "import $REQUEST from 'request'\n...\n"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$REQUEST.$METHOD($REQ. ... .$VALUE,...)"
                },
                {
                  "pattern": "$REQUEST.$METHOD($REQ. ... .$VALUE + $...A,...)"
                },
                {
                  "pattern": "$REQUEST.$METHOD(`${$REQ. ... .$VALUE}...`,...)"
                }
              ]
            },
            {
              "pattern": "$REQ. ... .$VALUE"
            },
            {
              "metavariable-regex": {
                "metavariable": "$METHOD",
                "regex": "^(get|post|put|patch|del|head|delete)$"
              }
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "$REQUEST = require('request')\n...\n"
                },
                {
                  "pattern-inside": "import * as $REQUEST from 'request'\n...\n"
                },
                {
                  "pattern-inside": "import $REQUEST from 'request'\n...\n"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$REQUEST.$METHOD($REQ.$VALUE['...'],...)"
                },
                {
                  "pattern": "$REQUEST.$METHOD($REQ.$VALUE['...'] + $...A,...)"
                },
                {
                  "pattern": "$REQUEST.$METHOD(`${$REQ.$VALUE['...']}...`,...)"
                }
              ]
            },
            {
              "pattern": "$REQ.$VALUE"
            },
            {
              "metavariable-regex": {
                "metavariable": "$METHOD",
                "regex": "^(get|post|put|patch|del|head|delete)$"
              }
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "$REQUEST = require('request')\n...\n"
                },
                {
                  "pattern-inside": "import * as $REQUEST from 'request'\n...\n"
                },
                {
                  "pattern-inside": "import $REQUEST from 'request'\n...\n"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "$ASSIGN = $REQ. ... .$VALUE\n...\n"
                },
                {
                  "pattern-inside": "$ASSIGN = $REQ. ... .$VALUE['...']\n...\n"
                },
                {
                  "pattern-inside": "$ASSIGN = $REQ. ... .$VALUE + $...A\n...\n"
                },
                {
                  "pattern-inside": "$ASSIGN = $REQ. ... .$VALUE['...'] + $...A\n...     \n"
                },
                {
                  "pattern-inside": "$ASSIGN = `${$REQ. ... .$VALUE}...`\n...\n"
                },
                {
                  "pattern-inside": "$ASSIGN = `${$REQ. ... .$VALUE['...']}...`\n... \n"
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "$ASSIGN = \"$HTTP\"+ $REQ. ... .$VALUE\n...\n"
                        },
                        {
                          "pattern-inside": "$ASSIGN = \"$HTTP\"+$REQ. ... .$VALUE + $...A\n...\n"
                        },
                        {
                          "pattern-inside": "$ASSIGN = \"$HTTP\"+$REQ.$VALUE[...]\n...\n"
                        },
                        {
                          "pattern-inside": "$ASSIGN = \"$HTTP\"+$REQ.$VALUE[...] + $...A\n...\n"
                        },
                        {
                          "pattern-inside": "$ASSIGN = `$HTTP${$REQ.$VALUE[...]}...`\n...\n"
                        }
                      ]
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$HTTP",
                        "regex": "^(https?:\\/\\/|//)$"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$REQUEST.$METHOD($ASSIGN,...)"
                },
                {
                  "pattern": "$REQUEST.$METHOD($ASSIGN + $...FOO,...)"
                },
                {
                  "pattern": "$REQUEST.$METHOD(`${$ASSIGN}...`,...)"
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "$REQUEST.$METHOD(\"$HTTP\"+$ASSIGN,...)"
                        },
                        {
                          "pattern": "$REQUEST.$METHOD(\"$HTTP\"+$ASSIGN + $...A,...)"
                        },
                        {
                          "pattern": "$REQUEST.$METHOD(`$HTTP${$ASSIGN}...`,...)"
                        }
                      ]
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$HTTP",
                        "regex": "^(https?:\\/\\/|//)$"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "pattern": "$ASSIGN"
            },
            {
              "metavariable-regex": {
                "metavariable": "$METHOD",
                "regex": "^(get|post|put|patch|del|head|delete)$"
              }
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "function ... ($REQ, ...) {...}"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$REQ.query"
                },
                {
                  "pattern": "$REQ.body"
                },
                {
                  "pattern": "$REQ.params"
                },
                {
                  "pattern": "$REQ.cookies"
                },
                {
                  "pattern": "$REQ.headers"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "({ $REQ }: Request,...) =>\n{...}\n"
                },
                {
                  "pattern-inside": "({ $REQ }: $EXPRESS.Request,...) => {...}\n"
                }
              ]
            },
            {
              "focus-metavariable": "$REQ"
            },
            {
              "pattern-either": [
                {
                  "pattern": "params"
                },
                {
                  "pattern": "query"
                },
                {
                  "pattern": "cookies"
                },
                {
                  "pattern": "headers"
                },
                {
                  "pattern": "body"
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.express.security.audit.express-third-party-object-deserialization",
      "languages": [
        "js",
        "ts"
      ],
      "message": "The following function call $SER.$FUNC accepts user controlled data which can result in Remote Code Execution (RCE) through Object Deserialization. It is recommended to use secure data processing alternatives such as JSON.parse() and Buffer.from().",
      "metadata": {
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-502: Deserialization of Untrusted Data"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "interfile": true,
        "likelihood": "HIGH",
        "owasp": [
          "A08:2017 - Insecure Deserialization",
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html"
        ],
        "source_rule_url": [
          "https://github.com/ajinabraham/njsscan/blob/75bfbeb9c8d72999e4d527dfa2548f7f0f3cc48a/njsscan/rules/semantic_grep/eval/eval_deserialize.yaml"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "express"
        ]
      },
      "mode": "taint",
      "options": {
        "interfile": true
      },
      "pattern-sinks": [
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern-either": [
                    {
                      "pattern-inside": "$SER = require('$IMPORT')\n...\n"
                    },
                    {
                      "pattern-inside": "import $SER from '$IMPORT'\n ...\n"
                    },
                    {
                      "pattern-inside": "import * as $SER from '$IMPORT'\n...\n"
                    }
                  ]
                },
                {
                  "metavariable-regex": {
                    "metavariable": "$IMPORT",
                    "regex": "^(node-serialize|serialize-to-js)$"
                  }
                },
                {
                  "pattern": "$SER.$FUNC(...)"
                },
                {
                  "metavariable-regex": {
                    "metavariable": "$FUNC",
                    "regex": "^(unserialize|deserialize)$"
                  }
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "function ... ($REQ, $RES) {...}"
                },
                {
                  "pattern-inside": "function ... ($REQ, $RES, $NEXT) {...}"
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES) {...})"
                        },
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})"
                        }
                      ]
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "^(get|post|put|head|delete|options)$"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$REQ.query"
                },
                {
                  "pattern": "$REQ.body"
                },
                {
                  "pattern": "$REQ.params"
                },
                {
                  "pattern": "$REQ.cookies"
                },
                {
                  "pattern": "$REQ.headers"
                },
                {
                  "pattern": "$REQ.files.$ANYTHING.data.toString('utf8')"
                },
                {
                  "pattern": "$REQ.files.$ANYTHING['data'].toString('utf8')"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>\n{...}\n"
                },
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response) => {...}\n"
                }
              ]
            },
            {
              "focus-metavariable": "$REQ"
            },
            {
              "pattern-either": [
                {
                  "pattern": "params"
                },
                {
                  "pattern": "query"
                },
                {
                  "pattern": "cookies"
                },
                {
                  "pattern": "headers"
                },
                {
                  "pattern": "body"
                },
                {
                  "pattern": "files.$ANYTHING.data.toString('utf8')"
                },
                {
                  "pattern": "files.$ANYTHING['data'].toString('utf8')"
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.express.security.audit.express-xml2json-xxe-event",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Xml Parser is used inside Request Event. Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-611: Improper Restriction of XML External Entity Reference"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "owasp": [
          "A04:2017 - XML External Entities (XXE)",
          "A05:2021 - Security Misconfiguration"
        ],
        "references": [
          "https://www.npmjs.com/package/xml2json"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "express"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "require('xml2json');\n...\n"
                },
                {
                  "pattern-inside": "import 'xml2json';\n...\n"
                }
              ]
            },
            {
              "pattern": "$REQ.on('...', function(...) { ... $EXPAT.toJson($INPUT,...); ... })"
            },
            {
              "focus-metavariable": "$INPUT"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "function ... ($REQ, $RES) {...}"
                },
                {
                  "pattern-inside": "function ... ($REQ, $RES, $NEXT) {...}"
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES) {...})"
                        },
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})"
                        }
                      ]
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "^(get|post|put|head|delete|options)$"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$REQ.query"
                },
                {
                  "pattern": "$REQ.body"
                },
                {
                  "pattern": "$REQ.params"
                },
                {
                  "pattern": "$REQ.cookies"
                },
                {
                  "pattern": "$REQ.headers"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) => {...}\n"
                },
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response) => {...}\n"
                }
              ]
            },
            {
              "focus-metavariable": "$REQ"
            },
            {
              "pattern-either": [
                {
                  "pattern": "params"
                },
                {
                  "pattern": "query"
                },
                {
                  "pattern": "cookies"
                },
                {
                  "pattern": "headers"
                },
                {
                  "pattern": "body"
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.express.security.audit.remote-property-injection",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Bracket object notation with user input is present, this might allow an attacker to access all properties of the object and even it's prototype. Use literal values for object properties.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-522: Insufficiently Protected Credentials"
        ],
        "cwe2021-top25": true,
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A02:2017 - Broken Authentication",
          "A04:2021 - Insecure Design"
        ],
        "references": [
          "https://github.com/nodesecurity/eslint-plugin-security/blob/3c7522ca1be800353513282867a1034c795d9eb4/docs/the-dangers-of-square-bracket-notation.md"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "express"
        ]
      },
      "mode": "taint",
      "pattern-sanitizers": [
        {
          "patterns": [
            {
              "pattern": "var $X = ..."
            },
            {
              "pattern-not": "var $X = $REQ.$ANY"
            }
          ]
        }
      ],
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-inside": "$OBJ[...] = ..."
            },
            {
              "pattern-not-inside": "$OBJ[\"...\"] = ..."
            },
            {
              "pattern-not-inside": "$OBJ[...] = \"...\""
            },
            {
              "pattern": "$INDEX"
            },
            {
              "pattern-not": "\"...\" + $INDEX\n"
            },
            {
              "pattern-not": "$INDEX + \"...\"\n"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "function ... ($REQ, $RES) {...}"
                },
                {
                  "pattern-inside": "function ... ($REQ, $RES, $NEXT) {...}"
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES) {...})"
                        },
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})"
                        }
                      ]
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "^(get|post|put|head|delete|options)$"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$REQ.query"
                },
                {
                  "pattern": "$REQ.body"
                },
                {
                  "pattern": "$REQ.params"
                },
                {
                  "pattern": "$REQ.cookies"
                },
                {
                  "pattern": "$REQ.headers"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>\n{...}\n"
                },
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response) => {...}\n"
                }
              ]
            },
            {
              "focus-metavariable": "$REQ"
            },
            {
              "pattern-either": [
                {
                  "pattern": "params"
                },
                {
                  "pattern": "query"
                },
                {
                  "pattern": "cookies"
                },
                {
                  "pattern": "headers"
                },
                {
                  "pattern": "body"
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.javascript.express.security.audit.res-render-injection",
      "languages": [
        "js",
        "ts"
      ],
      "message": "User controllable data `$REQ` enters `$RES.render(...)` this can lead to the loading of other HTML/templating pages that they may not be authorized to render. An attacker may attempt to use directory traversal techniques e.g. `../folder/index` to access other HTML pages on the file system. Where possible, do not allow users to define what should be  loaded in $RES.render or use an allow list for the existing application.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-706: Use of Incorrectly-Resolved Name or Reference"
        ],
        "impact": "MEDIUM",
        "interfile": true,
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "http://expressjs.com/en/4x/api.html#res.render"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "express"
        ]
      },
      "mode": "taint",
      "options": {
        "interfile": true
      },
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "$RES.render($SINK, ...)"
                }
              ]
            },
            {
              "focus-metavariable": "$SINK"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "function ... ($REQ, $RES) {...}"
                },
                {
                  "pattern-inside": "function ... ($REQ, $RES, $NEXT) {...}"
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES) {...})"
                        },
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})"
                        }
                      ]
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "^(get|post|put|head|delete|options)$"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$REQ.query"
                },
                {
                  "pattern": "$REQ.body"
                },
                {
                  "pattern": "$REQ.params"
                },
                {
                  "pattern": "$REQ.cookies"
                },
                {
                  "pattern": "$REQ.headers"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>\n{...}\n"
                },
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response) => {...}\n"
                }
              ]
            },
            {
              "focus-metavariable": "$REQ"
            },
            {
              "pattern-either": [
                {
                  "pattern": "params"
                },
                {
                  "pattern": "query"
                },
                {
                  "pattern": "cookies"
                },
                {
                  "pattern": "headers"
                },
                {
                  "pattern": "body"
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.express.security.audit.express-check-csurf-middleware-usage",
      "languages": [
        "js",
        "ts"
      ],
      "message": "A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-352: Cross-Site Request Forgery (CSRF)"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://www.npmjs.com/package/csurf",
          "https://www.npmjs.com/package/csrf",
          "https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "javascript",
          "typescript",
          "express"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "$EXPRESS = require('express')\n...\n"
        },
        {
          "pattern-not-inside": "import {$CSRF} from 'csurf'\n...\n"
        },
        {
          "pattern-not-inside": "require('csurf')\n...\n"
        },
        {
          "pattern-not-inside": "import {$CSRF} from 'csrf'\n...\n"
        },
        {
          "pattern-not-inside": "require('csrf')\n...\n"
        },
        {
          "pattern": "$APP = $EXPRESS()\n"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.javascript.express.security.audit.express-cookie-session-default-name",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Don\u2019t use the default session cookie name Using the default session cookie name can open your app to attacks. The security issue posed is similar to X-Powered-By: a potential attacker can use it to fingerprint the server and target attacks accordingly.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-522: Insufficiently Protected Credentials"
        ],
        "cwe2021-top25": true,
        "impact": "LOW",
        "likelihood": "HIGH",
        "owasp": [
          "A02:2017 - Broken Authentication",
          "A04:2021 - Insecure Design"
        ],
        "references": [
          "https://owasp.org/Top10/A04_2021-Insecure_Design"
        ],
        "source-rule-url": "https://expressjs.com/en/advanced/best-practice-security.html",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "express"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern-inside": "$SESSION = require('cookie-session');\n...\n"
            },
            {
              "pattern-inside": "$SESSION = require('express-session');\n...\n"
            }
          ]
        },
        {
          "pattern": "$SESSION(...)"
        },
        {
          "pattern-not-inside": "$SESSION(<... {name:...} ...>,...)"
        },
        {
          "pattern-not-inside": "$OPTS = <... {name:...} ...>;\n...\n$SESSION($OPTS,...);\n"
        },
        {
          "pattern-not-inside": "$OPTS = ...;\n...\n$OPTS.name = ...;\n...\n$SESSION($OPTS,...);\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.express.security.audit.express-cookie-session-no-secure",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Default session middleware settings: `secure` not set. It ensures the browser only sends the cookie over HTTPS.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-522: Insufficiently Protected Credentials"
        ],
        "cwe2021-top25": true,
        "impact": "LOW",
        "likelihood": "HIGH",
        "owasp": [
          "A02:2017 - Broken Authentication",
          "A04:2021 - Insecure Design"
        ],
        "references": [
          "https://owasp.org/Top10/A04_2021-Insecure_Design"
        ],
        "source-rule-url": "https://expressjs.com/en/advanced/best-practice-security.html",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "express"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern-inside": "$SESSION = require('cookie-session');\n...\n"
            },
            {
              "pattern-inside": "$SESSION = require('express-session');\n...\n"
            }
          ]
        },
        {
          "pattern": "$SESSION(...)"
        },
        {
          "pattern-not-inside": "$SESSION(<... {cookie:{secure:true}} ...>,...)"
        },
        {
          "pattern-not-inside": "$OPTS = <... {cookie:{secure:true}} ...>;\n...\n$SESSION($OPTS,...);\n"
        },
        {
          "pattern-not-inside": "$OPTS = ...;\n...\n$COOKIE = <... {secure:true} ...>;\n...\n$SESSION($OPTS,...);\n"
        },
        {
          "pattern-not-inside": "$OPTS = ...;\n...\n$OPTS.cookie = <... {secure:true} ...>;\n...\n$SESSION($OPTS,...);\n"
        },
        {
          "pattern-not-inside": "$OPTS = ...;\n...\n$COOKIE.secure = true;\n...\n$SESSION($OPTS,...);\n"
        },
        {
          "pattern-not-inside": "$OPTS = ...;\n...\n$OPTS.cookie.secure = true;\n...\n$SESSION($OPTS,...);\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.express.security.audit.express-cookie-session-no-httponly",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Default session middleware settings: `httpOnly` not set. It ensures the cookie is sent only over HTTP(S), not client JavaScript, helping to protect against cross-site scripting attacks.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-522: Insufficiently Protected Credentials"
        ],
        "cwe2021-top25": true,
        "impact": "LOW",
        "likelihood": "HIGH",
        "owasp": [
          "A02:2017 - Broken Authentication",
          "A04:2021 - Insecure Design"
        ],
        "references": [
          "https://owasp.org/Top10/A04_2021-Insecure_Design"
        ],
        "source-rule-url": "https://expressjs.com/en/advanced/best-practice-security.html",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "express"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern-inside": "$SESSION = require('cookie-session');\n...\n"
            },
            {
              "pattern-inside": "$SESSION = require('express-session');\n...\n"
            }
          ]
        },
        {
          "pattern": "$SESSION(...)"
        },
        {
          "pattern-not-inside": "$SESSION(<... {cookie:{httpOnly:true}} ...>,...)"
        },
        {
          "pattern-not-inside": "$OPTS = <... {cookie:{httpOnly:true}} ...>;\n...\n$SESSION($OPTS,...);\n"
        },
        {
          "pattern-not-inside": "$OPTS = ...;\n...\n$COOKIE = <... {httpOnly:true} ...>;\n...\n$SESSION($OPTS,...);\n"
        },
        {
          "pattern-not-inside": "$OPTS = ...;\n...\n$OPTS.cookie = <... {httpOnly:true} ...>;\n...\n$SESSION($OPTS,...);\n"
        },
        {
          "pattern-not-inside": "$OPTS = ...;\n...\n$COOKIE.httpOnly = true;\n...\n$SESSION($OPTS,...);\n"
        },
        {
          "pattern-not-inside": "$OPTS = ...;\n...\n$OPTS.cookie.httpOnly = true;\n...\n$SESSION($OPTS,...);\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.express.security.audit.express-cookie-session-no-domain",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Default session middleware settings: `domain` not set. It indicates the domain of the cookie; use it to compare against the domain of the server in which the URL is being requested. If they match, then check the path attribute next.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-522: Insufficiently Protected Credentials"
        ],
        "cwe2021-top25": true,
        "impact": "LOW",
        "likelihood": "HIGH",
        "owasp": [
          "A02:2017 - Broken Authentication",
          "A04:2021 - Insecure Design"
        ],
        "references": [
          "https://owasp.org/Top10/A04_2021-Insecure_Design"
        ],
        "source-rule-url": "https://expressjs.com/en/advanced/best-practice-security.html",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "express"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern-inside": "$SESSION = require('cookie-session');\n...\n"
            },
            {
              "pattern-inside": "$SESSION = require('express-session');\n...\n"
            }
          ]
        },
        {
          "pattern": "$SESSION(...)"
        },
        {
          "pattern-not-inside": "$SESSION(<... {cookie:{domain:...}} ...>,...)"
        },
        {
          "pattern-not-inside": "$OPTS = <... {cookie:{domain:...}} ...>;\n...\n$SESSION($OPTS,...);\n"
        },
        {
          "pattern-not-inside": "$OPTS = ...;\n...\n$COOKIE = <... {domain:...} ...>;\n...\n$SESSION($OPTS,...);\n"
        },
        {
          "pattern-not-inside": "$OPTS = ...;\n...\n$OPTS.cookie = <... {domain:...} ...>;\n...\n$SESSION($OPTS,...);\n"
        },
        {
          "pattern-not-inside": "$OPTS = ...;\n...\n$COOKIE.domain = ...;\n...\n$SESSION($OPTS,...);\n"
        },
        {
          "pattern-not-inside": "$OPTS = ...;\n...\n$OPTS.cookie.domain = ...;\n...\n$SESSION($OPTS,...);\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.express.security.audit.express-cookie-session-no-path",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Default session middleware settings: `path` not set. It indicates the path of the cookie; use it to compare against the request path. If this and domain match, then send the cookie in the request.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-522: Insufficiently Protected Credentials"
        ],
        "cwe2021-top25": true,
        "impact": "LOW",
        "likelihood": "HIGH",
        "owasp": [
          "A02:2017 - Broken Authentication",
          "A04:2021 - Insecure Design"
        ],
        "references": [
          "https://owasp.org/Top10/A04_2021-Insecure_Design"
        ],
        "source-rule-url": "https://expressjs.com/en/advanced/best-practice-security.html",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "express"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern-inside": "$SESSION = require('cookie-session');\n...\n"
            },
            {
              "pattern-inside": "$SESSION = require('express-session');\n...\n"
            }
          ]
        },
        {
          "pattern": "$SESSION(...)"
        },
        {
          "pattern-not-inside": "$SESSION(<... {cookie:{path:...}} ...>,...)"
        },
        {
          "pattern-not-inside": "$OPTS = <... {cookie:{path:...}} ...>;\n...\n$SESSION($OPTS,...);\n"
        },
        {
          "pattern-not-inside": "$OPTS = ...;\n...\n$COOKIE = <... {path:...} ...>;\n...\n$SESSION($OPTS,...);\n"
        },
        {
          "pattern-not-inside": "$OPTS = ...;\n...\n$OPTS.cookie = <... {path:...} ...>;\n...\n$SESSION($OPTS,...);\n"
        },
        {
          "pattern-not-inside": "$OPTS = ...;\n...\n$COOKIE.path = ...;\n...\n$SESSION($OPTS,...);\n"
        },
        {
          "pattern-not-inside": "$OPTS = ...;\n...\n$OPTS.cookie.path = ...;\n...\n$SESSION($OPTS,...);\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.express.security.audit.express-cookie-session-no-expires",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Default session middleware settings: `expires` not set. Use it to set expiration date for persistent cookies.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-522: Insufficiently Protected Credentials"
        ],
        "cwe2021-top25": true,
        "impact": "LOW",
        "likelihood": "HIGH",
        "owasp": [
          "A02:2017 - Broken Authentication",
          "A04:2021 - Insecure Design"
        ],
        "references": [
          "https://owasp.org/Top10/A04_2021-Insecure_Design"
        ],
        "source-rule-url": "https://expressjs.com/en/advanced/best-practice-security.html",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "express"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern-inside": "$SESSION = require('cookie-session');\n...\n"
            },
            {
              "pattern-inside": "$SESSION = require('express-session');\n...\n"
            }
          ]
        },
        {
          "pattern": "$SESSION(...)"
        },
        {
          "pattern-not-inside": "$SESSION(<... {cookie:{expires:...}} ...>,...)"
        },
        {
          "pattern-not-inside": "$OPTS = <... {cookie:{expires:...}} ...>;\n...\n$SESSION($OPTS,...);\n"
        },
        {
          "pattern-not-inside": "$OPTS = ...;\n...\n$COOKIE = <... {expires:...} ...>;\n...\n$SESSION($OPTS,...);\n"
        },
        {
          "pattern-not-inside": "$OPTS = ...;\n...\n$OPTS.cookie = <... {expires:...} ...>;\n...\n$SESSION($OPTS,...);\n"
        },
        {
          "pattern-not-inside": "$OPTS = ...;\n...\n$COOKIE.expires = ...;\n...\n$SESSION($OPTS,...);\n"
        },
        {
          "pattern-not-inside": "$OPTS = ...;\n...\n$OPTS.cookie.expires = ...;\n...\n$SESSION($OPTS,...);"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.express.security.audit.unknown-value-in-redirect",
      "languages": [
        "js",
        "ts"
      ],
      "message": "It looks like '$UNK' is read from user input and it is used to as a redirect. Ensure '$UNK' is not externally controlled, otherwise this is an open redirect.",
      "metadata": {
        "asvs": {
          "control_id": "5.5.1 Insecue Redirect",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v51-input-validation",
          "section": "V5 Validation, Sanitization and Encoding",
          "version": "4"
        },
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "express"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern-inside": "$UNK = query.$B;\n...\n"
            },
            {
              "pattern-inside": "$UNK = $A.query.$B;\n...\n"
            },
            {
              "pattern-inside": "$UNK = req.$SOMETHING;\n...\n"
            }
          ]
        },
        {
          "pattern": "$RES.redirect(..., <... $UNK ...>, ...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.express.security.audit.xss.direct-response-write",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "interfile": true,
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "express"
        ],
        "vulnerability_class": [
          "Cross-Site-Scripting (XSS)"
        ]
      },
      "mode": "taint",
      "options": {
        "interfile": true
      },
      "pattern-sanitizers": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "import $S from \"underscore.string\"\n...\n"
                },
                {
                  "pattern-inside": "import * as $S from \"underscore.string\"\n...\n"
                },
                {
                  "pattern-inside": "import $S from \"underscore.string\"\n...\n"
                },
                {
                  "pattern-inside": "$S = require(\"underscore.string\")\n...\n"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$S.escapeHTML(...)"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "import $S from \"dompurify\"\n...\n"
                },
                {
                  "pattern-inside": "import { ..., $S,... } from \"dompurify\"\n...\n"
                },
                {
                  "pattern-inside": "import * as $S from \"dompurify\"\n...\n"
                },
                {
                  "pattern-inside": "$S = require(\"dompurify\")\n...\n"
                },
                {
                  "pattern-inside": "import $S from \"isomorphic-dompurify\"\n...\n"
                },
                {
                  "pattern-inside": "import * as $S from \"isomorphic-dompurify\"\n...\n"
                },
                {
                  "pattern-inside": "$S = require(\"isomorphic-dompurify\")\n...\n"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-inside": "$VALUE = $S(...)\n...\n"
                    },
                    {
                      "pattern": "$VALUE.sanitize(...)"
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "$VALUE = $S.sanitize\n...\n"
                    },
                    {
                      "pattern": "$S(...)"
                    }
                  ]
                },
                {
                  "pattern": "$S.sanitize(...)"
                },
                {
                  "pattern": "$S(...)"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "import $S from 'xss';\n...\n"
                },
                {
                  "pattern-inside": "import * as $S from 'xss';\n...\n"
                },
                {
                  "pattern-inside": "$S = require(\"xss\")\n...\n"
                }
              ]
            },
            {
              "pattern": "$S(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "import $S from 'sanitize-html';\n...\n"
                },
                {
                  "pattern-inside": "import * as $S from \"sanitize-html\";\n...\n"
                },
                {
                  "pattern-inside": "$S = require(\"sanitize-html\")\n...\n"
                }
              ]
            },
            {
              "pattern": "$S(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "$S = new Remarkable()\n...\n"
                }
              ]
            },
            {
              "pattern": "$S.render(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "import $S from 'express-xss-sanitizer';\n...\n"
                },
                {
                  "pattern-inside": "import * as $S from \"express-xss-sanitizer\";\n...\n"
                },
                {
                  "pattern-inside": "const { ..., $S, ... } = require('express-xss-sanitizer');\n...\n"
                },
                {
                  "pattern-inside": "var { ..., $S, ... } = require('express-xss-sanitizer');\n...\n"
                },
                {
                  "pattern-inside": "let { ...,$S,... } = require('express-xss-sanitizer');\n...\n"
                },
                {
                  "pattern-inside": "$S = require(\"express-xss-sanitizer\")\n...\n"
                }
              ]
            },
            {
              "pattern": "$S(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern": "$RES. ... .type('$F'). ... .send(...)"
            },
            {
              "metavariable-regex": {
                "metavariable": "$F",
                "regex": "(?!.*text/html)"
              }
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$X = [...];\n...\n"
            },
            {
              "pattern": "if(<... !$X.includes($SOURCE)...>) {\n    ...\n    return ...\n}\n...\n"
            },
            {
              "pattern": "$SOURCE"
            }
          ]
        }
      ],
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-inside": "function ... (..., $RES,...) {...}"
            },
            {
              "pattern-either": [
                {
                  "pattern": "$RES.write($ARG)"
                },
                {
                  "pattern": "$RES.send($ARG)"
                }
              ]
            },
            {
              "pattern-not": "$RES. ... .set('...'). ... .send($ARG)"
            },
            {
              "pattern-not": "$RES. ... .type('...'). ... .send($ARG)"
            },
            {
              "pattern-not-inside": "$RES.$METHOD({ ... })"
            },
            {
              "focus-metavariable": "$ARG"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "function ... ($REQ, $RES) {...}"
                },
                {
                  "pattern-inside": "function ... ($REQ, $RES, $NEXT) {...}"
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES) {...})"
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "^(get|post|put|head|delete|options)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "pattern-not-inside": "function ... ($REQ, $RES) {\n    ...\n    $RES.$SET('Content-Type', '$TYPE')\n}\n"
            },
            {
              "pattern-not-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES) {\n    ...\n    $RES.$SET('Content-Type', '$TYPE')\n})\n"
            },
            {
              "pattern-not-inside": "function ... ($REQ, $RES, $NEXT) {\n    ...\n    $RES.$SET('Content-Type', '$TYPE')\n}\n"
            },
            {
              "pattern-not-inside": "function ... ($REQ, $RES) {\n    ...\n    $RES.set('$TYPE')\n}\n"
            },
            {
              "pattern-not-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES) {\n    ...\n    $RES.set('$TYPE')\n})\n"
            },
            {
              "pattern-not-inside": "function ... ($REQ, $RES, $NEXT) {\n    ...\n    $RES.set('$TYPE')\n}\n"
            },
            {
              "pattern-either": [
                {
                  "pattern": "$REQ.query"
                },
                {
                  "pattern": "$REQ.body"
                },
                {
                  "pattern": "$REQ.params"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>\n{...}\n"
                },
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response) => {...}\n"
                }
              ]
            },
            {
              "pattern-not-inside": "({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>\n{\n    ...\n    $RES.$SET('Content-Type', '$TYPE')\n}\n"
            },
            {
              "pattern-not-inside": "({ $REQ }: Request,$RES: Response) => {\n    ...\n    $RES.$SET('Content-Type', '$TYPE')\n}\n"
            },
            {
              "pattern-not-inside": "({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>\n{\n    ...\n    $RES.set('$TYPE')\n}\n"
            },
            {
              "focus-metavariable": "$REQ"
            },
            {
              "pattern-either": [
                {
                  "pattern": "params"
                },
                {
                  "pattern": "query"
                },
                {
                  "pattern": "body"
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix-regex": {
        "regex": "<%-(.*?)%>",
        "replacement": "<%=\\1%>"
      },
      "id": "vendored-rules.javascript.express.security.audit.xss.ejs.template-explicit-unescape",
      "languages": [
        "regex"
      ],
      "message": "Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "http://www.managerjs.com/blog/2015/05/will-ejs-escape-save-me-from-xss-sorta/"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "express"
        ]
      },
      "paths": {
        "include": [
          "*.ejs",
          "*.html"
        ]
      },
      "pattern-regex": "<%-((?!include).)*?%>",
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.express.security.audit.xss.ejs.var-in-href",
      "languages": [
        "regex"
      ],
      "message": "Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/<%= link %>'. You may also consider setting the Content Security Policy (CSP) header.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI",
          "https://github.com/pugjs/pug/issues/2952"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "express"
        ]
      },
      "paths": {
        "include": [
          "*.ejs",
          "*.html"
        ]
      },
      "pattern-regex": "<a.*href\\s*=[^>]*?[^\\/&=]<%.*?%>.*?>",
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.express.security.audit.xss.ejs.var-in-script-src",
      "languages": [
        "generic"
      ],
      "message": "Detected a template variable used as the 'src' in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent malicious URLs from being injected and could results in a cross-site scripting (XSS) vulnerability. Prefer not to dynamically generate the 'src' attribute and use static URLs instead. If you must do this, carefully check URLs against an allowlist and be sure to URL-encode the result.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough",
          "https://github.com/ESAPI/owasp-esapi-js"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "express"
        ]
      },
      "paths": {
        "include": [
          "*.ejs",
          "*.html"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "<script ...>"
        },
        {
          "pattern-either": [
            {
              "pattern-inside": "src = '...'"
            },
            {
              "pattern-inside": "src = \"...\""
            }
          ]
        },
        {
          "pattern": "<% ... >"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.express.security.audit.xss.ejs.var-in-script-tag",
      "languages": [
        "generic"
      ],
      "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough",
          "https://github.com/ESAPI/owasp-esapi-js"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "express"
        ]
      },
      "paths": {
        "include": [
          "*.ejs",
          "*.html"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "<script ...> ... </script>"
        },
        {
          "pattern-not-inside": "<script ... $ATTR = \"...\" ...>"
        },
        {
          "pattern-not-inside": "<script ... $ATTR = '...' ...>"
        },
        {
          "pattern": "<% ... >"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.express.security.audit.xss.mustache.escape-function-overwrite",
      "languages": [
        "js",
        "ts"
      ],
      "message": "The Mustache escape function is being overwritten. This could bypass HTML escaping safety measures built into the rendering engine, exposing your application to cross-site scripting (XSS) vulnerabilities. If you need unescaped HTML, use the triple brace operator in your template: '{{{ ... }}}'.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://github.com/janl/mustache.js/#variables"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "express"
        ]
      },
      "pattern-either": [
        {
          "pattern": "Mustache.escape = ..."
        },
        {
          "patterns": [
            {
              "pattern-inside": "$MUSTACHE = require(\"mustache\");\n...\n"
            },
            {
              "pattern": "$MUSTACHE.escape = ..."
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.express.security.audit.xss.mustache.template-explicit-unescape",
      "languages": [
        "regex"
      ],
      "message": "Detected an explicit unescape in a Mustache template, using triple braces '{{{...}}}' or ampersand '&'. If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. If you must do this, ensure no external data can reach this location.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://github.com/janl/mustache.js/#variables",
          "https://ractive.js.org/v0.x/0.7/mustaches#variables"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "express"
        ]
      },
      "paths": {
        "include": [
          "*.mustache",
          "*.hbs",
          "*.html"
        ]
      },
      "pattern-either": [
        {
          "pattern-regex": "{{{((?!include).)*?}}}"
        },
        {
          "pattern-regex": "{{[\\\\s]*&.*}}"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.express.security.audit.xss.mustache.var-in-script-tag",
      "languages": [
        "generic"
      ],
      "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough",
          "https://github.com/ESAPI/owasp-esapi-js"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "express"
        ]
      },
      "paths": {
        "include": [
          "*.mustache",
          "*.hbs",
          "*.html"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "<script ...> ... </script>"
        },
        {
          "pattern": "{{ ... }}"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.express.security.audit.xss.pug.template-and-attributes",
      "languages": [
        "regex"
      ],
      "message": "Detected a unescaped variables using '&attributes'. If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. If you must do this, ensure no external data can reach this location.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://pugjs.org/language/attributes.html#attributes"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "express"
        ]
      },
      "paths": {
        "include": [
          "*.pug"
        ]
      },
      "pattern-regex": ".*&attributes.*",
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.express.security.audit.xss.pug.template-explicit-unescape",
      "languages": [
        "regex"
      ],
      "message": "Detected an explicit unescape in a Pug template, using either '!=' or '!{...}'. If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. If you must do this, ensure no external data can reach this location.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://pugjs.org/language/code.html#unescaped-buffered-code",
          "https://pugjs.org/language/attributes.html#unescaped-attributes"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "express"
        ]
      },
      "paths": {
        "include": [
          "*.pug"
        ]
      },
      "pattern-either": [
        {
          "pattern-regex": "\\w.*(!=)[^=].*"
        },
        {
          "pattern-regex": "!{.*?}"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.express.security.audit.xss.pug.var-in-href",
      "languages": [
        "regex"
      ],
      "message": "Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: a(href='/'+url). You may also consider setting the Content Security Policy (CSP) header.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://github.com/pugjs/pug/issues/2952",
          "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "express"
        ]
      },
      "paths": {
        "include": [
          "*.pug"
        ]
      },
      "pattern-regex": "a\\(.*href=[^'\"].*\\)",
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.express.security.audit.xss.pug.var-in-script-tag",
      "languages": [
        "regex"
      ],
      "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough",
          "https://github.com/ESAPI/owasp-esapi-js"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "express"
        ]
      },
      "paths": {
        "include": [
          "*.pug"
        ]
      },
      "pattern-either": [
        {
          "pattern-regex": "script\\s*=[A-Za-z0-9]+"
        },
        {
          "pattern-regex": "script\\s*=.*[\"']\\s*\\+.*"
        },
        {
          "pattern-regex": "script\\s*=[^'\"]+\\+.*"
        },
        {
          "pattern-regex": "script\\(.*?\\)\\s*=\\s*[A-Za-z0-9]+"
        },
        {
          "pattern-regex": "script\\(.*?\\)\\s*=\\s*.*[\"']\\s*\\+.*"
        },
        {
          "pattern-regex": "script\\(.*?\\)\\s*=\\s*[^'\"]+\\+.*"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.express.security.injection.raw-html-format",
      "languages": [
        "js",
        "ts"
      ],
      "message": "User data flows into the host portion of this manually-constructed HTML. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. Consider using a sanitization library such as DOMPurify to sanitize the HTML within.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "HIGH",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "express"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "\"$HTMLSTR\" + $EXPR"
                        },
                        {
                          "pattern": "\"$HTMLSTR\".concat(...)"
                        },
                        {
                          "pattern": "util.format($HTMLSTR, ...)"
                        }
                      ]
                    },
                    {
                      "metavariable-pattern": {
                        "language": "generic",
                        "metavariable": "$HTMLSTR",
                        "pattern": "<$TAG ..."
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern": "`...`\n"
                    },
                    {
                      "pattern-regex": ".*<\\w+.*\n"
                    }
                  ]
                }
              ]
            }
          ],
          "requires": "(EXPRESS and not CLEAN) or (EXPRESSTS and not CLEAN)"
        }
      ],
      "pattern-sources": [
        {
          "label": "EXPRESS",
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "function ... ($REQ, $RES) {...}"
                },
                {
                  "pattern-inside": "function ... ($REQ, $RES, $NEXT) {...}"
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES) {...})"
                        },
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})"
                        }
                      ]
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "^(get|post|put|head|delete|options)$"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$REQ.query"
                },
                {
                  "pattern": "$REQ.body"
                },
                {
                  "pattern": "$REQ.params"
                },
                {
                  "pattern": "$REQ.cookies"
                },
                {
                  "pattern": "$REQ.headers"
                }
              ]
            }
          ]
        },
        {
          "label": "EXPRESSTS",
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>\n{...}\n"
                },
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response) => {...}\n"
                }
              ]
            },
            {
              "focus-metavariable": "$REQ"
            },
            {
              "pattern-either": [
                {
                  "pattern": "params"
                },
                {
                  "pattern": "query"
                },
                {
                  "pattern": "cookies"
                },
                {
                  "pattern": "headers"
                },
                {
                  "pattern": "body"
                }
              ]
            }
          ]
        },
        {
          "by-side-effect": true,
          "label": "CLEAN",
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "$A($SOURCE)"
                },
                {
                  "pattern": "$SANITIZE. ... .$A($SOURCE)"
                },
                {
                  "pattern": "$A. ... .$SANITIZE($SOURCE)"
                }
              ]
            },
            {
              "focus-metavariable": "$SOURCE"
            },
            {
              "metavariable-regex": {
                "metavariable": "$A",
                "regex": "(?i)(.*valid|.*sanitiz)"
              }
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.express.security.injection.tainted-sql-string",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/SQL_Injection"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "express"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "\"$SQLSTR\" + $EXPR\n"
                        },
                        {
                          "pattern-inside": "\"$SQLSTR\".concat($EXPR)\n"
                        },
                        {
                          "pattern": "util.format($SQLSTR, $EXPR)"
                        },
                        {
                          "pattern": "`$SQLSTR${$EXPR}...`\n"
                        }
                      ]
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$SQLSTR",
                        "regex": ".*\\b(?i)(select|delete|insert|create|update\\s+.+\\sset|alter|drop)\\b.*"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "focus-metavariable": "$EXPR"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "function ... (...,$REQ, ...) {...}"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$REQ.query"
                },
                {
                  "pattern": "$REQ.body"
                },
                {
                  "pattern": "$REQ.params"
                },
                {
                  "pattern": "$REQ.cookies"
                },
                {
                  "pattern": "$REQ.headers"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "(...,{ $REQ }: Request,...) => {...}\n"
                },
                {
                  "pattern-inside": "(...,{ $REQ }: $EXPRESS.Request,...) => {...}\n"
                }
              ]
            },
            {
              "focus-metavariable": "$REQ"
            },
            {
              "pattern-either": [
                {
                  "pattern": "params"
                },
                {
                  "pattern": "query"
                },
                {
                  "pattern": "cookies"
                },
                {
                  "pattern": "headers"
                },
                {
                  "pattern": "body"
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.javascript.fbjs.security.audit.insecure-createnodesfrommarkup",
      "languages": [
        "js",
        "ts"
      ],
      "message": "User controlled data in a `createNodesFromMarkup` is an anti-pattern that can lead to XSS vulnerabilities",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "fbjs"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "createNodesFromMarkup(...)"
            },
            {
              "pattern": "$X.createNodesFromMarkup(...)"
            }
          ]
        },
        {
          "pattern-not": "createNodesFromMarkup(\"...\",...)"
        },
        {
          "pattern-not": "$X.createNodesFromMarkup(\"...\",...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.grpc.security.grpc-nodejs-insecure-connection",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Found an insecure gRPC connection. This creates a connection without encryption to a gRPC client/server. A malicious attacker could tamper with the gRPC message, which could compromise the machine.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-502: Deserialization of Untrusted Data"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A08:2017 - Insecure Deserialization",
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://blog.gopheracademy.com/advent-2017/go-grpc-beyond-basics/#:~:text=disables%20transport%20security"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "grpc"
        ]
      },
      "pattern-either": [
        {
          "pattern": "require('grpc');\n...\n$GRPC($ADDR,...,$CREDENTIALS.createInsecure(),...);\n"
        },
        {
          "pattern": "require('grpc');\n...\nnew $GRPC($ADDR,...,$CREDENTIALS.createInsecure(),...);\n"
        },
        {
          "pattern": "require('grpc');\n...\n$CREDS = <... $CREDENTIALS.createInsecure() ...>;\n...\n$GRPC($ADDR,...,$CREDS,...);"
        },
        {
          "pattern": "require('grpc');\n...\n$CREDS = <... $CREDENTIALS.createInsecure() ...>;\n...\nnew $GRPC($ADDR,...,$CREDS,...);"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.javascript.intercom.security.audit.intercom-settings-user-identifier-without-user-hash",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Found an initialization of the Intercom Messenger that identifies a User, but does not specify a `user_hash`. This configuration allows users to impersonate one another. See the Intercom Identity Verification docs for more context https://www.intercom.com/help/en/articles/183-set-up-identity-verification-for-web-and-mobile",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-287: Improper Authentication"
        ],
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "references": [
          "https://www.intercom.com/help/en/articles/183-set-up-identity-verification-for-web-and-mobile"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "intercom"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "window.intercomSettings = {..., email: $EMAIL, ...};\n"
            },
            {
              "pattern": "window.intercomSettings = {..., user_id: $USER_ID, ...};\n"
            },
            {
              "pattern": "Intercom('boot', {..., email: $EMAIL, ...});\n"
            },
            {
              "pattern": "Intercom('boot', {..., user_id: $USER_ID, ...});\n"
            },
            {
              "pattern": "$VAR = {..., email: $EMAIL, ...};\n...\nIntercom('boot', $VAR);\n"
            },
            {
              "pattern": "$VAR = {..., user_id: $EMAIL, ...};\n...\nIntercom('boot', $VAR);\n"
            }
          ]
        },
        {
          "pattern-not": "window.intercomSettings = {..., user_hash: $USER_HASH, ...};\n"
        },
        {
          "pattern-not": "Intercom('boot', {..., user_hash: $USER_HASH, ...});\n"
        },
        {
          "pattern-not": "$VAR = {..., user_hash: $USER_HASH, ...};\n...\nIntercom('boot', $VAR);\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.jose.security.jwt-none-alg",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.",
      "metadata": {
        "asvs": {
          "control_id": "3.5.3 Insecue Stateless Session Tokens",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management",
          "section": "V3: Session Management Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "MEDIUM",
        "likelihood": "HIGH",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A02_2021-Cryptographic_Failures"
        ],
        "source-rule-url": "https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "jose",
          "jwt"
        ]
      },
      "pattern-either": [
        {
          "pattern": "var $JOSE = require(\"jose\");\n...\nvar { JWK, JWT } = $JOSE;\n...\nvar $T = JWT.verify($P, JWK.None,...);\n"
        },
        {
          "pattern": "var $JOSE = require(\"jose\");\n...\nvar { JWK, JWT } = $JOSE;\n...\n$T = JWT.verify($P, JWK.None,...);\n"
        },
        {
          "pattern": "var $JOSE = require(\"jose\");\n...\nvar { JWK, JWT } = $JOSE;\n...\nJWT.verify($P, JWK.None,...);\n"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.javascript.jose.security.hardcoded-jwt-secret",
      "languages": [
        "js",
        "ts"
      ],
      "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",
      "metadata": {
        "asvs": {
          "control_id": "3.5.2 Static API keys or secret",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management",
          "section": "V3: Session Management Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "interfile": true,
        "likelihood": "HIGH",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "jose",
          "jwt",
          "secrets"
        ]
      },
      "options": {
        "interfile": true,
        "symbolic_propagation": true
      },
      "patterns": [
        {
          "pattern-inside": "$JOSE = require(\"jose\");\n...\n"
        },
        {
          "pattern-either": [
            {
              "pattern-inside": "var {JWT} = $JOSE;\n...\n"
            },
            {
              "pattern-inside": "var {JWK, JWT} = $JOSE;\n...\n"
            },
            {
              "pattern-inside": "const {JWT} = $JOSE;\n...\n"
            },
            {
              "pattern-inside": "const {JWK, JWT} = $JOSE;\n...\n"
            },
            {
              "pattern-inside": "let {JWT} = $JOSE;\n...\n"
            },
            {
              "pattern-inside": "let {JWK, JWT} = $JOSE;\n...\n"
            }
          ]
        },
        {
          "pattern-either": [
            {
              "pattern": "JWT.verify($P, \"...\", ...);\n"
            },
            {
              "pattern": "JWT.sign($P, \"...\", ...);\n"
            },
            {
              "pattern": "JWT.verify($P, JWK.asKey(\"...\"), ...);     \n"
            },
            {
              "pattern": "$JWT.sign($P, JWK.asKey(\"...\"), ...);\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.jose.security.audit.jose-exposed-data",
      "languages": [
        "js",
        "ts"
      ],
      "message": "The object is passed strictly to jose.JWT.sign(...) Make sure that sensitive information is not exposed through JWT token payload.",
      "metadata": {
        "asvs": {
          "control_id": "3.5.2 Static API keys or secret",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management",
          "section": "V3: Session Management Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-522: Insufficiently Protected Credentials"
        ],
        "cwe2021-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A02:2017 - Broken Authentication",
          "A04:2021 - Insecure Design"
        ],
        "references": [
          "https://owasp.org/Top10/A04_2021-Insecure_Design"
        ],
        "source-rule-url": "https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "jose",
          "jwt"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "require('jose');\n...\n"
        },
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern-inside": "function (...,$INPUT,...) {...}"
                },
                {
                  "pattern-either": [
                    {
                      "pattern": "$JOSE.JWT.sign($INPUT,...)"
                    },
                    {
                      "pattern": "$JWT.sign($INPUT,...)"
                    }
                  ]
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern-inside": "function $F(...,$INPUT,...) {...}"
                },
                {
                  "pattern-either": [
                    {
                      "pattern": "$JOSE.JWT.sign($INPUT,...)"
                    },
                    {
                      "pattern": "$JWT.sign($INPUT,...)"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.jquery.security.audit.jquery-insecure-method",
      "languages": [
        "js",
        "ts"
      ],
      "message": "User controlled data in a jQuery's `.$METHOD(...)` is an anti-pattern that can lead to XSS vulnerabilities",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/xss/",
          "https://bugs.jquery.com/ticket/9521"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "jquery"
        ]
      },
      "options": {
        "symbolic_propagation": true
      },
      "pattern-either": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "$.$METHOD($VAR,...)"
                },
                {
                  "pattern": "$(...).$METHOD($VAR,...)"
                },
                {
                  "pattern": "jQuery.$METHOD($VAR,...)"
                },
                {
                  "pattern": "jQuery(...).$METHOD($VAR,...)"
                }
              ]
            },
            {
              "pattern-not": "$.$METHOD(\"...\",...)"
            },
            {
              "pattern-not": "$(...).$METHOD(\"...\",...)"
            },
            {
              "pattern-not": "jQuery.$METHOD(\"...\",...)"
            },
            {
              "pattern-not": "jQuery(...).$METHOD(\"...\",...)"
            },
            {
              "metavariable-regex": {
                "metavariable": "$METHOD",
                "regex": "^(html|append|prepend|wrap|wrapInner|wrapAll|before|after|globalEval|getScript)$"
              }
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "$(...).$METHOD($VAR,...)"
                },
                {
                  "pattern": "jQuery(...).$METHOD($VAR,...)"
                }
              ]
            },
            {
              "pattern-not": "$(\"...\",...).$METHOD(...)"
            },
            {
              "pattern-not": "jQuery(\"...\",...).$METHOD(...)"
            },
            {
              "metavariable-regex": {
                "metavariable": "$METHOD",
                "regex": "^(appendTo|insertAfter|insertBefore|prependTo)$"
              }
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector",
      "languages": [
        "js",
        "ts"
      ],
      "message": "User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/xss/",
          "https://bugs.jquery.com/ticket/9521"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "jquery"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "$(<... window ...>)\n"
            },
            {
              "pattern": "$(<... location ...>)\n"
            },
            {
              "patterns": [
                {
                  "pattern": "$X = <... window ...>;\n...\n$(<... $X ...>);\n"
                },
                {
                  "focus-metavariable": "$X"
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern": "$X = <... location ...>;\n...\n$(<... $X ...>);\n"
                },
                {
                  "focus-metavariable": "$X"
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern-either": [
                    {
                      "pattern-inside": "function $FUNC(..., $Y, ...) {\n  ...\n}\n"
                    },
                    {
                      "pattern-inside": "function (..., $Y, ...) {\n  ...\n}\n"
                    },
                    {
                      "pattern-inside": "function $FUNC(...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n"
                    },
                    {
                      "pattern-inside": "function (...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n"
                    }
                  ]
                },
                {
                  "pattern-either": [
                    {
                      "pattern": "$(<... $Y ...>)\n"
                    },
                    {
                      "pattern": "$(\"...\" + (<... $Y ...>))\n"
                    },
                    {
                      "pattern": "$((<... $Y ...>) + \"...\")\n"
                    }
                  ]
                },
                {
                  "pattern-not-inside": "$JQUERY.each(function($INDEX, $Y) {\n  ...\n})\n"
                },
                {
                  "focus-metavariable": "$Y"
                }
              ]
            }
          ]
        },
        {
          "pattern-not": "$(window)\n"
        },
        {
          "pattern-not": "$(document)\n"
        },
        {
          "pattern-not": "$(this)\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.jquery.security.audit.prohibit-jquery-html",
      "languages": [
        "js",
        "ts"
      ],
      "message": "JQuery's `html` function is susceptible to Cross Site Scripting (XSS) attacks. If you're just passing text, consider `text` instead. Otherwise, use a function that escapes HTML such as edX's `HtmlUtils.setHtml()`.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "help": "## Remediation\nAvoid using JQuery's html() function. If the string is plain text, use the text() function instead.\nOtherwise, use a function that escapes html such as edx's HtmlUtils.setHtml().\n",
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "precision": "high",
        "references": [
          "https://edx.readthedocs.io/projects/edx-developer-guide/en/latest/preventing_xss/preventing_xss.html#javascript-concat-html",
          "https://stackoverflow.com/questions/8318581/html-vs-innerhtml-jquery-javascript-xss-attacks",
          "https://api.jquery.com/text/#text-text"
        ],
        "shortDesription": "Use of JQuery's unsafe html() function.",
        "subcategory": [
          "audit"
        ],
        "tags": [
          "security"
        ],
        "technology": [
          "jquery"
        ]
      },
      "patterns": [
        {
          "pattern": "$X.html(...)\n"
        },
        {
          "pattern-not": "$X.html(\"...\",...)\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.jsonwebtoken.security.jwt-none-alg",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.",
      "metadata": {
        "asvs": {
          "control_id": "3.5.3 Insecue Stateless Session Tokens",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management",
          "section": "V3: Session Management Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A02_2021-Cryptographic_Failures"
        ],
        "source-rule-url": "https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "jwt"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "$JWT = require(\"jsonwebtoken\");\n...\n"
        },
        {
          "pattern": "$JWT.verify($P, $X, {algorithms:[...,'none',...]},...)"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.javascript.jsonwebtoken.security.hardcoded-jwt-secret",
      "languages": [
        "js",
        "ts"
      ],
      "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",
      "metadata": {
        "asvs": {
          "control_id": "3.5.2 Static API keys or secret",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management",
          "section": "V3: Session Management Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "HIGH",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "jwt",
          "javascript",
          "secrets"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "$JWT = require(\"jsonwebtoken\")\n...\n"
                },
                {
                  "pattern-inside": "import $JWT from \"jsonwebtoken\"\n...\n"
                },
                {
                  "pattern-inside": "import * as $JWT from \"jsonwebtoken\"\n...\n"
                },
                {
                  "pattern-inside": "import {...,$JWT,...} from \"jsonwebtoken\"\n...\n"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "$JWT.sign($DATA,$VALUE,...);\n"
                },
                {
                  "pattern-inside": "$JWT.verify($DATA,$VALUE,...);\n"
                }
              ]
            },
            {
              "focus-metavariable": "$VALUE"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "$X = '...' \n"
            },
            {
              "pattern": "$X = '$Y' \n"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "$JWT.sign($DATA,\"...\",...);\n"
                },
                {
                  "pattern-inside": "$JWT.verify($DATA,\"...\",...);\n"
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.jsonwebtoken.security.audit.jwt-decode-without-verify",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detected the decoding of a JWT token without a verify step. JWT tokens must be verified before use, otherwise the token's integrity is unknown. This means a malicious actor could forge a JWT token with any claims. Call '.verify()' before using the token.",
      "metadata": {
        "asvs": {
          "control_id": "3.5.3 Insecue Stateless Session Tokens",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management",
          "section": "V3: Session Management Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-345: Insufficient Verification of Data Authenticity"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
        ],
        "source-rule-url": "https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "jwt"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "$JWT = require('jsonwebtoken');\n...\n"
        },
        {
          "pattern-not-inside": "...\n$JWT.verify($TOKEN, ...)\n...\n"
        },
        {
          "pattern-not-inside": "...\nif (<... $JWT.verify($TOKEN, ...) ...>) { ... }\n...\n"
        },
        {
          "pattern": "$JWT.decode($TOKEN, ...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.jsonwebtoken.security.audit.jwt-exposed-data",
      "languages": [
        "js",
        "ts"
      ],
      "message": "The object is passed strictly to jsonwebtoken.sign(...) Make sure that sensitive information is not exposed through JWT token payload.",
      "metadata": {
        "asvs": {
          "control_id": "3.5.3 Insecue Stateless Session Tokens",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management",
          "section": "V3: Session Management Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-522: Insufficiently Protected Credentials"
        ],
        "cwe2021-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A02:2017 - Broken Authentication",
          "A04:2021 - Insecure Design"
        ],
        "references": [
          "https://owasp.org/Top10/A04_2021-Insecure_Design"
        ],
        "source-rule-url": "https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "jwt"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "$JWT = require('jsonwebtoken');\n...\n"
        },
        {
          "pattern-either": [
            {
              "pattern-inside": "function (...,$INPUT,...) {...}"
            },
            {
              "pattern-inside": "function $F(...,$INPUT,...) {...}"
            }
          ]
        },
        {
          "pattern": "$JWT.sign($INPUT,...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.jwt-simple.security.jwt-simple-noverify",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detected the decoding of a JWT token without a verify step. JWT tokens must be verified before use, otherwise the token's integrity is unknown. This means a malicious actor could forge a JWT token with any claims. Set 'verify' to `true` before using the token.",
      "metadata": {
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-287: Improper Authentication",
          "CWE-345: Insufficient Verification of Data Authenticity",
          "CWE-347: Improper Verification of Cryptographic Signature"
        ],
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "owasp": [
          "A05:2021 - Security Misconfiguration",
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://www.npmjs.com/package/jwt-simple",
          "https://cwe.mitre.org/data/definitions/287",
          "https://cwe.mitre.org/data/definitions/345",
          "https://cwe.mitre.org/data/definitions/347"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "jwt-simple",
          "jwt"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "$JWT = require('jwt-simple');\n...\n"
        },
        {
          "pattern": "$JWT.decode($TOKEN, $SECRET, $NOVERIFY, ...)"
        },
        {
          "metavariable-pattern": {
            "metavariable": "$NOVERIFY",
            "patterns": [
              {
                "pattern-either": [
                  {
                    "pattern": "true\n"
                  },
                  {
                    "pattern": "\"...\"\n"
                  }
                ]
              }
            ]
          }
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.javascript.lang.security.detect-buffer-noassert",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detected usage of noassert in Buffer API, which allows the offset the be beyond the end of the buffer. This could result in writing or reading beyond the end of the buffer.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "LOW",
        "references": [
          "https://cwe.mitre.org/data/definitions/119.html"
        ],
        "source-rule-url": "https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-buffer-noassert.js",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "javascript"
        ]
      },
      "patterns": [
        {
          "pattern": "$OBJ.$API(..., true)"
        },
        {
          "metavariable-regex": {
            "metavariable": "$API",
            "regex": "(read|write)(U?Int8|(U?Int(16|32)|Float|Double)(LE|BE))"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.lang.security.detect-child-process",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detected calls to child_process from a function argument `$FUNC`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
        ],
        "source-rule-url": "https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-child-process.js",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "javascript"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "$CP = require('child_process')\n...\n"
                },
                {
                  "pattern-inside": "import * as $CP from 'child_process'\n...\n"
                },
                {
                  "pattern-inside": "import $CP from 'child_process'\n...\n"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$CP.exec($CMD,...)"
                },
                {
                  "pattern": "$CP.execSync($CMD,...)"
                },
                {
                  "pattern": "$CP.spawn($CMD,...)"
                },
                {
                  "pattern": "$CP.spawnSync($CMD,...)"
                }
              ]
            },
            {
              "pattern-not-inside": "$CP.$EXEC(\"...\",...)"
            },
            {
              "pattern-not-inside": "$CP.$EXEC([\"...\",...],...)"
            },
            {
              "pattern-not-inside": "$CMD = \"...\"\n...\n"
            },
            {
              "pattern-not-inside": "$CMD = [\"...\",...]\n...\n"
            },
            {
              "focus-metavariable": "$CMD"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "child_process.exec($CMD,...)"
                },
                {
                  "pattern": "child_process.execSync($CMD,...)"
                },
                {
                  "pattern": "child_process.spawn($CMD,...)"
                },
                {
                  "pattern": "child_process.spawnSync($CMD,...)"
                }
              ]
            },
            {
              "pattern-not-inside": "child_process.$EXEC(\"...\",...)"
            },
            {
              "pattern-not-inside": "child_process.$EXEC([\"...\",...],...)"
            },
            {
              "pattern-not-inside": "$CMD = \"...\"\n...\n"
            },
            {
              "pattern-not-inside": "$CMD = [\"...\",...]\n...\n"
            },
            {
              "focus-metavariable": "$CMD"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-inside": "function ... (...,$FUNC,...) {\n  ...\n}\n"
            },
            {
              "focus-metavariable": "$FUNC"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.javascript.lang.security.detect-disable-mustache-escape",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Markup escaping disabled. This can be used with some template engines to escape disabling of HTML entities, which can lead to XSS attacks.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-116: Improper Encoding or Escaping of Output"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "source-rule-url": "https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-disable-mustache-escape.js",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "mustache"
        ]
      },
      "pattern": "$OBJ.escapeMarkup = false",
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.lang.security.detect-eval-with-expression",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detected use of dynamic execution of JavaScript which may come from user-input, which can lead to Cross-Site-Scripting (XSS). Where possible avoid including user-input in functions which dynamically execute user-input.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
        ],
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!"
        ],
        "source-rule-url": "https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-eval-with-expression.js",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "javascript"
        ]
      },
      "mode": "taint",
      "pattern-sanitizers": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "location.href = $FUNC(...)"
                },
                {
                  "pattern": "location.hash = $FUNC(...)"
                },
                {
                  "pattern": "location.search = $FUNC(...)"
                },
                {
                  "pattern": "$WINDOW. ... .location.href = $FUNC(...)"
                },
                {
                  "pattern": "$WINDOW. ... .location.hash = $FUNC(...)"
                },
                {
                  "pattern": "$WINDOW. ... .location.search = $FUNC(...)"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "eval(<... $SINK ...>)"
                },
                {
                  "pattern": "window.eval(<... $SINK ...>)"
                },
                {
                  "pattern": "new Function(<... $SINK ...>)"
                },
                {
                  "pattern": "new Function(<... $SINK ...>)(...)"
                },
                {
                  "pattern": "setTimeout(<... $SINK ...>,...)"
                },
                {
                  "pattern": "setInterval(<... $SINK ...>,...)"
                }
              ]
            },
            {
              "focus-metavariable": "$SINK"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "$PROP = new URLSearchParams($WINDOW. ... .location.search).get('...')\n  ...\n"
                },
                {
                  "pattern-inside": "$PROP = new URLSearchParams(location.search).get('...')\n  ...\n"
                },
                {
                  "pattern-inside": "$PROP = new URLSearchParams($WINDOW. ... .location.hash.substring(1)).get('...')\n  ...\n"
                },
                {
                  "pattern-inside": "$PROP = new URLSearchParams(location.hash.substring(1)).get('...')\n  ...\n"
                }
              ]
            },
            {
              "focus-metavariable": "$PROP"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "$PROPS = new URLSearchParams($WINDOW. ... .location.search)\n  ...\n"
                },
                {
                  "pattern-inside": "$PROPS = new URLSearchParams(location.search)\n  ...\n"
                },
                {
                  "pattern-inside": "$PROPS = new\nURLSearchParams($WINDOW. ... .location.hash.substring(1))\n  ...\n"
                },
                {
                  "pattern-inside": "$PROPS = new URLSearchParams(location.hash.substring(1))\n...\n"
                }
              ]
            },
            {
              "pattern": "$PROPS.get('...')"
            },
            {
              "focus-metavariable": "$PROPS"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "location.href"
                },
                {
                  "pattern": "location.hash"
                },
                {
                  "pattern": "location.search"
                },
                {
                  "pattern": "$WINDOW. ... .location.href"
                },
                {
                  "pattern": "$WINDOW. ... .location.hash"
                },
                {
                  "pattern": "$WINDOW. ... .location.search"
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.lang.security.detect-insecure-websocket",
      "languages": [
        "regex"
      ],
      "message": "Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.",
      "metadata": {
        "asvs": {
          "control_id": "13.5.1 Insecure WebSocket",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x21-V13-API.md#v135-websocket-security-requirements",
          "section": "V13: API and Web Service Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-319: Cleartext Transmission of Sensitive Information"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A02_2021-Cryptographic_Failures"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "regex"
        ]
      },
      "patterns": [
        {
          "pattern-regex": "\\bws:\\/\\/"
        },
        {
          "pattern-not-inside": "\\bws:\\/\\/localhost.*"
        },
        {
          "pattern-not-inside": "\\bws:\\/\\/127.0.0.1.*"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.javascript.lang.security.detect-no-csrf-before-method-override",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detected use of express.csrf() middleware before express.methodOverride(). This can allow GET requests (which are not checked by csrf) to turn into POST requests later.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-352: Cross-Site Request Forgery (CSRF)"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A01:2021 - Broken Access Control",
          "A05:2017 - Broken Access Control"
        ],
        "references": [
          "https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/bypass-connect-csrf-protection-by-abusing.md"
        ],
        "source-rule-url": "https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-no-csrf-before-method-override.js",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "javascript"
        ]
      },
      "pattern": "express.csrf();\n...\nexpress.methodOverride();\n",
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.lang.security.detect-pseudoRandomBytes",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detected usage of crypto.pseudoRandomBytes, which does not produce secure random numbers.",
      "metadata": {
        "asvs": {
          "control_id": "6.3.1 Insecure Randomness",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v63-random-values",
          "section": "V6: Stored Cryptography Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A02_2021-Cryptographic_Failures"
        ],
        "source-rule-url": "https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-pseudoRandomBytes.js",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "javascript"
        ]
      },
      "pattern": "crypto.pseudoRandomBytes",
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.lang.security.html-in-template-string",
      "languages": [
        "js",
        "ts"
      ],
      "message": "This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS).",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-116: Improper Encoding or Escaping of Output"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "javascript"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "`$HTML${$VAR}...`\n"
            },
            {
              "pattern": "`...${$VAR}$HTML`\n"
            }
          ]
        },
        {
          "metavariable-regex": {
            "metavariable": "$HTML",
            "regex": ".*</?[a-zA-Z]"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.lang.security.insecure-object-assign",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Depending on the context, user control data in `Object.assign` can cause web response to include data that it should not have or can lead to a mass assignment vulnerability.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html",
          "https://en.wikipedia.org/wiki/Mass_assignment_vulnerability"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "javascript"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "pattern": "Object.assign(...)"
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "JSON.parse(...)"
            },
            {
              "pattern-not": "JSON.parse(\"...\",...)"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.lang.security.spawn-git-clone",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Git allows shell commands to be specified in ext URLs for remote repositories. For example, git clone 'ext::sh -c whoami% >&2' will execute the whoami command to try to connect to a remote repository. Make sure that the URL is not controlled by external input.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "git"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "spawn('git', ['clone',...,$F])"
            },
            {
              "pattern": "$X.spawn('git', ['clone',...,$F])"
            },
            {
              "pattern": "spawn('git', ['clone',...,$P,$F])"
            },
            {
              "pattern": "$X.spawn('git', ['clone',...,$P,$F])"
            }
          ]
        },
        {
          "pattern-not": "spawn('git', ['clone',...,\"...\"])"
        },
        {
          "pattern-not": "$X.spawn('git', ['clone',...,\"...\"])"
        },
        {
          "pattern-not": "spawn('git', ['clone',...,\"...\",\"...\"])"
        },
        {
          "pattern-not": "$X.spawn('git', ['clone',...,\"...\",\"...\"])"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.javascript.lang.security.audit.code-string-concat",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Found data from an Express or Next web request flowing to `eval`. If this data is user-controllable this can lead to execution of arbitrary system commands in the context of your application process. Avoid `eval` whenever possible.",
      "metadata": {
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
        ],
        "impact": "MEDIUM",
        "interfile": true,
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval",
          "https://nodejs.org/api/child_process.html#child_processexeccommand-options-callback",
          "https://www.stackhawk.com/blog/nodejs-command-injection-examples-and-prevention/",
          "https://ckarande.gitbooks.io/owasp-nodegoat-tutorial/content/tutorial/a1_-_server_side_js_injection.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "node.js",
          "Express",
          "Next.js"
        ]
      },
      "mode": "taint",
      "options": {
        "interfile": true
      },
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern": "eval(...)\n"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern-either": [
                    {
                      "pattern-inside": "function ... ($REQ, $RES) {...}"
                    },
                    {
                      "pattern-inside": "function ... ($REQ, $RES, $NEXT) {...}"
                    },
                    {
                      "patterns": [
                        {
                          "pattern-either": [
                            {
                              "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES) {...})"
                            },
                            {
                              "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})"
                            }
                          ]
                        },
                        {
                          "metavariable-regex": {
                            "metavariable": "$METHOD",
                            "regex": "^(get|post|put|head|delete|options)$"
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "pattern-either": [
                    {
                      "pattern": "$REQ.query"
                    },
                    {
                      "pattern": "$REQ.body"
                    },
                    {
                      "pattern": "$REQ.params"
                    },
                    {
                      "pattern": "$REQ.cookies"
                    },
                    {
                      "pattern": "$REQ.headers"
                    }
                  ]
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern-either": [
                    {
                      "pattern-inside": "import { ...,$IMPORT,... } from 'next/router'\n...\n"
                    },
                    {
                      "pattern-inside": "import $IMPORT from 'next/router';\n...\n"
                    }
                  ]
                },
                {
                  "pattern-either": [
                    {
                      "patterns": [
                        {
                          "pattern-inside": "$ROUTER = $IMPORT()\n...\n"
                        },
                        {
                          "pattern-either": [
                            {
                              "pattern-inside": "const { ...,$PROPS,... } = $ROUTER.query\n...\n"
                            },
                            {
                              "pattern-inside": "var { ...,$PROPS,... } = $ROUTER.query\n...\n"
                            },
                            {
                              "pattern-inside": "let { ...,$PROPS,... } = $ROUTER.query\n...\n"
                            }
                          ]
                        },
                        {
                          "focus-metavariable": "$PROPS"
                        }
                      ]
                    },
                    {
                      "patterns": [
                        {
                          "pattern-inside": "$ROUTER = $IMPORT()\n...\n"
                        },
                        {
                          "pattern": "$ROUTER.query.$VALUE \n"
                        }
                      ]
                    },
                    {
                      "patterns": [
                        {
                          "pattern": "$IMPORT().query.$VALUE"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.javascript.lang.security.audit.dangerous-spawn-shell",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detected non-literal calls to $EXEC(). This could lead to a command injection vulnerability.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
        ],
        "source-rule-url": "https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-child-process.js",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "javascript"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "require('child_process')\n...\n"
                },
                {
                  "pattern-inside": "import 'child_process'\n...\n"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "spawn(...)"
                },
                {
                  "pattern": "spawnSync(...)"
                },
                {
                  "pattern": "$CP.spawn(...)"
                },
                {
                  "pattern": "$CP.spawnSync(...)"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$EXEC(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",[\"-c\", $ARG, ...],...)\n"
                },
                {
                  "patterns": [
                    {
                      "pattern": "$EXEC($CMD,[\"-c\", $ARG, ...],...)"
                    },
                    {
                      "pattern-inside": "$CMD = \"=~/(sh|bash|ksh|csh|tcsh|zsh)/\"\n...\n"
                    }
                  ]
                },
                {
                  "pattern": "$EXEC(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",[$ARG, ...],...)\n"
                },
                {
                  "patterns": [
                    {
                      "pattern": "$EXEC($CMD,[$ARG, ...],...)"
                    },
                    {
                      "pattern-inside": "$CMD = \"=~/(sh|bash|ksh|csh|tcsh|zsh)/\"\n...\n"
                    }
                  ]
                }
              ]
            },
            {
              "focus-metavariable": "$ARG"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-inside": "function ... (...,$FUNC,...) {\n  ...\n}\n"
            },
            {
              "focus-metavariable": "$FUNC"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.javascript.lang.security.audit.detect-non-literal-fs-filename",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detected that function argument `$ARG` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "source-rule-url": "https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-non-literal-fs-filename.js",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "typescript"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "$FS = require('fs')\n...\n"
                },
                {
                  "pattern-inside": "$FS = require('fs/promises')\n...\n"
                },
                {
                  "pattern-inside": "import * as $FS from 'fs'\n...\n"
                },
                {
                  "pattern-inside": "import $FS from 'fs'\n...\n"
                },
                {
                  "pattern-inside": "import * as $FS from 'fs/promises'\n...\n"
                },
                {
                  "pattern-inside": "import $FS from 'fs/promises'\n...\n"
                }
              ]
            },
            {
              "pattern-not": "$FS. ... .$METHOD(\"...\", ...)"
            },
            {
              "pattern-either": [
                {
                  "pattern": "$FS. ... .access($FILE,...)"
                },
                {
                  "pattern": "$FS. ... .appendFile($FILE,...)"
                },
                {
                  "pattern": "$FS. ... .chmod($FILE,...)"
                },
                {
                  "pattern": "$FS. ... .chown($FILE,...)"
                },
                {
                  "pattern": "$FS. ... .close($FILE,...)"
                },
                {
                  "pattern": "$FS. ... .copyFile($FILE,...)"
                },
                {
                  "pattern": "$FS. ... .copyFile($SMTH, $FILE,...)"
                },
                {
                  "pattern": "$FS. ... .cp($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .cp($SMTH, $FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .createReadStream($FILE,...)"
                },
                {
                  "pattern": "$FS. ... .createWriteStream($FILE,...)"
                },
                {
                  "pattern": "$FS. ... .exists($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .fchmod($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .fchown($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .fdatasync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .fstat($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .fsync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .ftruncate($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .futimes($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .lchmod($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .lchown($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .lutimes($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .link($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .link($SMTH, $FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .lstat($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .mkdir($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .mkdtemp($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .open($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .opendir($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .read($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .read($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .readdir($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .readFile($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .readlink($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .readv($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .realpath($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .realpath.native($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .rename($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .rename($SMTH, $FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .rmdir($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .rm($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .stat($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .symlink($SMTH, $FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .symlink($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .truncate($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .unlink($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .unwatchFile($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .utimes($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .watch($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .watchFile($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .write($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .writeFile($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .writev($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .accessSync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .appendFileSync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .chmodSync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .chownSync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .closeSync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .copyFileSync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .copyFileSync($SMTH, $FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .cpSync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .cpSync($SMTH, $FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .existsSync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .fchmodSync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .fchownSync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .fdatasyncSync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .fstatSync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .fsyncSync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .ftruncateSync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .futimesSync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .lchmodSync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .lchownSync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .lutimesSync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .linkSync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .linkSync($SMTH, $FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .lstatSync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .mkdirSync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .mkdtempSync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .opendirSync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .openSync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .readdirSync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .readFileSync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .readlinkSync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .readSync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .readSync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .readvSync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .realpathync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .realpathSync.native($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .renameSync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .renameSync($SMTH, $FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .rmdirSync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .rmSync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .statSync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .symlinkSync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .symlinkSync($SMTH, $FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .truncateSync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .unlinkSync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .utimesSync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .writeFileSync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .writeSync($FILE, ...)"
                },
                {
                  "pattern": "$FS. ... .writevSync($FILE, ...)"
                }
              ]
            },
            {
              "focus-metavariable": "$FILE"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "import 'fs'\n...\n"
                },
                {
                  "pattern-inside": "import 'fs/promises'\n...\n"
                }
              ]
            },
            {
              "pattern-not": "$METHOD(\"...\", ...)"
            },
            {
              "pattern-either": [
                {
                  "pattern": "access($FILE,...)"
                },
                {
                  "pattern": "appendFile($FILE,...)"
                },
                {
                  "pattern": "chmod($FILE,...)"
                },
                {
                  "pattern": "chown($FILE,...)"
                },
                {
                  "pattern": "close($FILE,...)"
                },
                {
                  "pattern": "copyFile($FILE,...)"
                },
                {
                  "pattern": "copyFile($SMTH, $FILE,...)"
                },
                {
                  "pattern": "cp($FILE, ...)"
                },
                {
                  "pattern": "cp($SMTH, $FILE, ...)"
                },
                {
                  "pattern": "createReadStream($FILE,...)"
                },
                {
                  "pattern": "createWriteStream($FILE,...)"
                },
                {
                  "pattern": "exists($FILE, ...)"
                },
                {
                  "pattern": "fchmod($FILE, ...)"
                },
                {
                  "pattern": "fchown($FILE, ...)"
                },
                {
                  "pattern": "fdatasync($FILE, ...)"
                },
                {
                  "pattern": "fstat($FILE, ...)"
                },
                {
                  "pattern": "fsync($FILE, ...)"
                },
                {
                  "pattern": "ftruncate($FILE, ...)"
                },
                {
                  "pattern": "futimes($FILE, ...)"
                },
                {
                  "pattern": "lchmod($FILE, ...)"
                },
                {
                  "pattern": "lchown($FILE, ...)"
                },
                {
                  "pattern": "lutimes($FILE, ...)"
                },
                {
                  "pattern": "link($FILE, ...)"
                },
                {
                  "pattern": "link($SMTH, $FILE, ...)"
                },
                {
                  "pattern": "lstat($FILE, ...)"
                },
                {
                  "pattern": "mkdir($FILE, ...)"
                },
                {
                  "pattern": "mkdtemp($FILE, ...)"
                },
                {
                  "pattern": "open($FILE, ...)"
                },
                {
                  "pattern": "opendir($FILE, ...)"
                },
                {
                  "pattern": "read($FILE, ...)"
                },
                {
                  "pattern": "read($FILE, ...)"
                },
                {
                  "pattern": "readdir($FILE, ...)"
                },
                {
                  "pattern": "readFile($FILE, ...)"
                },
                {
                  "pattern": "readlink($FILE, ...)"
                },
                {
                  "pattern": "readv($FILE, ...)"
                },
                {
                  "pattern": "realpath($FILE, ...)"
                },
                {
                  "pattern": "realpath.native($FILE, ...)"
                },
                {
                  "pattern": "rename($FILE, ...)"
                },
                {
                  "pattern": "rename($SMTH, $FILE, ...)"
                },
                {
                  "pattern": "rmdir($FILE, ...)"
                },
                {
                  "pattern": "rm($FILE, ...)"
                },
                {
                  "pattern": "stat($FILE, ...)"
                },
                {
                  "pattern": "symlink($SMTH, $FILE, ...)"
                },
                {
                  "pattern": "symlink($FILE, ...)"
                },
                {
                  "pattern": "truncate($FILE, ...)"
                },
                {
                  "pattern": "unlink($FILE, ...)"
                },
                {
                  "pattern": "unwatchFile($FILE, ...)"
                },
                {
                  "pattern": "utimes($FILE, ...)"
                },
                {
                  "pattern": "watch($FILE, ...)"
                },
                {
                  "pattern": "watchFile($FILE, ...)"
                },
                {
                  "pattern": "write($FILE, ...)"
                },
                {
                  "pattern": "writeFile($FILE, ...)"
                },
                {
                  "pattern": "writev($FILE, ...)"
                },
                {
                  "pattern": "accessSync($FILE, ...)"
                },
                {
                  "pattern": "appendFileSync($FILE, ...)"
                },
                {
                  "pattern": "chmodSync($FILE, ...)"
                },
                {
                  "pattern": "chownSync($FILE, ...)"
                },
                {
                  "pattern": "closeSync($FILE, ...)"
                },
                {
                  "pattern": "copyFileSync($FILE, ...)"
                },
                {
                  "pattern": "copyFileSync($SMTH, $FILE, ...)"
                },
                {
                  "pattern": "cpSync($FILE, ...)"
                },
                {
                  "pattern": "cpSync($SMTH, $FILE, ...)"
                },
                {
                  "pattern": "existsSync($FILE, ...)"
                },
                {
                  "pattern": "fchmodSync($FILE, ...)"
                },
                {
                  "pattern": "fchownSync($FILE, ...)"
                },
                {
                  "pattern": "fdatasyncSync($FILE, ...)"
                },
                {
                  "pattern": "fstatSync($FILE, ...)"
                },
                {
                  "pattern": "fsyncSync($FILE, ...)"
                },
                {
                  "pattern": "ftruncateSync($FILE, ...)"
                },
                {
                  "pattern": "futimesSync($FILE, ...)"
                },
                {
                  "pattern": "lchmodSync($FILE, ...)"
                },
                {
                  "pattern": "lchownSync($FILE, ...)"
                },
                {
                  "pattern": "lutimesSync($FILE, ...)"
                },
                {
                  "pattern": "linkSync($FILE, ...)"
                },
                {
                  "pattern": "linkSync($SMTH, $FILE, ...)"
                },
                {
                  "pattern": "lstatSync($FILE, ...)"
                },
                {
                  "pattern": "mkdirSync($FILE, ...)"
                },
                {
                  "pattern": "mkdtempSync($FILE, ...)"
                },
                {
                  "pattern": "opendirSync($FILE, ...)"
                },
                {
                  "pattern": "openSync($FILE, ...)"
                },
                {
                  "pattern": "readdirSync($FILE, ...)"
                },
                {
                  "pattern": "readFileSync($FILE, ...)"
                },
                {
                  "pattern": "readlinkSync($FILE, ...)"
                },
                {
                  "pattern": "readSync($FILE, ...)"
                },
                {
                  "pattern": "readSync($FILE, ...)"
                },
                {
                  "pattern": "readvSync($FILE, ...)"
                },
                {
                  "pattern": "realpathync($FILE, ...)"
                },
                {
                  "pattern": "realpathSync.native($FILE, ...)"
                },
                {
                  "pattern": "renameSync($FILE, ...)"
                },
                {
                  "pattern": "renameSync($SMTH, $FILE, ...)"
                },
                {
                  "pattern": "rmdirSync($FILE, ...)"
                },
                {
                  "pattern": "rmSync($FILE, ...)"
                },
                {
                  "pattern": "statSync($FILE, ...)"
                },
                {
                  "pattern": "symlinkSync($FILE, ...)"
                },
                {
                  "pattern": "symlinkSync($SMTH, $FILE, ...)"
                },
                {
                  "pattern": "truncateSync($FILE, ...)"
                },
                {
                  "pattern": "unlinkSync($FILE, ...)"
                },
                {
                  "pattern": "utimesSync($FILE, ...)"
                },
                {
                  "pattern": "writeFileSync($FILE, ...)"
                },
                {
                  "pattern": "writeSync($FILE, ...)"
                },
                {
                  "pattern": "writevSync($FILE, ...)"
                }
              ]
            },
            {
              "focus-metavariable": "$FILE"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-inside": "function ... (..., $ARG,...) {...}"
            },
            {
              "focus-metavariable": "$ARG"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.lang.security.audit.detect-non-literal-regexp",
      "languages": [
        "js",
        "ts"
      ],
      "message": "RegExp() called with a `$ARG` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-1333: Inefficient Regular Expression Complexity"
        ],
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A05:2021 - Security Misconfiguration",
          "A06:2017 - Security Misconfiguration"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS"
        ],
        "source-rule-url": "https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-non-literal-regexp.js",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "javascript"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "new RegExp($ARG, ...)"
                },
                {
                  "pattern": "RegExp($ARG, ...)"
                }
              ]
            },
            {
              "pattern-not": "RegExp(\"...\", ...)"
            },
            {
              "pattern-not": "new RegExp(\"...\", ...)"
            },
            {
              "pattern-not": "RegExp(/.../, ...)"
            },
            {
              "pattern-not": "new RegExp(/.../, ...)"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-inside": "function ... (...,$ARG,...) {...}\n"
            },
            {
              "focus-metavariable": "$ARG"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.lang.security.audit.detect-non-literal-require",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detected the use of require(variable). Calling require with a non-literal argument might allow an attacker to load and run arbitrary code, or access arbitrary files.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
        ],
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-non-literal-require.js"
        ],
        "source-rule-url": "https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-non-literal-require.js",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "javascript"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "pattern": "require(...)"
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-inside": "function ... (..., $ARG,...) {...}"
            },
            {
              "focus-metavariable": "$ARG"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.lang.security.audit.detect-redos",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detected the use of a regular expression `$REDOS` which appears to be vulnerable to a Regular expression Denial-of-Service (ReDoS). For this reason, it is recommended to review the regex and ensure it is not vulnerable to catastrophic backtracking, and if possible use a library which offers default safety against ReDoS vulnerabilities.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-1333: Inefficient Regular Expression Complexity"
        ],
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A05:2021 - Security Misconfiguration",
          "A06:2017 - Security Misconfiguration"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS",
          "https://www.regular-expressions.info/redos.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "javascript"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "new RegExp(/$REDOS/,...)\n"
            },
            {
              "pattern": "new RegExp(\"$REDOS\",...)\n"
            },
            {
              "pattern": "/$REDOS/.test(...)\n"
            },
            {
              "pattern": "\"$REDOS\".test(...)\n"
            },
            {
              "pattern": "$X.match(/$REDOS/)\n"
            },
            {
              "pattern": "$X.match(\"$REDOS\")\n"
            }
          ]
        },
        {
          "metavariable-analysis": {
            "analyzer": "redos",
            "metavariable": "$REDOS"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.lang.security.audit.hardcoded-hmac-key",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detected a hardcoded hmac key. Avoid hardcoding secrets and consider using an alternate option such as reading the secret from a config file or using an environment variable.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "interfile": true,
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://rules.sonarsource.com/javascript/RSPEC-2068",
          "https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#key-management"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "crypto",
          "hmac"
        ]
      },
      "options": {
        "interfile": true
      },
      "pattern-either": [
        {
          "pattern": "$CRYPTO.createHmac($ALGO, '...')"
        },
        {
          "patterns": [
            {
              "pattern-inside": "const $SECRET = '...'\n...\n"
            },
            {
              "pattern": "$CRYPTO.createHmac($ALGO, $SECRET)"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.lang.security.audit.incomplete-sanitization",
      "languages": [
        "js",
        "ts"
      ],
      "message": "`$STR.replace` method will only replace the first occurrence when used with a string argument ($CHAR). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-116: Improper Encoding or Escaping of Output"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "javascript"
        ]
      },
      "patterns": [
        {
          "pattern": "$STR.replace(($CHAR: string), ...)\n"
        },
        {
          "metavariable-regex": {
            "metavariable": "$CHAR",
            "regex": "^[\\\"\\']([\\'\\\"\\<\\>\\*\\|\\{\\}\\[\\]\\%\\$]{1}|\\\\n|\\\\r|\\\\t|\\\\&)[\\\"\\']$"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.lang.security.audit.md5-used-as-password",
      "languages": [
        "js",
        "ts"
      ],
      "message": "It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as bcrypt. You can use the `bcrypt` node.js package.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "MEDIUM",
        "likelihood": "HIGH",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://tools.ietf.org/id/draft-lvelvindron-tls-md5-sha1-deprecate-01.html",
          "https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords",
          "https://github.com/returntocorp/semgrep-rules/issues/1609",
          "https://www.npmjs.com/package/bcrypt"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "crypto",
          "md5"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern": "$FUNCTION(...);"
            },
            {
              "metavariable-regex": {
                "metavariable": "$FUNCTION",
                "regex": "(?i)(.*password.*)"
              }
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "pattern": "$CRYPTO.createHash(\"md5\")"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.lang.security.audit.spawn-shell-true",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Found '$SPAWN' with '{shell: $SHELL}'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use '{shell: false}' instead.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "javascript"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "spawn(...,{shell: $SHELL})\n"
            },
            {
              "pattern": "spawnSync(...,{shell: $SHELL})\n"
            },
            {
              "pattern": "$CP.spawn(...,{shell: $SHELL})\n"
            },
            {
              "pattern": "$CP.spawnSync(...,{shell: $SHELL})\n"
            }
          ]
        },
        {
          "pattern-not": "spawn(...,{shell: false})\n"
        },
        {
          "pattern-not": "spawnSync(...,{shell: false})\n"
        },
        {
          "pattern-not": "$CP.spawn(...,{shell: false})\n"
        },
        {
          "pattern-not": "$CP.spawnSync(...,{shell: false})\n"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.javascript.lang.security.audit.unknown-value-with-script-tag",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Cannot determine what '$UNK' is and it is used with a '<script>' tag. This could be susceptible to cross-site scripting (XSS). Ensure '$UNK' is not externally controlled, or sanitize this data.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://www.developsec.com/2017/11/09/xss-in-a-script-tag/",
          "https://github.com/juice-shop/juice-shop/blob/1ceb8751e986dacd3214a618c37e7411be6bc11a/routes/videoHandler.ts#L68"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "javascript"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "$UNK = $ANYFUNC(...);\n...\n$OTHERFUNC(..., <... $UNK ...>, ...);\n"
        },
        {
          "pattern": "$OTHERFUNC(..., <... \"=~/.*<script.*/\" ...>, ...)"
        },
        {
          "pattern": "$UNK"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.lang.security.audit.unsafe-dynamic-method",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Using non-static data to retrieve and run functions from the object is dangerous. If the data is user-controlled, it may allow executing arbitrary code.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-94: Improper Control of Generation of Code ('Code Injection')"
        ],
        "cwe2022-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "javascript"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "$OBJ[$X](...)"
            },
            {
              "pattern": "$Y = $OBJ[$X]\n...\n$Y(...)\n"
            }
          ]
        },
        {
          "metavariable-pattern": {
            "metavariable": "$X",
            "patterns": [
              {
                "pattern-not": "\"...\"\n"
              },
              {
                "pattern-not": "($X: float)\n"
              }
            ]
          }
        },
        {
          "pattern-not-inside": "for (...) {...}\n"
        },
        {
          "pattern-not-inside": "$SMTH.forEach(...)\n"
        },
        {
          "pattern-not-inside": "$SMTH.map(...)\n"
        },
        {
          "pattern-not-inside": "$SMTH.reduce(...)\n"
        },
        {
          "pattern-not-inside": "$SMTH.reduceRight(...)\n"
        },
        {
          "pattern-not-inside": "if (<... $OBJ.hasOwnProperty(...) ...>) {\n  ...\n}\n...\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.lang.security.audit.unsafe-formatstring",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-134: Use of Externally-Controlled Format String"
        ],
        "impact": "LOW",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://cwe.mitre.org/data/definitions/134.html"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "javascript"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "focus-metavariable": "$STR"
            },
            {
              "pattern-either": [
                {
                  "pattern": "console.$LOG($STR,$PARAM,...)\n"
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "$UTIL = require('util')\n...\n"
                    },
                    {
                      "pattern": "$UTIL.format($STR,$PARAM,...)\n"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "$X + $Y"
                },
                {
                  "pattern": "$X.concat($Y)"
                },
                {
                  "pattern": "`...${...}...`\n"
                }
              ]
            },
            {
              "pattern-not": "\"...\" + \"...\"\n"
            },
            {
              "pattern-not": "$X.concat(\"...\")\n"
            }
          ]
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.javascript.lang.security.audit.path-traversal.path-join-resolve-traversal",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "HIGH",
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "javascript",
          "node.js"
        ]
      },
      "mode": "taint",
      "pattern-sanitizers": [
        {
          "pattern": "$Y.replace(...)"
        },
        {
          "pattern": "$Y.indexOf(...)"
        },
        {
          "pattern": "function ... (...) {\n    ...\n    <... $Y.indexOf(...) ...>\n    ...\n}\n"
        },
        {
          "patterns": [
            {
              "pattern": "$FUNC(...)"
            },
            {
              "metavariable-regex": {
                "metavariable": "$FUNC",
                "regex": "sanitize"
              }
            }
          ]
        }
      ],
      "pattern-sinks": [
        {
          "patterns": [
            {
              "focus-metavariable": "$SINK"
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "$PATH = require('path');\n...\n"
                },
                {
                  "pattern-inside": "import $PATH from 'path';\n...\n"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$PATH.join(...,$SINK,...)"
                },
                {
                  "pattern": "$PATH.resolve(...,$SINK,...)"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "focus-metavariable": "$SINK"
            },
            {
              "pattern-inside": "import 'path';\n...\n"
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "path.join(...,$SINK,...)"
                },
                {
                  "pattern-inside": "path.resolve(...,$SINK,...)"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "focus-metavariable": "$X"
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "function ... (...,$X,...) {...}\n"
                },
                {
                  "pattern-inside": "function ... (...,{...,$X,...},...) {...}\n"
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.lang.security.audit.prototype-pollution.prototype-pollution-assignment",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Possibility of prototype polluting assignment detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "javascript"
        ]
      },
      "patterns": [
        {
          "pattern": "$X[$B] = ...\n"
        },
        {
          "pattern-not": "$X[$B] = '...'\n"
        },
        {
          "pattern-inside": "$X = $SMTH[$A]\n...\n"
        },
        {
          "pattern-not-inside": "if (<...'constructor' ...>) {\n  ...\n}\n...\n"
        },
        {
          "pattern-not-inside": "if (<...'__proto__' ...>) {\n  ...\n}\n...\n"
        },
        {
          "pattern-not-inside": "for(var $B = $S; ...; ...) {...}\n"
        },
        {
          "pattern-not-inside": "for($B = $S; ...; ...) {...}\n"
        },
        {
          "pattern-not-inside": "$X.forEach(function $NAME($OBJ, $B,...) {...})\n"
        },
        {
          "metavariable-pattern": {
            "metavariable": "$A",
            "patterns": [
              {
                "pattern-not": "\"...\""
              },
              {
                "pattern-not": "`...${...}...`\n"
              },
              {
                "pattern-not": "($A: float)\n"
              }
            ]
          }
        },
        {
          "metavariable-pattern": {
            "metavariable": "$B",
            "patterns": [
              {
                "pattern-not": "\"...\""
              },
              {
                "pattern-not": "`...${...}...`\n"
              },
              {
                "pattern-not": "($B: float)\n"
              }
            ]
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "typescript"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "$SMTH = $SMTH[$A]\n"
            },
            {
              "pattern": "$SMTH = $SMTH[$A] = ...\n"
            },
            {
              "pattern": "$SMTH = $SMTH[$A] && $Z\n"
            },
            {
              "pattern": "$SMTH = $SMTH[$A] || $Z\n"
            }
          ]
        },
        {
          "pattern-either": [
            {
              "pattern-inside": "for(...) {\n  ...\n}\n"
            },
            {
              "pattern-inside": "while(...) {\n  ...\n}\n"
            },
            {
              "pattern-inside": "$X.forEach(function $NAME(...) {\n  ...\n})\n"
            }
          ]
        },
        {
          "pattern-not-inside": "for(var $A = $S; ...; ...) {...}\n"
        },
        {
          "pattern-not-inside": "for($A = $S; ...; ...) {...}\n"
        },
        {
          "pattern-not-inside": "$X.forEach(function $NAME($OBJ, $A,...) {...})\n"
        },
        {
          "metavariable-pattern": {
            "metavariable": "$A",
            "patterns": [
              {
                "pattern-not": "\"...\""
              },
              {
                "pattern-not": "`...${...}...`\n"
              },
              {
                "pattern-not": "($A: float)\n"
              }
            ]
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.lang.security.audit.sqli.node-knex-sqli",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detected SQL statement that is tainted by `$REQ` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements. An example of parameterized queries like so: `knex.raw('SELECT $1 from table', [userinput])` can help prevent SQLi.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://knexjs.org/#Builder-fromRaw",
          "https://knexjs.org/#Builder-whereRaw",
          "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "express",
          "nodejs",
          "knex"
        ]
      },
      "mode": "taint",
      "pattern-sanitizers": [
        {
          "patterns": [
            {
              "pattern": "parseInt(...)"
            }
          ]
        }
      ],
      "pattern-sinks": [
        {
          "patterns": [
            {
              "focus-metavariable": "$QUERY"
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "$KNEX.fromRaw($QUERY, ...)"
                },
                {
                  "pattern-inside": "$KNEX.whereRaw($QUERY, ...)"
                },
                {
                  "pattern-inside": "$KNEX.raw($QUERY, ...)"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "require('knex')\n...\n"
                },
                {
                  "pattern-inside": "import 'knex'\n...\n"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "function ... ($REQ, $RES) {...}"
                },
                {
                  "pattern-inside": "function ... ($REQ, $RES, $NEXT) {...}"
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES) {...})"
                        },
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})"
                        }
                      ]
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "^(get|post|put|head|delete|options)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$REQ.query"
                },
                {
                  "pattern": "$REQ.body"
                },
                {
                  "pattern": "$REQ.params"
                },
                {
                  "pattern": "$REQ.cookies"
                },
                {
                  "pattern": "$REQ.headers"
                },
                {
                  "pattern": "$REQ.files.$ANYTHING.data.toString('utf8')"
                },
                {
                  "pattern": "$REQ.files.$ANYTHING['data'].toString('utf8')"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>\n{...}\n"
                },
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response) => {...}\n"
                }
              ]
            },
            {
              "focus-metavariable": "$REQ"
            },
            {
              "pattern-either": [
                {
                  "pattern": "params"
                },
                {
                  "pattern": "query"
                },
                {
                  "pattern": "cookies"
                },
                {
                  "pattern": "headers"
                },
                {
                  "pattern": "body"
                },
                {
                  "pattern": "files.$ANYTHING.data.toString('utf8')"
                },
                {
                  "pattern": "files.$ANYTHING['data'].toString('utf8')"
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.lang.security.audit.sqli.node-mssql-sqli",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detected string concatenation with a non-literal variable in a `mssql` JS SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `$REQ.input('USER_ID', mssql.Int, id);`",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://www.npmjs.com/package/mssql"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "mssql"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "require('mssql');\n...\n"
                },
                {
                  "pattern-inside": "import 'mssql';\n...\n"
                }
              ]
            },
            {
              "pattern-inside": "$REQ = $POOL.request(...)\n...\n"
            },
            {
              "pattern": "$REQ.query($QUERY,...)\n"
            },
            {
              "focus-metavariable": "$QUERY"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-inside": "function ... (...,$FUNC,...) {\n  ...\n}\n"
            },
            {
              "focus-metavariable": "$FUNC"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.lang.security.audit.sqli.node-mysql-sqli",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detected a `$IMPORT` SQL statement that comes from a function argument. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://www.npmjs.com/package/mysql2",
          "https://www.npmjs.com/package/mysql",
          "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "mysql",
          "mysql2",
          "javascript",
          "nodejs"
        ]
      },
      "mode": "taint",
      "pattern-sanitizers": [
        {
          "patterns": [
            {
              "pattern": "parseInt(...)"
            }
          ]
        }
      ],
      "pattern-sinks": [
        {
          "patterns": [
            {
              "focus-metavariable": "$QUERY"
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "$POOL.query($QUERY, ...)"
                },
                {
                  "pattern-inside": "$POOL.execute($QUERY, ...)"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "import $S from \"$IMPORT\"\n...\n"
                },
                {
                  "pattern-inside": "import { ... } from \"$IMPORT\"\n...\n"
                },
                {
                  "pattern-inside": "import * as $S from \"$IMPORT\"\n...\n"
                },
                {
                  "pattern-inside": "require(\"$IMPORT\")\n...\n"
                }
              ]
            },
            {
              "metavariable-regex": {
                "metavariable": "$IMPORT",
                "regex": "(mysql|mysql2)"
              }
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-inside": "function ... (..., $Y,...) {...}"
            },
            {
              "pattern": "$Y"
            },
            {
              "pattern-not-inside": "function ... (..., $Y: number,...) {...}\n"
            },
            {
              "pattern-not-inside": "$Y.query"
            },
            {
              "pattern-not-inside": "$Y.body"
            },
            {
              "pattern-not-inside": "$Y.params"
            },
            {
              "pattern-not-inside": "$Y.cookies"
            },
            {
              "pattern-not-inside": "$Y.headers"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.lang.security.audit.sqli.node-postgres-sqli",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detected string concatenation with a non-literal variable in a node-postgres JS SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `client.query('SELECT $1 from table', [userinput])`",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"
        ],
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://node-postgres.com/features/queries"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "node-postgres"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "const { $CLIENT } = require('pg')\n ...\n"
                },
                {
                  "pattern-inside": "var { $CLIENT } = require('pg')\n ...\n"
                },
                {
                  "pattern-inside": "let { $CLIENT } = require('pg')\n ...\n"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "$DB = new $CLIENT(...)\n...\n"
                },
                {
                  "pattern-inside": "$NEWPOOL = new $CLIENT(...)\n...\n$NEWPOOL.connect((..., $DB, ...) => {\n    ...\n})\n"
                }
              ]
            },
            {
              "pattern": "$DB.query($QUERY,...)"
            },
            {
              "focus-metavariable": "$QUERY"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-inside": "function ... (...,$FUNC,...) {\n  ...\n}\n"
            },
            {
              "focus-metavariable": "$FUNC"
            },
            {
              "pattern-not-inside": "$F. ... .$SOURCE(...)\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.monaco-editor.security.audit.monaco-hover-htmlsupport",
      "languages": [
        "js",
        "ts"
      ],
      "message": "If user input reaches `HoverProvider` while `supportHml` is set to `true` it may introduce an XSS vulnerability. Do not produce HTML for hovers with dynamically generated input.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://github.com/microsoft/monaco-editor/issues/801"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "monaco",
          "monaco-editor"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern-inside": "import \"monaco-editor\"\n...\n"
            },
            {
              "pattern-inside": "require(\"monaco-editor\")\n...\n"
            }
          ]
        },
        {
          "pattern-either": [
            {
              "pattern": "{value: $VAL, supportHtml: true}\n"
            },
            {
              "pattern": "{value: $VAL, isTrusted: true}\n"
            }
          ]
        },
        {
          "pattern-inside": "{range: $R, contents: [...]}\n"
        },
        {
          "pattern-not": "{..., value: \"...\", ...}\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.node-crypto.security.aead-no-final",
      "languages": [
        "js",
        "ts"
      ],
      "message": "The 'final' call of a Decipher object checks the authentication tag in a mode for authenticated encryption. Failing to call 'final' will invalidate all integrity guarantees of the released ciphertext.",
      "metadata": {
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-310: CWE CATEGORY: Cryptographic Issues"
        ],
        "impact": "MEDIUM",
        "likelihood": "HIGH",
        "owasp": [
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://nodejs.org/api/crypto.html#deciphersetauthtagbuffer-encoding",
          "https://owasp.org/Top10/A02_2021-Cryptographic_Failures/"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "node-crypto"
        ]
      },
      "patterns": [
        {
          "pattern": "$DECIPHER = $CRYPTO.createDecipheriv('$ALGO', ...)\n...\n$DECIPHER.update(...)\n"
        },
        {
          "pattern-not-inside": "$DECIPHER = $CRYPTO.createDecipheriv('$ALGO', ...)\n...\n$DECIPHER.final(...)\n"
        },
        {
          "metavariable-regex": {
            "metavariable": "$ALGO",
            "regex": ".*(-gcm|-ccm|-ocb|chacha20-poly1305)$"
          }
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.javascript.node-crypto.security.create-de-cipher-no-iv",
      "languages": [
        "js",
        "ts"
      ],
      "message": "The deprecated functions 'createCipher' and 'createDecipher' generate the same initialization vector every time. For counter modes such as CTR, GCM, or CCM this leads to break of both confidentiality and integrity, if the key is used more than once. Other modes are still affected in their strength, though they're not completely broken. Use 'createCipheriv' or 'createDecipheriv' instead.",
      "metadata": {
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-1204: Generation of Weak Initialization Vector (IV)"
        ],
        "impact": "MEDIUM",
        "likelihood": "HIGH",
        "references": [
          "https://nodejs.org/api/crypto.html#cryptocreatecipheralgorithm-password-options",
          "https://nodejs.org/api/crypto.html#cryptocreatedecipheralgorithm-password-options"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "node-crypto"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "$CRYPTO.createCipher(...)\n"
            },
            {
              "pattern": "$CRYPTO.createDecipher(...)\n"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.javascript.node-crypto.security.gcm-no-tag-length",
      "languages": [
        "js",
        "ts"
      ],
      "message": "The call to 'createDecipheriv' with the Galois Counter Mode (GCM) mode of operation is missing an expected authentication tag length. If the expected authentication tag length is not specified or otherwise checked, the application might be tricked into verifying a shorter-than-expected authentication tag. This can be abused by an attacker to spoof ciphertexts or recover the implicit authentication key of GCM, allowing arbitrary forgeries.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-310: CWE CATEGORY: Cryptographic Issues"
        ],
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://www.securesystems.de/blog/forging_ciphertexts_under_Galois_Counter_Mode_for_the_Node_js_crypto_module/",
          "https://nodejs.org/api/crypto.html#cryptocreatedecipherivalgorithm-key-iv-options",
          "https://owasp.org/Top10/A02_2021-Cryptographic_Failures/"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "node-crypto"
        ]
      },
      "patterns": [
        {
          "pattern": "$CRYPTO.createDecipheriv('$ALGO', $KEY, $IV)\n"
        },
        {
          "metavariable-regex": {
            "metavariable": "$ALGO",
            "regex": ".*(-gcm)$"
          }
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.javascript.node-expat.security.audit.expat-xxe",
      "languages": [
        "js",
        "ts"
      ],
      "message": "If unverified user data can reach the XML Parser it can result in XML External or Internal Entity (XXE) Processing vulnerabilities",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-611: Improper Restriction of XML External Entity Reference"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A04:2017 - XML External Entities (XXE)",
          "A05:2021 - Security Misconfiguration"
        ],
        "references": [
          "https://owasp.org/Top10/A05_2021-Security_Misconfiguration"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "node-expat"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "var $EXPAT = require('node-expat');\n...\nnew $EXPAT.Parser(...);\n...\n$PARSER.parse(...);\n"
            },
            {
              "pattern": "var $EXPAT = require('node-expat');\n...\nnew $EXPAT.Parser(...);\n...\n$PARSER.write(...);\n"
            },
            {
              "pattern": "require('node-expat');\n...\nnew Parser(...);\n...\n$PARSER.parse(...);\n"
            },
            {
              "pattern": "require('node-expat');\n...\nnew Parser(...);\n...\n$PARSER.write(...);\n"
            }
          ]
        },
        {
          "pattern-not": "var $EXPAT = require('node-expat');\n...\nnew $EXPAT.Parser(...);\n...\n$PARSER.parse(\"...\");\n"
        },
        {
          "pattern-not": "var $EXPAT = require('node-expat');\n...\nnew $EXPAT.Parser(...);\n...\n$PARSER.write(\"...\");\n"
        },
        {
          "pattern-not": "require('node-expat');\n...\nnew Parser(...);\n...\n$PARSER.parse(\"...\");\n"
        },
        {
          "pattern-not": "require('node-expat');\n...\nnew Parser(...);\n...\n$PARSER.write(\"...\");\n"
        },
        {
          "pattern-not": "$X = \"...\";\n...\n$PARSER.parse($X);\n"
        },
        {
          "pattern-not": "$X = \"...\";\n...\n$PARSER.write($X);"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.passport-jwt.security.hardcoded-passport-secret",
      "languages": [
        "js",
        "ts"
      ],
      "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",
      "metadata": {
        "asvs": {
          "control_id": "3.5.2 Static API keys or secret",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management",
          "section": "V3: Session Management Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "HIGH",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "jwt",
          "nodejs",
          "secrets"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "$F = require(\"$I\").Strategy\n...\n"
                },
                {
                  "pattern-inside": "$F = require(\"$I\")\n...\n"
                },
                {
                  "pattern-inside": "import { $STRAT as $F } from '$I'\n...\n"
                },
                {
                  "pattern-inside": "import $F from '$I'\n...\n"
                }
              ]
            },
            {
              "metavariable-regex": {
                "metavariable": "$I",
                "regex": "(passport-.*)"
              }
            },
            {
              "pattern-inside": "new $F($VALUE,...)\n"
            },
            {
              "focus-metavariable": "$VALUE"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "by-side-effect": true,
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "{..., clientSecret: \"...\", ...}\n"
                },
                {
                  "pattern": "{..., secretOrKey: \"...\", ...}\n"
                },
                {
                  "pattern": "{..., consumerSecret: \"...\", ...}\n"
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "$OBJ = {}\n...\n"
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "$OBJ.clientSecret = \"...\"\n"
                        },
                        {
                          "pattern": "$OBJ.secretOrKey = \"...\"\n"
                        },
                        {
                          "pattern": "$OBJ.consumerSecret = \"...\"\n"
                        }
                      ]
                    },
                    {
                      "pattern": "$OBJ"
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "$SECRET = '...'\n...\n"
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "{..., clientSecret: $SECRET, ...}\n"
                        },
                        {
                          "pattern": "{..., secretOrKey: $SECRET, ...}\n"
                        },
                        {
                          "pattern": "{..., consumerSecret: $SECRET, ...}\n"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "$SECRET = '...'\n...\n"
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "$VALUE = {..., clientSecret: $SECRET, ...}\n...\n"
                        },
                        {
                          "pattern-inside": "$VALUE = {..., secretOrKey: $SECRET, ...}\n...\n"
                        },
                        {
                          "pattern-inside": "$VALUE = {..., consumerSecret: $SECRET, ...}\n...\n"
                        }
                      ]
                    },
                    {
                      "pattern": "$VALUE"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.phantom.security.audit.phantom-injection",
      "languages": [
        "js",
        "ts"
      ],
      "message": "If unverified user data can reach the `phantom` page methods it can result in Server-Side Request Forgery vulnerabilities",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-918: Server-Side Request Forgery (SSRF)"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A10:2021 - Server-Side Request Forgery (SSRF)"
        ],
        "references": [
          "https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "phantom"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "$PHANTOM = require('phantom');\n...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "$PAGE.open($INPUT,...)"
            },
            {
              "pattern": "$PAGE.property(\"content\",$INPUT,...)"
            },
            {
              "pattern": "$PAGE.setContent($INPUT,...)"
            },
            {
              "pattern": "$PAGE.openUrl($INPUT,...)"
            },
            {
              "pattern": "$PAGE.evaluateJavaScript($INPUT,...)"
            }
          ]
        },
        {
          "pattern-not": "$PAGE.open(\"...\",...)"
        },
        {
          "pattern-not": "$PAGE.property(\"content\",\"...\",...)"
        },
        {
          "pattern-not": "$PAGE.setContent(\"...\",...)"
        },
        {
          "pattern-not": "$PAGE.openUrl(\"...\",...)"
        },
        {
          "pattern-not": "$PAGE.evaluateJavaScript(\"...\",...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.playwright.security.audit.playwright-addinitscript-code-injection",
      "languages": [
        "js",
        "ts"
      ],
      "message": "If unverified user data can reach the `addInitScript` method it can result in Server-Side Request Forgery vulnerabilities",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-918: Server-Side Request Forgery (SSRF)"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A10:2021 - Server-Side Request Forgery (SSRF)"
        ],
        "references": [
          "https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "playwright"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "require('playwright');\n...\n"
        },
        {
          "pattern-not-inside": "var $INPUT = function $FNAME(...){...};\n...\n"
        },
        {
          "pattern": "$CONTEXT.addInitScript($INPUT,...)"
        },
        {
          "pattern-not": "$CONTEXT.addInitScript(\"...\",...)"
        },
        {
          "pattern-not": "$CONTEXT.addInitScript(function(...){...},...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.playwright.security.audit.playwright-evaluate-arg-injection",
      "languages": [
        "js",
        "ts"
      ],
      "message": "If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery vulnerabilities",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-918: Server-Side Request Forgery (SSRF)"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A10:2021 - Server-Side Request Forgery (SSRF)"
        ],
        "references": [
          "https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "playwright"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "require('playwright');\n...\n"
        },
        {
          "pattern-either": [
            {
              "pattern-inside": "function $FUNC (...,$INPUT,...) {...}"
            },
            {
              "pattern-inside": "function (...,$INPUT,...) {...}"
            }
          ]
        },
        {
          "pattern-either": [
            {
              "pattern": "$PAGE.evaluate($CODE,...,<... $INPUT ...>,...)"
            },
            {
              "pattern": "$PAGE.evaluateHandle($CODE,...,<... $INPUT ...>,...)"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.playwright.security.audit.playwright-evaluate-code-injection",
      "languages": [
        "js",
        "ts"
      ],
      "message": "If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery vulnerabilities",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-918: Server-Side Request Forgery (SSRF)"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A10:2021 - Server-Side Request Forgery (SSRF)"
        ],
        "references": [
          "https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "playwright"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "require('playwright');\n...\n"
        },
        {
          "pattern-not-inside": "var $INPUT = function $FNAME(...){...};\n...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "$PAGE.evaluate($INPUT,...)"
            },
            {
              "pattern": "$PAGE.evaluateHandle($INPUT,...)"
            },
            {
              "pattern": "$PAGE.evaluateOnNewDocument($INPUT,...)"
            }
          ]
        },
        {
          "pattern-not": "$PAGE.evaluate(\"...\",...)"
        },
        {
          "pattern-not": "$PAGE.evaluate(function(...){...},...)"
        },
        {
          "pattern-not": "$PAGE.evaluateHandle(\"...\",...)"
        },
        {
          "pattern-not": "$PAGE.evaluateHandle(function(...){...},...)"
        },
        {
          "pattern-not": "$PAGE.evaluateOnNewDocument(\"...\",...)"
        },
        {
          "pattern-not": "$PAGE.evaluateOnNewDocument(function(...){...},...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.playwright.security.audit.playwright-exposed-chrome-devtools",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Remote debugging protocol does not perform any authentication, so exposing it too widely can be a security risk.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-94: Improper Control of Generation of Code ('Code Injection')"
        ],
        "cwe2022-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "playwright"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "require('playwright');\n...\n"
        },
        {
          "pattern-either": [
            {
              "pattern-regex": "--remote-debugging-address"
            },
            {
              "pattern-regex": "--remote-debugging-port"
            },
            {
              "pattern-regex": "--remote-debugging-socket-name"
            },
            {
              "pattern-regex": "--remote-debugging-targets"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.playwright.security.audit.playwright-goto-injection",
      "languages": [
        "js",
        "ts"
      ],
      "message": "If unverified user data can reach the `goto` method it can result in Server-Side Request Forgery vulnerabilities",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-918: Server-Side Request Forgery (SSRF)"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A10:2021 - Server-Side Request Forgery (SSRF)"
        ],
        "references": [
          "https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "playwright"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "require('playwright');\n...\n"
        },
        {
          "pattern-not-inside": "require('playwright');\n...\nvar $INPUT = \"...\";\n...\n$PAGE.goto($INPUT,...)\n"
        },
        {
          "pattern": "$PAGE.goto($INPUT,...)"
        },
        {
          "pattern-not": "$PAGE.goto(\"...\",...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.playwright.security.audit.playwright-setcontent-injection",
      "languages": [
        "js",
        "ts"
      ],
      "message": "If unverified user data can reach the `setContent` method it can result in Server-Side Request Forgery vulnerabilities",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-918: Server-Side Request Forgery (SSRF)"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A10:2021 - Server-Side Request Forgery (SSRF)"
        ],
        "references": [
          "https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "playwright"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "require('playwright');\n...\n"
        },
        {
          "pattern-not-inside": "require('playwright');\n...\nvar $INPUT = \"...\";\n...\n$PAGE.setContent($INPUT,...)\n"
        },
        {
          "pattern": "$PAGE.setContent($INPUT,...)"
        },
        {
          "pattern-not": "$PAGE.setContent(\"...\",...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.puppeteer.security.audit.puppeteer-evaluate-arg-injection",
      "languages": [
        "js",
        "ts"
      ],
      "message": "If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery vulnerabilities",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-918: Server-Side Request Forgery (SSRF)"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A10:2021 - Server-Side Request Forgery (SSRF)"
        ],
        "references": [
          "https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "puppeteer"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "require('puppeteer');\n...\n"
        },
        {
          "pattern-either": [
            {
              "pattern-inside": "function $FUNC (...,$INPUT,...) {...}"
            },
            {
              "pattern-inside": "function (...,$INPUT,...) {...}"
            }
          ]
        },
        {
          "pattern-either": [
            {
              "pattern": "$PAGE.evaluate($CODE,...,<... $INPUT ...>,...)"
            },
            {
              "pattern": "$PAGE.evaluateHandle($CODE,...,<... $INPUT ...>,...)"
            },
            {
              "pattern": "$PAGE.evaluateOnNewDocument($CODE,...,<... $INPUT ...>,...)"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.puppeteer.security.audit.puppeteer-evaluate-code-injection",
      "languages": [
        "js",
        "ts"
      ],
      "message": "If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery vulnerabilities",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-918: Server-Side Request Forgery (SSRF)"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A10:2021 - Server-Side Request Forgery (SSRF)"
        ],
        "references": [
          "https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "puppeteer"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "require('puppeteer');\n...\n"
        },
        {
          "pattern-not-inside": "var $INPUT = function $FNAME(...){...};\n...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "$PAGE.evaluate($INPUT,...)"
            },
            {
              "pattern": "$PAGE.evaluateHandle($INPUT,...)"
            },
            {
              "pattern": "$PAGE.evaluateOnNewDocument($INPUT,...)"
            }
          ]
        },
        {
          "pattern-not": "$PAGE.evaluate(\"...\",...)"
        },
        {
          "pattern-not": "$PAGE.evaluate(function(...){...},...)"
        },
        {
          "pattern-not": "$PAGE.evaluateHandle(\"...\",...)"
        },
        {
          "pattern-not": "$PAGE.evaluateHandle(function(...){...},...)"
        },
        {
          "pattern-not": "$PAGE.evaluateOnNewDocument(\"...\",...)"
        },
        {
          "pattern-not": "$PAGE.evaluateOnNewDocument(function(...){...},...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.puppeteer.security.audit.puppeteer-exposed-chrome-devtools",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Remote debugging protocol does not perform any authentication, so exposing it too widely can be a security risk.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-94: Improper Control of Generation of Code ('Code Injection')"
        ],
        "cwe2022-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "puppeteer"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "require('puppeteer');\n...\n"
        },
        {
          "pattern-either": [
            {
              "pattern-regex": "--remote-debugging-address"
            },
            {
              "pattern-regex": "--remote-debugging-port"
            },
            {
              "pattern-regex": "--remote-debugging-socket-name"
            },
            {
              "pattern-regex": "--remote-debugging-targets"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.puppeteer.security.audit.puppeteer-goto-injection",
      "languages": [
        "js",
        "ts"
      ],
      "message": "If unverified user data can reach the `goto` method it can result in Server-Side Request Forgery vulnerabilities",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-918: Server-Side Request Forgery (SSRF)"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A10:2021 - Server-Side Request Forgery (SSRF)"
        ],
        "references": [
          "https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "puppeteer"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "require('puppeteer');\n...\n"
        },
        {
          "pattern-not-inside": "require('puppeteer');\n...\nvar $INPUT = \"...\";\n...\n$PAGE.goto($INPUT,...)\n"
        },
        {
          "pattern": "$PAGE.goto($INPUT,...)"
        },
        {
          "pattern-not": "$PAGE.goto(\"...\",...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.puppeteer.security.audit.puppeteer-setcontent-injection",
      "languages": [
        "js",
        "ts"
      ],
      "message": "If unverified user data can reach the `setContent` method it can result in Server-Side Request Forgery vulnerabilities",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-918: Server-Side Request Forgery (SSRF)"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A10:2021 - Server-Side Request Forgery (SSRF)"
        ],
        "references": [
          "https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "puppeteer"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "require('puppeteer');\n...\n"
        },
        {
          "pattern-not-inside": "require('puppeteer');\n...\nvar $INPUT = \"...\";\n...\n"
        },
        {
          "pattern": "$PAGE.setContent($INPUT,...)"
        },
        {
          "pattern-not": "$PAGE.setContent(\"...\",...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.sandbox.security.audit.sandbox-code-injection",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Make sure that unverified user data can not reach `sandbox`.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-94: Improper Control of Generation of Code ('Code Injection')"
        ],
        "cwe2022-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "sandbox"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "$SANDBOX = require('sandbox');\n...\n"
        },
        {
          "pattern-not-inside": "$CODE = \"...\";\n...\n"
        },
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern-inside": "$S = new $SANDBOX(...);\n...\n"
                },
                {
                  "pattern": "$S.run($CODE,...);"
                }
              ]
            },
            {
              "pattern": "new $SANDBOX(...).run($CODE,...);\n"
            }
          ]
        },
        {
          "pattern-not-inside": "$S = new $SANDBOX(...);\n...\n$S.run(\"...\",...);\n"
        },
        {
          "pattern-not-inside": "new $SANDBOX(...).run(\"...\",...);"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.sax.security.audit.sax-xxe",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Use of 'ondoctype' in 'sax' library detected. By default, 'sax' won't do anything with custom DTD entity definitions. If you're implementing a custom DTD entity definition, be sure not to introduce XML External Entity (XXE) vulnerabilities, or be absolutely sure that external entities received from a trusted source while processing XML.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-611: Improper Restriction of XML External Entity Reference"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A04:2017 - XML External Entities (XXE)",
          "A05:2021 - Security Misconfiguration"
        ],
        "references": [
          "https://github.com/Leonidas-from-XIV/node-xml2js/issues/415",
          "https://github.com/isaacs/sax-js"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "sax"
        ]
      },
      "pattern-either": [
        {
          "pattern": "require('sax');\n...\n$PARSER.ondoctype = ...;\n"
        },
        {
          "pattern": "require('sax');\n...\n$PARSER.on('doctype',...);"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.sequelize.security.audit.sequelize-enforce-tls",
      "languages": [
        "js",
        "ts"
      ],
      "message": "If TLS is disabled on server side (Postgresql server), Sequelize establishes connection without TLS and no error will be thrown. To prevent MITN (Man In The Middle) attack, TLS must be enforce by Sequelize. Set \"ssl: true\" or define settings \"ssl: {...}\"",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-319: Cleartext Transmission of Sensitive Information"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://node-postgres.com/features/ssl",
          "https://nodejs.org/api/tls.html#tls_class_tls_tlssocket",
          "https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options",
          "https://nodejs.org/api/tls.html#tls_tls_default_min_version"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "sequelize"
        ]
      },
      "patterns": [
        {
          "pattern": "{\n  host: $HOST,\n  database: $DATABASE,\n  dialect: $DIALECT\n }\n"
        },
        {
          "pattern-not": "{\n  host: $HOST,\n  database: $DATABASE,\n  dialect: \"postgres\",\n  dialectOptions: {\n      ssl: true\n  }\n}\n"
        },
        {
          "pattern-not": "{\n  host: $HOST,\n  database: $DATABASE,\n  dialect: $DIALECT,\n  dialectOptions: {\n    ssl: { ... }\n  }\n}\n"
        },
        {
          "metavariable-regex": {
            "metavariable": "$DIALECT",
            "regex": "['\"](mariadb|mysql|postgres)['\"]"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.sequelize.security.audit.sequelize-raw-query",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. Data replacement or data binding should be used. See https://sequelize.org/master/manual/raw-queries.html",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://sequelize.org/master/manual/raw-queries.html"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "sequelize"
        ]
      },
      "pattern-either": [
        {
          "pattern": "$DATABASE.sequelize.query(`...${...}...`, ...)\n"
        },
        {
          "pattern": "$QUERY = `...${...}...`\n...\n$DATABASE.sequelize.query($QUERY, ...)\n"
        },
        {
          "pattern": "$DATABASE.sequelize.query($SQL + $VALUE, ...)\n"
        },
        {
          "pattern": "$QUERY = $SQL + $VALUE\n...\n$DATABASE.sequelize.query($QUERY, ...)\n"
        },
        {
          "pattern": "Sequelize.literal(`...${...}...`)\n"
        },
        {
          "pattern": "$QUERY = `...${...}...`\n...\nSequelize.literal($QUERY)\n"
        },
        {
          "pattern": "Sequelize.literal($SQL + $VALUE)\n"
        },
        {
          "pattern": "$QUERY = $SQL + $VALUE\n...\nSequelize.literal($QUERY)\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.sequelize.security.audit.sequelize-tls-disabled-cert-validation",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Set \"rejectUnauthorized\" to false is a convenient way to resolve certificate error. But this method is unsafe because it disables the server certificate verification, making the Node app open to MITM attack. \"rejectUnauthorized\" option must be alway set to True (default value). With self -signed certificate or custom CA, use \"ca\" option to define Root Certificate. This rule checks TLS configuration only for Postgresql, MariaDB and MySQL. SQLite is not really concerned by TLS configuration. This rule could be extended for MSSQL, but the dialectOptions is specific for Tedious.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-94: Improper Control of Generation of Code ('Code Injection')"
        ],
        "cwe2022-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://node-postgres.com/features/ssl",
          "https://nodejs.org/api/tls.html#tls_class_tls_tlssocket",
          "https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "sequelize"
        ]
      },
      "patterns": [
        {
          "pattern": "{\n  host: $HOST,\n  database: $DATABASE,\n  dialect: $DIALECT,\n  dialectOptions: {\n    ssl: {\n      rejectUnauthorized: false\n    }\n  }\n }\n"
        },
        {
          "metavariable-regex": {
            "metavariable": "$DIALECT",
            "regex": "['\"](mariadb|mysql|postgres)['\"]"
          }
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.javascript.sequelize.security.audit.sequelize-weak-tls-version",
      "languages": [
        "js",
        "ts"
      ],
      "message": "TLS1.0 and TLS1.1 are deprecated and should not be used anymore. By default, NodeJS used TLSv1.2. So, TLS min version must not be downgrade to TLS1.0 or TLS1.1. Enforce TLS1.3 is highly recommended This rule checks TLS configuration only for PostgreSQL, MariaDB and MySQL. SQLite is not really concerned by TLS configuration. This rule could be extended for MSSQL, but the dialectOptions is specific for Tedious.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-319: Cleartext Transmission of Sensitive Information"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://node-postgres.com/features/ssl",
          "https://nodejs.org/api/tls.html#tls_class_tls_tlssocket",
          "https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options",
          "https://nodejs.org/api/tls.html#tls_tls_default_min_version"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "sequelize"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "{\n  host: $HOST,\n  database: $DATABASE,\n  dialect: $DIALECT,\n  dialectOptions:\n    { ssl: ... }\n }\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "{\n  minVersion: 'TLSv1'\n}\n"
            },
            {
              "pattern": "{\n  minVersion: 'TLSv1.1'\n}\n"
            }
          ]
        },
        {
          "metavariable-regex": {
            "metavariable": "$DIALECT",
            "regex": "['\"](mariadb|mysql|postgres)['\"]"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.sequelize.security.audit.express-sequelize-injection",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
      "metadata": {
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "interfile": true,
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://sequelize.org/docs/v6/core-concepts/raw-queries/#replacements"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "express"
        ]
      },
      "mode": "taint",
      "options": {
        "interfile": true
      },
      "pattern-sanitizers": [
        {
          "pattern-either": [
            {
              "pattern": "parseInt(...)"
            },
            {
              "pattern": "$FUNC. ... .hash(...)"
            }
          ]
        }
      ],
      "pattern-sinks": [
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern-either": [
                    {
                      "pattern": "sequelize.query($QUERY,...)"
                    },
                    {
                      "pattern": "$DB.sequelize.query($QUERY,...)"
                    }
                  ]
                },
                {
                  "focus-metavariable": "$QUERY"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "function ... ($REQ, $RES) {...}"
                },
                {
                  "pattern-inside": "function ... ($REQ, $RES, $NEXT) {...}"
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES) {...})"
                        },
                        {
                          "pattern-inside": "$APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})"
                        }
                      ]
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "^(get|post|put|head|delete|options)$"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$REQ.query"
                },
                {
                  "pattern": "$REQ.body"
                },
                {
                  "pattern": "$REQ.params"
                },
                {
                  "pattern": "$REQ.cookies"
                },
                {
                  "pattern": "$REQ.headers"
                },
                {
                  "pattern": "$REQ.files.$ANYTHING.data.toString('utf8')"
                },
                {
                  "pattern": "$REQ.files.$ANYTHING['data'].toString('utf8')"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>\n{...}\n"
                },
                {
                  "pattern-inside": "({ $REQ }: Request,$RES: Response) => {...}\n"
                }
              ]
            },
            {
              "focus-metavariable": "$REQ"
            },
            {
              "pattern-either": [
                {
                  "pattern": "params"
                },
                {
                  "pattern": "query"
                },
                {
                  "pattern": "cookies"
                },
                {
                  "pattern": "headers"
                },
                {
                  "pattern": "body"
                },
                {
                  "pattern": "files.$ANYTHING.data.toString('utf8')"
                },
                {
                  "pattern": "files.$ANYTHING['data'].toString('utf8')"
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.javascript.serialize-javascript.security.audit.unsafe-serialize-javascript",
      "languages": [
        "js",
        "ts"
      ],
      "message": "`serialize-javascript` used with `unsafe` parameter, this could be vulnerable to XSS.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "serialize-javascript"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "$S = require('serialize-javascript');\n...\n"
        },
        {
          "pattern-not-inside": "escape(...)"
        },
        {
          "pattern-not-inside": "encodeURI(...)"
        },
        {
          "pattern": "$S(..., {unsafe: true});\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.shelljs.security.shelljs-exec-injection",
      "languages": [
        "js",
        "ts"
      ],
      "message": "If unverified user data can reach the `exec` method it can result in Remote Code Execution",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "shelljs"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "require('shelljs');\n...\n"
        },
        {
          "pattern-not-inside": "require('shelljs');\n...\nvar $INPUT = \"...\";\n...\n"
        },
        {
          "pattern": "$SHELL.exec($INPUT,...)"
        },
        {
          "pattern-not": "$SHELL.exec(\"...\",...)"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.javascript.thenify.security.audit.multiargs-code-execution",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Potential arbitrary code execution, piped to eval",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-94: Improper Control of Generation of Code ('Code Injection')"
        ],
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "thenify"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "$THENIFY($FN, {multiArgs: ...},...)\n"
            },
            {
              "pattern": "$OPTS = {multiArgs: ...};\n...\n$THENIFY($FN,$OPTS,...);\n"
            }
          ]
        },
        {
          "pattern-not": "$THENIFY($FN, {multiArgs: false},...)\n"
        },
        {
          "pattern-not": "$OPTS = {multiArgs: false};\n...\n$THENIFY($FN,$OPTS,...)\n"
        },
        {
          "pattern-either": [
            {
              "pattern-inside": "$THENIFY = require('thenify');\n...\n"
            },
            {
              "pattern-inside": "import 'thenify';\n...\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.vm2.security.audit.vm2-code-injection",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Make sure that unverified user data can not reach `vm2`.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-94: Improper Control of Generation of Code ('Code Injection')"
        ],
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "vm2"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "require('vm2');\n...\n"
        },
        {
          "pattern-not-inside": "$CODE = \"...\";\n...\n"
        },
        {
          "pattern-not-inside": "require('vm2');\n...\n$CODE = new VMScript(...);\n...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "$VM = new VM(...);\n...\n$VM.run($CODE,...);\n"
            },
            {
              "pattern": "new VM(...).run($CODE,...);\n"
            },
            {
              "pattern": "$VM = new NodeVM(...);\n...\n$VM.run($CODE,...);\n"
            },
            {
              "pattern": "new NodeVM(...).run($CODE,...);\n"
            },
            {
              "pattern": "new VMScript($CODE,...);\n"
            }
          ]
        },
        {
          "pattern-not": "$VM = new VM(...);\n...\n$VM.run(\"...\",...);\n"
        },
        {
          "pattern-not": "$VM = new NodeVM(...);\n...\n$VM.run(\"...\",...);\n"
        },
        {
          "pattern-not": "(new VM(...)).run(\"...\",...);\n"
        },
        {
          "pattern-not": "(new NodeVM(...)).run(\"...\",...);\n"
        },
        {
          "pattern-not": "new VMScript(\"...\",...);"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.vm2.security.audit.vm2-context-injection",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Make sure that unverified user data can not reach `vm2`.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-94: Improper Control of Generation of Code ('Code Injection')"
        ],
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "vm2"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "$VM = require('vm2');\n...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "function (...,$INPUT,...) {\n  ...\n  new VM({sandbox: <... $INPUT ...>},...);\n  ...\n}\n"
            },
            {
              "pattern": "function (...,$INPUT,...) {\n  ...\n  $CONTEXT = <... $INPUT ...>;\n  ...\n  new VM({sandbox: <... $CONTEXT ...>},...);\n  ...\n}\n"
            },
            {
              "pattern": "function (...,$INPUT,...) {\n  ...\n  $CONTEXT = <... {$NAME:$INPUT} ...>;\n  ...\n  new VM({sandbox: <... $CONTEXT ...>},...);\n  ...\n}\n"
            },
            {
              "pattern": "function (...,$INPUT,...) {\n  ...\n  $CONTEXT = {$NAME: <... $INPUT ...>};\n  ...\n  new VM({sandbox: <... $CONTEXT ...>},...);\n  ...\n}\n"
            },
            {
              "pattern": "function (...,$INPUT,...) {\n  ...\n  $VAR = <... $INPUT ...>;\n  ...\n  $CONTEXT = {$NAME: <... $VAR ...>};\n  ...\n  new VM({sandbox: <... $CONTEXT ...>},...);\n  ...\n}\n"
            },
            {
              "pattern": "function (...,$INPUT,...) {\n  ...\n  $OPTS = {sandbox: <... $INPUT ...>};\n  ...\n  new VM($OPTS,...);\n  ...\n}\n"
            },
            {
              "pattern": "function (...,$INPUT,...) {\n  ...\n  $CONTEXT = <... $INPUT ...>;\n  ...\n  $OPTS = {sandbox: <... $CONTEXT ...>};\n  ...\n  new VM($OPTS,...);\n  ...\n}\n"
            },
            {
              "pattern": "function (...,$INPUT,...) {\n  ...\n  $CONTEXT = {$NAME: <... $INPUT ...>};\n  ...\n  $OPTS = {sandbox: <... $CONTEXT ...>};\n  ...\n  new VM($OPTS,...);\n  ...\n}\n"
            },
            {
              "pattern": "function (...,$INPUT,...) {\n  ...\n  $VAR = <... $INPUT ...>;\n  ...\n  $CONTEXT = {$NAME: <... $VAR ...>};\n  ...\n  $OPTS = {sandbox: <... $CONTEXT ...>};\n  ...\n  new VM($OPTS,...);\n  ...\n}\n"
            },
            {
              "pattern": "function $F(...,$INPUT,...) {\n  ...\n  new VM({sandbox: <... $INPUT ...>},...);\n  ...\n}\n"
            },
            {
              "pattern": "function $F(...,$INPUT,...) {\n  ...\n  $CONTEXT = <... $INPUT ...>;\n  ...\n  new VM({sandbox: <... $CONTEXT ...>},...);\n  ...\n}\n"
            },
            {
              "pattern": "function $F(...,$INPUT,...) {\n  ...\n  $CONTEXT = <... {$NAME:$INPUT} ...>;\n  ...\n  new VM({sandbox: <... $CONTEXT ...>},...);\n  ...\n}\n"
            },
            {
              "pattern": "function $F(...,$INPUT,...) {\n  ...\n  $CONTEXT = {$NAME: <... $INPUT ...>};\n  ...\n  new VM({sandbox: <... $CONTEXT ...>},...);\n  ...\n}\n"
            },
            {
              "pattern": "function $F(...,$INPUT,...) {\n  ...\n  $VAR = <... $INPUT ...>;\n  ...\n  $CONTEXT = {$NAME: <... $VAR ...>};\n  ...\n  new VM({sandbox: <... $CONTEXT ...>},...);\n  ...\n}\n"
            },
            {
              "pattern": "function $F(...,$INPUT,...) {\n  ...\n  $OPTS = {sandbox: <... $INPUT ...>};\n  ...\n  new VM($OPTS,...);\n  ...\n}\n"
            },
            {
              "pattern": "function $F(...,$INPUT,...) {\n  ...\n  $CONTEXT = <... $INPUT ...>;\n  ...\n  $OPTS = {sandbox: <... $CONTEXT ...>};\n  ...\n  new VM($OPTS,...);\n  ...\n}\n"
            },
            {
              "pattern": "function $F(...,$INPUT,...) {\n  ...\n  $CONTEXT = {$NAME: <... $INPUT ...>};\n  ...\n  $OPTS = {sandbox: <... $CONTEXT ...>};\n  ...\n  new VM($OPTS,...);\n  ...\n}\n"
            },
            {
              "pattern": "function $F(...,$INPUT,...) {\n  ...\n  $VAR = <... $INPUT ...>;\n  ...\n  $CONTEXT = {$NAME: <... $VAR ...>};\n  ...\n  $OPTS = {sandbox: <... $CONTEXT ...>};\n  ...\n  new VM($OPTS,...);\n  ...\n}\n"
            },
            {
              "pattern": "function (...,$INPUT,...) {\n  ...\n  new NodeVM({sandbox: <... $INPUT ...>},...);\n  ...\n}\n"
            },
            {
              "pattern": "function (...,$INPUT,...) {\n  ...\n  $CONTEXT = <... $INPUT ...>;\n  ...\n  new NodeVM({sandbox: <... $CONTEXT ...>},...);\n  ...\n}\n"
            },
            {
              "pattern": "function (...,$INPUT,...) {\n  ...\n  $CONTEXT = <... {$NAME:$INPUT} ...>;\n  ...\n  new NodeVM({sandbox: <... $CONTEXT ...>},...);\n  ...\n}\n"
            },
            {
              "pattern": "function (...,$INPUT,...) {\n  ...\n  $CONTEXT = {$NAME: <... $INPUT ...>};\n  ...\n  new NodeVM({sandbox: <... $CONTEXT ...>},...);\n  ...\n}\n"
            },
            {
              "pattern": "function (...,$INPUT,...) {\n  ...\n  $VAR = <... $INPUT ...>;\n  ...\n  $CONTEXT = {$NAME: <... $VAR ...>};\n  ...\n  new NodeVM({sandbox: <... $CONTEXT ...>},...);\n  ...\n}\n"
            },
            {
              "pattern": "function (...,$INPUT,...) {\n  ...\n  $OPTS = {sandbox: <... $INPUT ...>};\n  ...\n  new NodeVM($OPTS,...);\n  ...\n}\n"
            },
            {
              "pattern": "function (...,$INPUT,...) {\n  ...\n  $CONTEXT = <... $INPUT ...>;\n  ...\n  $OPTS = {sandbox: <... $CONTEXT ...>};\n  ...\n  new NodeVM($OPTS,...);\n  ...\n}\n"
            },
            {
              "pattern": "function (...,$INPUT,...) {\n  ...\n  $CONTEXT = {$NAME: <... $INPUT ...>};\n  ...\n  $OPTS = {sandbox: <... $CONTEXT ...>};\n  ...\n  new NodeVM($OPTS,...);\n  ...\n}\n"
            },
            {
              "pattern": "function (...,$INPUT,...) {\n  ...\n  $VAR = <... $INPUT ...>;\n  ...\n  $CONTEXT = {$NAME: <... $VAR ...>};\n  ...\n  $OPTS = {sandbox: <... $CONTEXT ...>};\n  ...\n  new NodeVM($OPTS,...);\n  ...\n}\n"
            },
            {
              "pattern": "function $F(...,$INPUT,...) {\n  ...\n  new NodeVM({sandbox: <... $INPUT ...>},...);\n  ...\n}\n"
            },
            {
              "pattern": "function $F(...,$INPUT,...) {\n  ...\n  $CONTEXT = <... $INPUT ...>;\n  ...\n  new NodeVM({sandbox: <... $CONTEXT ...>},...);\n  ...\n}\n"
            },
            {
              "pattern": "function $F(...,$INPUT,...) {\n  ...\n  $CONTEXT = <... {$NAME:$INPUT} ...>;\n  ...\n  new NodeVM({sandbox: <... $CONTEXT ...>},...);\n  ...\n}\n"
            },
            {
              "pattern": "function $F(...,$INPUT,...) {\n  ...\n  $CONTEXT = {$NAME: <... $INPUT ...>};\n  ...\n  new NodeVM({sandbox: <... $CONTEXT ...>},...);\n  ...\n}\n"
            },
            {
              "pattern": "function $F(...,$INPUT,...) {\n  ...\n  $VAR = <... $INPUT ...>;\n  ...\n  $CONTEXT = {$NAME: <... $VAR ...>};\n  ...\n  new NodeVM({sandbox: <... $CONTEXT ...>},...);\n  ...\n}\n"
            },
            {
              "pattern": "function $F(...,$INPUT,...) {\n  ...\n  $OPTS = {sandbox: <... $INPUT ...>};\n  ...\n  new NodeVM($OPTS,...);\n  ...\n}\n"
            },
            {
              "pattern": "function $F(...,$INPUT,...) {\n  ...\n  $CONTEXT = <... $INPUT ...>;\n  ...\n  $OPTS = {sandbox: <... $CONTEXT ...>};\n  ...\n  new NodeVM($OPTS,...);\n  ...\n}\n"
            },
            {
              "pattern": "function $F(...,$INPUT,...) {\n  ...\n  $CONTEXT = {$NAME: <... $INPUT ...>};\n  ...\n  $OPTS = {sandbox: <... $CONTEXT ...>};\n  ...\n  new NodeVM($OPTS,...);\n  ...\n}\n"
            },
            {
              "pattern": "function $F(...,$INPUT,...) {\n  ...\n  $VAR = <... $INPUT ...>;\n  ...\n  $CONTEXT = {$NAME: <... $VAR ...>};\n  ...\n  $OPTS = {sandbox: <... $CONTEXT ...>};\n  ...\n  new NodeVM($OPTS,...);\n  ...\n}"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.vue.security.audit.xss.templates.avoid-v-html",
      "languages": [
        "regex"
      ],
      "message": "Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to XSS vulnerabilities. Only use HTML interpolation on trusted content and never on user-provided content.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://vuejs.org/v2/guide/syntax.html#Raw-HTML"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "vue"
        ]
      },
      "paths": {
        "include": [
          "*.vue"
        ]
      },
      "pattern-regex": "<[^<>]*v-html=",
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.wkhtmltoimage.security.audit.wkhtmltoimage-injection",
      "languages": [
        "js",
        "ts"
      ],
      "message": "If unverified user data can reach the `wkhtmltoimage` it can result in Server-Side Request Forgery vulnerabilities",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-918: Server-Side Request Forgery (SSRF)"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A10:2021 - Server-Side Request Forgery (SSRF)"
        ],
        "references": [
          "https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "wkhtmltoimage"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "$WK = require('wkhtmltoimage');\n...\n"
        },
        {
          "pattern-not-inside": "var $INPUT = \"...\";\n...\n"
        },
        {
          "pattern": "$WK.generate($INPUT,...)"
        },
        {
          "pattern-not": "$WK.generate(\"...\",...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.wkhtmltopdf.security.audit.wkhtmltopdf-injection",
      "languages": [
        "js",
        "ts"
      ],
      "message": "If unverified user data can reach the `wkhtmltopdf` it can result in Server-Side Request Forgery vulnerabilities",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-918: Server-Side Request Forgery (SSRF)"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A10:2021 - Server-Side Request Forgery (SSRF)"
        ],
        "references": [
          "https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "wkhtmltopdf"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "$WK = require('wkhtmltopdf');\n...\n"
        },
        {
          "pattern-not-inside": "var $INPUT = \"...\";\n...\n"
        },
        {
          "pattern": "$WK($INPUT,...)"
        },
        {
          "pattern-not": "$WK(\"...\",...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.javascript.xml2json.security.audit.xml2json-xxe",
      "languages": [
        "js",
        "ts"
      ],
      "message": "If unverified user data can reach the XML Parser it can result in XML External or Internal Entity (XXE) Processing vulnerabilities",
      "metadata": {
        "asvs": {
          "control_id": "5.5.2 Insecue XML Deserialization",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention",
          "section": "V5 Validation, Sanitization and Encoding",
          "version": "4"
        },
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-611: Improper Restriction of XML External Entity Reference"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A04:2017 - XML External Entities (XXE)",
          "A05:2021 - Security Misconfiguration"
        ],
        "references": [
          "https://owasp.org/Top10/A05_2021-Security_Misconfiguration"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "xml2json"
        ]
      },
      "patterns": [
        {
          "pattern": "var $XML = require('xml2json');\n...\n$XML.toJson(...);\n"
        },
        {
          "pattern-not": "var $XML = require('xml2json');\n...\n$XML.toJson(\"...\",...);\n"
        },
        {
          "pattern-not": "var $XML = require('xml2json');\n...\nvar $S = \"...\";\n...\n$XML.toJson($S,...);"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.problem-based-packs.insecure-transport.js-node.bypass-tls-verification",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Checks for setting the environment variable NODE_TLS_REJECT_UNAUTHORIZED to 0, which disables TLS verification. This should only be used for debugging purposes. Setting the option rejectUnauthorized to false bypasses verification against the list of trusted CAs, which also leads to insecure transport. These options lead to vulnerability to MTM attacks, and should not be used.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": "CWE-319: Cleartext Transmission of Sensitive Information",
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": "A03:2017 - Sensitive Data Exposure",
        "references": [
          "https://nodejs.org/api/https.html#https_https_request_options_callback",
          "https://stackoverflow.com/questions/20433287/node-js-request-cert-has-expired#answer-29397100"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "node.js"
        ],
        "vulnerability": "Insecure Transport"
      },
      "pattern-either": [
        {
          "pattern": "process.env[\"NODE_TLS_REJECT_UNAUTHORIZED\"] = 0;\n"
        },
        {
          "pattern": "{rejectUnauthorized:false}\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.problem-based-packs.insecure-transport.js-node.disallow-old-tls-versions1",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detects direct creations of $HTTPS servers that don't disallow SSL v2, SSL v3, and TLS v1. These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": "CWE-319: Cleartext Transmission of Sensitive Information",
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": "A03:2017 - Sensitive Data Exposure",
        "references": [
          "https://us-cert.cisa.gov/ncas/alerts/TA14-290A",
          "https://stackoverflow.com/questions/40434934/how-to-disable-the-ssl-3-0-and-tls-1-0-in-nodejs",
          "https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "node.js"
        ],
        "vulnerability": "Insecure Transport"
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern-inside": "$CONST = require('crypto');\n...\n"
            },
            {
              "pattern-inside": "$CONST = require('constants');\n...\n"
            }
          ]
        },
        {
          "pattern-inside": "$HTTPS = require('https');\n...\n"
        },
        {
          "pattern": "$HTTPS.createServer(...).$FUNC(...);\n"
        },
        {
          "pattern-not": "$HTTPS.createServer({secureOptions: $CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_SSLv2 }, ...).$FUNC(...);\n"
        },
        {
          "pattern-not": "$HTTPS.createServer({secureOptions: $CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv2 |$CONST.SSL_OP_NO_SSLv3 }, ...).$FUNC(...);\n"
        },
        {
          "pattern-not": "$HTTPS.createServer({secureOptions: $CONST.SSL_OP_NO_SSLv2 |$CONST.SSL_OP_NO_SSLv3 |$CONST.SSL_OP_NO_TLSv1 }, ...).$FUNC(...);\n"
        },
        {
          "pattern-not": "$HTTPS.createServer({secureOptions: $CONST.SSL_OP_NO_SSLv2 |$CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv3}, ...).$FUNC(...);\n"
        },
        {
          "pattern-not": "$HTTPS.createServer({secureOptions:$CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_SSLv2 |$CONST.SSL_OP_NO_TLSv1}, ...).$FUNC(...);\n"
        },
        {
          "pattern-not": "$HTTPS.createServer({secureOptions:$CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_TLSv1| $CONST.SSL_OP_NO_SSLv2}, ...).$FUNC(...);\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.problem-based-packs.insecure-transport.js-node.disallow-old-tls-versions2",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detects creations of $HTTPS servers from option objects that don't disallow SSL v2, SSL v3, and TLS v1. These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": "CWE-319: Cleartext Transmission of Sensitive Information",
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": "A03:2017 - Sensitive Data Exposure",
        "references": [
          "https://us-cert.cisa.gov/ncas/alerts/TA14-290A",
          "https://stackoverflow.com/questions/40434934/how-to-disable-the-ssl-3-0-and-tls-1-0-in-nodejs",
          "https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "node.js"
        ],
        "vulnerability": "Insecure Transport"
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern-inside": "$CONST = require('crypto');\n...\n"
            },
            {
              "pattern-inside": "$CONST = require('constants');\n...\n"
            }
          ]
        },
        {
          "pattern-inside": "$HTTPS = require('https');\n...\n"
        },
        {
          "pattern": "$OPTIONS = {};\n...\n$HTTPS.createServer($OPTIONS, ...);\n"
        },
        {
          "pattern-not": "$OPTIONS = {secureOptions: $CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_SSLv2};\n...\n$HTTPS.createServer($OPTIONS, ...);\n"
        },
        {
          "pattern-not": "$OPTIONS = {secureOptions: $CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv2 | $CONST.SSL_OP_NO_SSLv3};\n...\n$HTTPS.createServer($OPTIONS, ...);\n"
        },
        {
          "pattern-not": "$OPTIONS = {secureOptions: $CONST.SSL_OP_NO_SSLv2  | $CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv3};\n...\n$HTTPS.createServer($OPTIONS, ...);\n"
        },
        {
          "pattern-not": "$OPTIONS = {secureOptions: $CONST.SSL_OP_NO_SSLv2 | $CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_TLSv1};\n...\n$HTTPS.createServer($OPTIONS, ...);\n"
        },
        {
          "pattern-not": "$OPTIONS = {secureOptions: $CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_SSLv2 | $CONST.SSL_OP_NO_TLSv1};\n...\n$HTTPS.createServer($OPTIONS, ...);\n"
        },
        {
          "pattern-not": "$OPTIONS = {secureOptions: $CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv2};\n...\n$HTTPS.createServer($OPTIONS, ...);\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.problem-based-packs.insecure-transport.js-node.ftp-request",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Checks for lack of usage of the \"secure: true\" option when sending ftp requests through the nodejs ftp module. This leads to unencrypted traffic being sent to the ftp server. There are other options such as \"implicit\" that still does not encrypt all traffic. ftp is the most utilized npm ftp module.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": "CWE-319: Cleartext Transmission of Sensitive Information",
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": "A03:2017 - Sensitive Data Exposure",
        "references": [
          "https://www.npmjs.com/package/ftp",
          "https://openbase.io/js/ftp"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "node.js"
        ],
        "vulnerability": "Insecure Transport"
      },
      "patterns": [
        {
          "pattern-inside": "$X = require('ftp');\n...\n$C = new $X();\n...\n"
        },
        {
          "pattern-not-inside": "$OPTIONS = {secure: true};\n...\n"
        },
        {
          "pattern": "$C.connect($OPTIONS,...);\n"
        },
        {
          "pattern-not": "$C.connect({...,secure: true});\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.problem-based-packs.insecure-transport.js-node.http-request",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Checks for requests sent to http:// URLs. This is dangerous as the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, only send requests to https:// URLs.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": "CWE-319: Cleartext Transmission of Sensitive Information",
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": "A03:2017 - Sensitive Data Exposure",
        "references": [
          "https://nodejs.org/api/http.html#http_http_request_options_callback"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "node.js"
        ],
        "vulnerability": "Insecure Transport"
      },
      "patterns": [
        {
          "pattern-inside": "$HTTP = require('http');\n...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "$HTTP.request(\"=~/http://.*/\",...);\n"
            },
            {
              "pattern": "$HTTP.get(\"=~/http://.*/\", ...)\n"
            },
            {
              "pattern": "$VAR = new URL(\"=~/http://.*/\");\n...\n$HTTP.request($VAR, ...);\n"
            },
            {
              "pattern": "$VAR = {...,hostname: \"...\"};\n...\n$HTTP.request(..., $VAR, ...);\n"
            },
            {
              "pattern": "$HTTP.request(..., {...,hostname: \"...\"}, ...);\n"
            }
          ]
        },
        {
          "pattern-not": "$VAR = {...,protocol: \"https\"};\n...\n$HTTP.request(..., $VAR, ...);\n"
        },
        {
          "pattern-not": "$HTTP.request(..., {...,protocol: \"https\"}, ...);\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.problem-based-packs.insecure-transport.js-node.rest-http-client-support",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Checks for requests to http (unencrypted) sites using some of node js's most popular REST/HTTP libraries, including node-rest-client, axios, and got.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": "CWE-319: Cleartext Transmission of Sensitive Information",
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": "A03:2017 - Sensitive Data Exposure",
        "references": [
          "https://www.npmjs.com/package/axios",
          "https://www.npmjs.com/package/got",
          "https://www.npmjs.com/package/node-rest-client"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "node.js"
        ],
        "vulnerability": "Insecure Transport"
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern-inside": "$CLIENT = require('node-rest-client').Client;\n...\n$C = new $CLIENT();\n...\n"
            },
            {
              "pattern-inside": "$C = require('axios');\n...\n"
            },
            {
              "pattern-inside": "$C = require('got');\n...\n"
            }
          ]
        },
        {
          "pattern-either": [
            {
              "pattern": "$C.$REQ(\"=~/http://.*/\", ...)\n"
            },
            {
              "pattern": "$C(\"=~/http://.*/\", ...)\n"
            },
            {
              "pattern": "$C({...,url: \"=~/http://.*/\"})\n"
            },
            {
              "pattern": "$C.$REQ({...,url: \"=~/http://.*/\"})\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.problem-based-packs.insecure-transport.js-node.telnet-request",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Checks for creation of telnet servers or attempts to connect through telnet. This is insecure as the telnet protocol supports no encryption, and data passes through unencrypted.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": "CWE-319: Cleartext Transmission of Sensitive Information",
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": "A03:2017 - Sensitive Data Exposure",
        "references": [
          "https://www.npmjs.com/package/telnet",
          "https://www.npmjs.com/package/telnet-client"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "node.js"
        ],
        "vulnerability": "Insecure Transport"
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern-inside": "$TEL = require('telnet-client');\n...\n$SERVER = new $TEL();\n...\n"
            },
            {
              "pattern-inside": "$SERVER = require('telnet');\n...\n"
            }
          ]
        },
        {
          "pattern-either": [
            {
              "pattern": "$SERVER.on(...)\n"
            },
            {
              "pattern": "$SERVER.connect(...)\n"
            },
            {
              "pattern": "$SERVER.createServer(...)\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.problem-based-packs.insecure-transport.js-node.using-http-server",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Checks for any usage of http servers instead of https servers. Encourages the usage of https protocol instead of http, which does not have TLS and is therefore unencrypted. Using http can lead to man-in-the-middle attacks in which the attacker is able to read sensitive information.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": "CWE-319: Cleartext Transmission of Sensitive Information",
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A02:2021 - Cryptographic Failures",
          "A03:2017 - Sensitive Data Exposure"
        ],
        "references": [
          "https://nodejs.org/api/http.html#http_class_http_agent",
          "https://groups.google.com/g/rubyonrails-security/c/NCCsca7TEtY"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "node.js"
        ],
        "vulnerability": "Insecure Transport"
      },
      "patterns": [
        {
          "pattern-inside": "$HTTP = require('http');\n...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "$HTTP.$FUNC(...);\n"
            },
            {
              "pattern": "new $HTTP.$FUNC2(...);\n"
            }
          ]
        },
        {
          "pattern": "$HTTP"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.airflow.security.audit.formatted-string-bashoperator",
      "languages": [
        "python"
      ],
      "message": "Found a formatted string in BashOperator: $CMD. This could be vulnerable to injection. Be extra sure your variables are not controllable by external sources.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "airflow"
        ]
      },
      "pattern-either": [
        {
          "pattern": "airflow.operators.bash_operator.BashOperator(..., bash_command=\"...\" + $CONCAT, ...)\n"
        },
        {
          "pattern": "airflow.operators.bash_operator.BashOperator(..., bash_command=\"...\".format(...), ...)\n"
        },
        {
          "pattern": "airflow.operators.bash_operator.BashOperator(..., bash_command=f\"...\", ...)\n"
        },
        {
          "pattern": "airflow.operators.bash_operator.BashOperator(..., bash_command=\"...\" % $PARAMS, ...)\n"
        },
        {
          "pattern": "$CMD = \"...\" % $PARAMS\n...\nairflow.operators.bash_operator.BashOperator(..., bash_command=$CMD, ...)\n"
        },
        {
          "pattern": "$CMD = $STR.format(...)\n...\nairflow.operators.bash_operator.BashOperator(..., bash_command=$CMD, ...)\n"
        },
        {
          "pattern": "$CMD = f\"...\"\n...\nairflow.operators.bash_operator.BashOperator(..., bash_command=$CMD, ...)\n"
        },
        {
          "pattern": "$CMD = \"...\" + $CONCAT\n...\nairflow.operators.bash_operator.BashOperator(..., bash_command=$CMD, ...)\n"
        },
        {
          "pattern": "$CMD = \"...\"\n...\n$CMD += $CONCAT\n...\nairflow.operators.bash_operator.BashOperator(..., bash_command=$CMD, ...)\n"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.aws-lambda.security.dangerous-asyncio-create-exec",
      "languages": [
        "python"
      ],
      "message": "Detected 'create_subprocess_exec' function with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.",
      "metadata": {
        "asvs": {
          "control_id": "5.3.8 OS Command Injection",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.create_subprocess_exec",
          "https://docs.python.org/3/library/shlex.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "focus-metavariable": "$CMD"
            },
            {
              "pattern-either": [
                {
                  "pattern": "asyncio.create_subprocess_exec($PROG, $CMD, ...)"
                },
                {
                  "pattern": "asyncio.create_subprocess_exec($PROG, [$CMD, ...], ...)"
                },
                {
                  "pattern": "asyncio.subprocess.create_subprocess_exec($PROG, $CMD, ...)"
                },
                {
                  "pattern": "asyncio.subprocess.create_subprocess_exec($PROG, [$CMD, ...], ...)"
                },
                {
                  "pattern": "asyncio.create_subprocess_exec($PROG, \"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", $CMD, ...)"
                },
                {
                  "pattern": "asyncio.create_subprocess_exec($PROG, [\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", $CMD, ...], ...)"
                },
                {
                  "pattern": "asyncio.subprocess.create_subprocess_exec($PROG, \"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", $CMD, ...)"
                },
                {
                  "pattern": "asyncio.subprocess.create_subprocess_exec($PROG, [\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", $CMD, ...], ...)"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "event"
            },
            {
              "pattern-inside": "def $HANDLER(event, context):\n  ...\n"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.aws-lambda.security.dangerous-asyncio-exec",
      "languages": [
        "python"
      ],
      "message": "Detected subprocess function '$LOOP.subprocess_exec' with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.",
      "metadata": {
        "asvs": {
          "control_id": "5.3.8 OS Command Injection",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.subprocess_exec",
          "https://docs.python.org/3/library/shlex.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python",
          "aws-lambda"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "focus-metavariable": "$CMD"
            },
            {
              "pattern-either": [
                {
                  "pattern": "$LOOP.subprocess_exec($PROTOCOL, $CMD, ...)"
                },
                {
                  "pattern": "$LOOP.subprocess_exec($PROTOCOL, [$CMD, ...], ...)"
                },
                {
                  "pattern": "$LOOP.subprocess_exec($PROTOCOL, \"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", $CMD, ...)"
                },
                {
                  "pattern": "$LOOP.subprocess_exec($PROTOCOL, [\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", $CMD, ...], ...)"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "event"
            },
            {
              "pattern-inside": "def $HANDLER(event, context):\n  ...\n"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.aws-lambda.security.dangerous-asyncio-shell",
      "languages": [
        "python"
      ],
      "message": "Detected asyncio subprocess function with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.",
      "metadata": {
        "asvs": {
          "control_id": "5.3.8 OS Command Injection",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.python.org/3/library/asyncio-subprocess.html",
          "https://docs.python.org/3/library/shlex.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python",
          "aws-lambda"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "focus-metavariable": "$CMD"
            },
            {
              "pattern-either": [
                {
                  "pattern": "$LOOP.subprocess_shell($PROTOCOL, $CMD)"
                },
                {
                  "pattern": "asyncio.subprocess.create_subprocess_shell($CMD, ...)"
                },
                {
                  "pattern": "asyncio.create_subprocess_shell($CMD, ...)"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "event"
            },
            {
              "pattern-inside": "def $HANDLER(event, context):\n  ...\n"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.aws-lambda.security.dangerous-spawn-process",
      "languages": [
        "python"
      ],
      "message": "Detected `os` function with argument tainted by `event` object. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.",
      "metadata": {
        "asvs": {
          "control_id": "5.3.8 OS Command Injection",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python",
          "aws-lambda"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "focus-metavariable": "$CMD"
            },
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern": "os.$METHOD($MODE, $CMD, ...)"
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "(spawnl|spawnle|spawnlp|spawnlpe|spawnv|spawnve|spawnvp|spawnvp|spawnvpe|posix_spawn|posix_spawnp|startfile)"
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "os.$METHOD($MODE, $BASH, [\"-c\", $CMD,...],...)"
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "(spawnv|spawnve|spawnvp|spawnvp|spawnvpe|posix_spawn|posix_spawnp)"
                      }
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$BASH",
                        "regex": "(.*)(sh|bash|ksh|csh|tcsh|zsh)"
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "os.$METHOD($MODE, $BASH, \"-c\", $CMD,...)"
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "(spawnl|spawnle|spawnlp|spawnlpe)"
                      }
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$BASH",
                        "regex": "(.*)(sh|bash|ksh|csh|tcsh|zsh)"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "event"
            },
            {
              "pattern-inside": "def $HANDLER(event, context):\n  ...\n"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.aws-lambda.security.dangerous-subprocess-use",
      "languages": [
        "python"
      ],
      "message": "Detected subprocess function with argument tainted by an `event` object.  If this data can be controlled by a malicious actor, it may be an instance of command injection. The default option for `shell` is False, and this is secure by default. Consider removing the `shell=True` or setting it to False explicitely. Using `shell=False` means you have to split the command string into an array of strings for the command and its arguments. You may consider using 'shlex.split()' for this purpose.",
      "metadata": {
        "asvs": {
          "control_id": "5.3.8 OS Command Injection",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.python.org/3/library/subprocess.html",
          "https://docs.python.org/3/library/shlex.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python",
          "aws-lambda"
        ]
      },
      "mode": "taint",
      "pattern-sanitizers": [
        {
          "pattern": "shlex.split(...)"
        },
        {
          "pattern": "pipes.quote(...)"
        },
        {
          "pattern": "shlex.quote(...)"
        }
      ],
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern": "subprocess.$FUNC(..., shell=True, ...)"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "event"
            },
            {
              "pattern-inside": "def $HANDLER(event, context):\n  ...\n"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.aws-lambda.security.dangerous-system-call",
      "languages": [
        "python"
      ],
      "message": "Detected `os` function with argument tainted by `event` object. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.",
      "metadata": {
        "asvs": {
          "control_id": "5.2.4 Dyanmic Code Execution Features",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "focus-metavariable": "$CMD"
            },
            {
              "pattern-either": [
                {
                  "pattern": "os.system($CMD,...)"
                },
                {
                  "pattern": "os.popen($CMD,...)"
                },
                {
                  "pattern": "os.popen2($CMD,...)"
                },
                {
                  "pattern": "os.popen3($CMD,...)"
                },
                {
                  "pattern": "os.popen4($CMD,...)"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "event"
            },
            {
              "pattern-inside": "def $HANDLER(event, context):\n  ...\n"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.aws-lambda.security.dynamodb-filter-injection",
      "languages": [
        "python"
      ],
      "message": "Detected DynamoDB query filter that is tainted by `$EVENT` object. This could lead to NoSQL injection if the variable is user-controlled and not properly sanitized. Explicitly assign query params instead of passing data from `$EVENT` directly to DynamoDB client.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-943: Improper Neutralization of Special Elements in Data Query Logic"
        ],
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection"
        ],
        "references": [
          "https://medium.com/appsecengineer/dynamodb-injection-1db99c2454ac"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python",
          "boto3",
          "aws-lambda",
          "dynamodb"
        ]
      },
      "mode": "taint",
      "pattern-sanitizers": [
        {
          "patterns": [
            {
              "pattern": "{...}\n"
            }
          ]
        }
      ],
      "pattern-sinks": [
        {
          "patterns": [
            {
              "focus-metavariable": "$SINK"
            },
            {
              "pattern-either": [
                {
                  "pattern": "$TABLE.scan(..., ScanFilter = $SINK, ...)"
                },
                {
                  "pattern": "$TABLE.query(..., QueryFilter = $SINK, ...)"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-inside": "$TABLE = $DB.Table(...)\n...\n"
                    },
                    {
                      "pattern-inside": "$DB = boto3.resource('dynamodb', ...)\n...\n"
                    }
                  ]
                },
                {
                  "pattern-inside": "$TABLE = boto3.client('dynamodb', ...)\n...\n"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "event"
            },
            {
              "pattern-inside": "def $HANDLER(event, context):\n  ...\n"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.aws-lambda.security.mysql-sqli",
      "languages": [
        "python"
      ],
      "message": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', ('active'))`",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://dev.mysql.com/doc/connector-python/en/connector-python-api-mysqlcursor-execute.html",
          "https://dev.mysql.com/doc/connector-python/en/connector-python-api-mysqlcursor-executemany.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "aws-lambda",
          "mysql"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "focus-metavariable": "$QUERY"
            },
            {
              "pattern-either": [
                {
                  "pattern": "$CURSOR.execute($QUERY,...)"
                },
                {
                  "pattern": "$CURSOR.executemany($QUERY,...)"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "import mysql\n...\n"
                },
                {
                  "pattern-inside": "import mysql.cursors\n...\n"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "event"
            },
            {
              "pattern-inside": "def $HANDLER(event, context):\n  ...\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.aws-lambda.security.psycopg-sqli",
      "languages": [
        "python"
      ],
      "message": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', 'active')`",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://www.psycopg.org/docs/cursor.html#cursor.execute",
          "https://www.psycopg.org/docs/cursor.html#cursor.executemany",
          "https://www.psycopg.org/docs/cursor.html#cursor.mogrify"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "aws-lambda",
          "psycopg",
          "psycopg2"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "focus-metavariable": "$QUERY"
            },
            {
              "pattern-either": [
                {
                  "pattern": "$CURSOR.execute($QUERY,...)"
                },
                {
                  "pattern": "$CURSOR.executemany($QUERY,...)"
                },
                {
                  "pattern": "$CURSOR.mogrify($QUERY,...)"
                }
              ]
            },
            {
              "pattern-inside": "import psycopg2\n...\n"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "event"
            },
            {
              "pattern-inside": "def $HANDLER(event, context):\n  ...\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.aws-lambda.security.pymssql-sqli",
      "languages": [
        "python"
      ],
      "message": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', 'active')`",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://pypi.org/project/pymssql/"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "aws-lambda",
          "pymssql"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "focus-metavariable": "$QUERY"
            },
            {
              "pattern": "$CURSOR.execute($QUERY,...)"
            },
            {
              "pattern-inside": "import pymssql\n...\n"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "event"
            },
            {
              "pattern-inside": "def $HANDLER(event, context):\n  ...\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.aws-lambda.security.pymysql-sqli",
      "languages": [
        "python"
      ],
      "message": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', ('active'))`",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://pypi.org/project/PyMySQL/#id4"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "aws-lambda",
          "pymysql"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "focus-metavariable": "$QUERY"
            },
            {
              "pattern": "$CURSOR.execute($QUERY,...)"
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "import pymysql\n...\n"
                },
                {
                  "pattern-inside": "import pymysql.cursors\n...\n"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "event"
            },
            {
              "pattern-inside": "def $HANDLER(event, context):\n  ...\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.aws-lambda.security.sqlalchemy-sqli",
      "languages": [
        "python"
      ],
      "message": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = ?', 'active')`",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.sqlalchemy.org/en/14/core/connections.html#sqlalchemy.engine.Connection.execute"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "aws-lambda",
          "sqlalchemy"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "focus-metavariable": "$QUERY"
            },
            {
              "pattern": "$CURSOR.execute($QUERY,...)"
            },
            {
              "pattern-inside": "import sqlalchemy\n...\n"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "event"
            },
            {
              "pattern-inside": "def $HANDLER(event, context):\n  ...\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.aws-lambda.security.tainted-code-exec",
      "languages": [
        "python"
      ],
      "message": "Detected the use of `exec/eval`.This can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.",
      "metadata": {
        "asvs": {
          "control_id": "5.2.4 Dyanmic Code Execution Features",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "eval($CODE, ...)"
                },
                {
                  "pattern": "exec($CODE, ...)"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "event"
            },
            {
              "pattern-inside": "def $HANDLER(event, context):\n  ...\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.aws-lambda.security.tainted-html-response",
      "languages": [
        "python"
      ],
      "message": "Detected user input flowing into an HTML response. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "HIGH",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "aws-lambda"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern": "$BODY"
            },
            {
              "pattern-inside": "{..., \"headers\": {..., \"Content-Type\": \"text/html\", ...}, \"body\": $BODY, ... }\n"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "event"
            },
            {
              "pattern-inside": "def $HANDLER(event, context):\n  ...\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.aws-lambda.security.tainted-html-string",
      "languages": [
        "python"
      ],
      "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates which will safely render HTML instead.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "HIGH",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "aws-lambda"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "\"$HTMLSTR\" % ..."
                        },
                        {
                          "pattern": "\"$HTMLSTR\".format(...)"
                        },
                        {
                          "pattern": "\"$HTMLSTR\" + ..."
                        },
                        {
                          "pattern": "f\"$HTMLSTR{...}...\""
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "$HTML = \"$HTMLSTR\"\n...\n"
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "$HTML % ..."
                        },
                        {
                          "pattern": "$HTML.format(...)"
                        },
                        {
                          "pattern": "$HTML + ..."
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "metavariable-pattern": {
                "language": "generic",
                "metavariable": "$HTMLSTR",
                "pattern": "<$TAG ..."
              }
            },
            {
              "pattern-not-inside": "print(...)\n"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "event"
            },
            {
              "pattern-inside": "def $HANDLER(event, context):\n  ...\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.aws-lambda.security.tainted-pickle-deserialization",
      "languages": [
        "python"
      ],
      "message": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-502: Deserialization of Untrusted Data"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A08:2017 - Insecure Deserialization",
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/pickle.html",
          "https://davidhamann.de/2020/04/05/exploiting-python-pickle/"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python",
          "aws-lambda"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "focus-metavariable": "$SINK"
            },
            {
              "pattern-either": [
                {
                  "pattern": "pickle.load($SINK,...)"
                },
                {
                  "pattern": "pickle.loads($SINK,...)"
                },
                {
                  "pattern": "_pickle.load($SINK,...)"
                },
                {
                  "pattern": "_pickle.loads($SINK,...)"
                },
                {
                  "pattern": "cPickle.load($SINK,...)"
                },
                {
                  "pattern": "cPickle.loads($SINK,...)"
                },
                {
                  "pattern": "dill.load($SINK,...)"
                },
                {
                  "pattern": "dill.loads($SINK,...)"
                },
                {
                  "pattern": "shelve.open($SINK,...)"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "event"
            },
            {
              "pattern-inside": "def $HANDLER(event, context):\n  ...\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.aws-lambda.security.tainted-sql-string",
      "languages": [
        "python"
      ],
      "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/SQL_Injection"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "aws-lambda"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "\"$SQLSTR\" + ...\n"
                },
                {
                  "pattern": "\"$SQLSTR\" % ...\n"
                },
                {
                  "pattern": "\"$SQLSTR\".format(...)\n"
                },
                {
                  "pattern": "f\"$SQLSTR{...}...\"\n"
                }
              ]
            },
            {
              "metavariable-regex": {
                "metavariable": "$SQLSTR",
                "regex": "\\s*(?i)(select|delete|insert|create|update|alter|drop)\\b.*="
              }
            },
            {
              "pattern-not-inside": "print(...)\n"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "event"
            },
            {
              "pattern-inside": "def $HANDLER(event, context):\n  ...\n"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.boto3.security.hardcoded-token",
      "languages": [
        "python"
      ],
      "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "HIGH",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html",
          "https://bento.dev/checks/boto3/hardcoded-access-token/",
          "https://aws.amazon.com/blogs/security/what-to-do-if-you-inadvertently-expose-an-aws-access-key/"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "boto3",
          "secrets"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "$W(...,$TOKEN=\"$VALUE\",...)"
                },
                {
                  "pattern": "$BOTO. ... .$W(...,$TOKEN=\"$VALUE\",...)"
                }
              ]
            },
            {
              "metavariable-regex": {
                "metavariable": "$TOKEN",
                "regex": "(aws_session_token|aws_access_key_id|aws_secret_access_key)"
              }
            },
            {
              "metavariable-pattern": {
                "language": "generic",
                "metavariable": "$VALUE",
                "patterns": [
                  {
                    "pattern-either": [
                      {
                        "pattern-regex": "^AKI"
                      },
                      {
                        "pattern-regex": "^[A-Za-z0-9/+=]+$"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "metavariable-analysis": {
                "analyzer": "entropy",
                "metavariable": "$VALUE"
              }
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "pattern": "\"...\"\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.cryptography.security.empty-aes-key",
      "languages": [
        "python"
      ],
      "message": "Potential empty AES encryption key. Using an empty key in AES encryption can result in weak encryption and may allow attackers to easily decrypt sensitive data. Ensure that a strong, non-empty key is used for AES encryption.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
          "CWE-310: Cryptographic Issues"
        ],
        "functional-categories": [
          "crypto::search::key-length::pycrypto",
          "crypto::search::key-length::pycryptodome"
        ],
        "impact": "HIGH",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": "A6:2017 misconfiguration",
        "references": [
          "https://cwe.mitre.org/data/definitions/327.html",
          "https://cwe.mitre.org/data/definitions/310.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python",
          "pycrypto",
          "pycryptodome"
        ]
      },
      "patterns": [
        {
          "pattern": "AES.new(\"\",...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix": "cryptography.hazmat.primitives.ciphers.modes.GCM($IV)",
      "id": "vendored-rules.python.cryptography.security.insecure-cipher-mode-ecb",
      "languages": [
        "python"
      ],
      "message": "ECB (Electronic Code Book) is the simplest mode of operation for block ciphers.  Each block of data is encrypted in the same way.  This means identical plaintext blocks will always result in identical ciphertext blocks, which can leave significant patterns in the output. Use a different, cryptographically strong mode instead, such as GCM.",
      "metadata": {
        "bandit-code": "B305",
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "functional-categories": [
          "crypto::search::mode::cryptography"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://cryptography.io/en/latest/hazmat/primitives/symmetric-encryption/#insecure-modes",
          "https://crypto.stackexchange.com/questions/20941/why-shouldnt-i-use-ecb-encryption"
        ],
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L101",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "cryptography"
        ]
      },
      "pattern": "cryptography.hazmat.primitives.ciphers.modes.ECB($IV)",
      "severity": "WARNING"
    },
    {
      "fix": "2048\n",
      "id": "vendored-rules.python.cryptography.security.insufficient-dsa-key-size",
      "languages": [
        "python"
      ],
      "message": "Detected an insufficient key size for DSA. NIST recommends a key size of 2048 or higher.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-326: Inadequate Encryption Strength"
        ],
        "functional-categories": [
          "crypto::search::key-length::cryptography"
        ],
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://www.cosic.esat.kuleuven.be/ecrypt/ecrypt2/documents/D.SPA.20.pdf",
          "https://cryptography.io/en/latest/hazmat/primitives/asymmetric/dsa/",
          "https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf"
        ],
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "cryptography"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "cryptography.hazmat.primitives.asymmetric.dsa.generate_private_key(..., key_size=$SIZE, ...)"
            },
            {
              "pattern": "cryptography.hazmat.primitives.asymmetric.dsa.generate_private_key($SIZE, ...)"
            }
          ]
        },
        {
          "metavariable-comparison": {
            "comparison": "$SIZE < 2048",
            "metavariable": "$SIZE"
          }
        },
        {
          "focus-metavariable": "$SIZE"
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix": "SECP256R1\n",
      "id": "vendored-rules.python.cryptography.security.insufficient-ec-key-size",
      "languages": [
        "python"
      ],
      "message": "Detected an insufficient curve size for EC. NIST recommends a key size of 224 or higher. For example, use 'ec.SECP256R1'.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-326: Inadequate Encryption Strength"
        ],
        "functional-categories": [
          "crypto::search::key-length::cryptography"
        ],
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf",
          "https://cryptography.io/en/latest/hazmat/primitives/asymmetric/ec/#elliptic-curves"
        ],
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "cryptography"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "cryptography.hazmat.primitives.asymmetric.ec.generate_private_key(...)"
        },
        {
          "pattern": "cryptography.hazmat.primitives.asymmetric.ec.$SIZE"
        },
        {
          "metavariable-pattern": {
            "metavariable": "$SIZE",
            "pattern-either": [
              {
                "pattern": "SECP192R1"
              },
              {
                "pattern": "SECT163K1"
              },
              {
                "pattern": "SECT163R2"
              }
            ]
          }
        },
        {
          "focus-metavariable": "$SIZE"
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix": "2048\n",
      "id": "vendored-rules.python.cryptography.security.insufficient-rsa-key-size",
      "languages": [
        "python"
      ],
      "message": "Detected an insufficient key size for RSA. NIST recommends a key size of 2048 or higher.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-326: Inadequate Encryption Strength"
        ],
        "functional-categories": [
          "crypto::search::key-length::cryptography"
        ],
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://cryptography.io/en/latest/hazmat/primitives/asymmetric/rsa/",
          "https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf"
        ],
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "cryptography"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "cryptography.hazmat.primitives.asymmetric.rsa.generate_private_key(..., key_size=$SIZE, ...)"
            },
            {
              "pattern": "cryptography.hazmat.primitives.asymmetric.rsa.generate_private_key($EXP, $SIZE, ...)"
            }
          ]
        },
        {
          "metavariable-comparison": {
            "comparison": "$SIZE < 2048",
            "metavariable": "$SIZE"
          }
        },
        {
          "focus-metavariable": "$SIZE"
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix": "AES",
      "id": "vendored-rules.python.cryptography.security.insecure-cipher-algorithm-arc4",
      "languages": [
        "python"
      ],
      "message": "ARC4 (Alleged RC4) is a stream cipher with serious weaknesses in its initial stream output.  Its use is strongly discouraged. ARC4 does not use mode constructions. Use a strong symmetric cipher such as EAS instead. With the `cryptography` package it is recommended to use the `Fernet` which is a secure implementation of AES in CBC mode with a 128-bit key.  Alternatively, keep using the `Cipher` class from the hazmat primitives but use the AES algorithm instead.",
      "metadata": {
        "bandit-code": "B304",
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "functional-categories": [
          "crypto::search::symmetric-algorithm::cryptography"
        ],
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://cryptography.io/en/latest/hazmat/primitives/symmetric-encryption/#weak-ciphers"
        ],
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L98",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "cryptography"
        ]
      },
      "patterns": [
        {
          "pattern": "cryptography.hazmat.primitives.ciphers.algorithms.$ARC4($KEY)"
        },
        {
          "pattern-inside": "cryptography.hazmat.primitives.ciphers.Cipher(...)"
        },
        {
          "metavariable-regex": {
            "metavariable": "$ARC4",
            "regex": "^(ARC4)$"
          }
        },
        {
          "focus-metavariable": "$ARC4"
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix": "AES",
      "id": "vendored-rules.python.cryptography.security.insecure-cipher-algorithm-blowfish",
      "languages": [
        "python"
      ],
      "message": "Blowfish is a block cipher developed by Bruce Schneier. It is known to be susceptible to attacks when using weak keys.  The author has recommended that users of Blowfish move to newer algorithms such as AES. With the `cryptography` package it is recommended to use `Fernet` which is a secure implementation of AES in CBC mode with a 128-bit key.  Alternatively, keep using the `Cipher` class from the hazmat primitives but use the AES algorithm instead.",
      "metadata": {
        "bandit-code": "B304",
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "functional-categories": [
          "crypto::search::symmetric-algorithm::cryptography"
        ],
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://cryptography.io/en/latest/hazmat/primitives/symmetric-encryption/#weak-ciphers",
          "https://tools.ietf.org/html/rfc5469"
        ],
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L98",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "cryptography"
        ]
      },
      "patterns": [
        {
          "pattern": "cryptography.hazmat.primitives.ciphers.algorithms.$BLOWFISH($KEY)"
        },
        {
          "metavariable-regex": {
            "metavariable": "$BLOWFISH",
            "regex": "^(Blowfish)$"
          }
        },
        {
          "focus-metavariable": "$BLOWFISH"
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix": "AES",
      "id": "vendored-rules.python.cryptography.security.insecure-cipher-algorithm-idea",
      "languages": [
        "python"
      ],
      "message": "IDEA (International Data Encryption Algorithm) is a block cipher created in 1991.  It is an optional component of the OpenPGP standard. This cipher is susceptible to attacks when using weak keys.  It is recommended that you do not use this cipher for new applications. Use a strong symmetric cipher such as EAS instead. With the `cryptography` package it is recommended to use `Fernet` which is a secure implementation of AES in CBC mode with a 128-bit key.  Alternatively, keep using the `Cipher` class from the hazmat primitives but use the AES algorithm instead.",
      "metadata": {
        "bandit-code": "B304",
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "functional-categories": [
          "crypto::search::symmetric-algorithm::cryptography"
        ],
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://tools.ietf.org/html/rfc5469",
          "https://cryptography.io/en/latest/hazmat/primitives/symmetric-encryption/#cryptography.hazmat.primitives.ciphers.algorithms.IDEA"
        ],
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L98",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "cryptography"
        ]
      },
      "patterns": [
        {
          "pattern": "cryptography.hazmat.primitives.ciphers.algorithms.$IDEA($KEY)"
        },
        {
          "metavariable-regex": {
            "metavariable": "$IDEA",
            "regex": "^(IDEA)$"
          }
        },
        {
          "focus-metavariable": "$IDEA"
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix": "SHA256",
      "id": "vendored-rules.python.cryptography.security.insecure-hash-algorithm-md5",
      "languages": [
        "python"
      ],
      "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.",
      "metadata": {
        "bandit-code": "B303",
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "functional-categories": [
          "crypto::search::symmetric-algorithm::cryptography"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://cryptography.io/en/latest/hazmat/primitives/cryptographic-hashes/#md5",
          "https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html",
          "https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability",
          "http://2012.sharcs.org/slides/stevens.pdf",
          "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"
        ],
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "cryptography"
        ]
      },
      "patterns": [
        {
          "pattern": "cryptography.hazmat.primitives.hashes.$MD5()"
        },
        {
          "metavariable-regex": {
            "metavariable": "$MD5",
            "regex": "^(MD5)$"
          }
        },
        {
          "focus-metavariable": "$MD5"
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix": "SHA256\n",
      "id": "vendored-rules.python.cryptography.security.insecure-hash-algorithm-sha1",
      "languages": [
        "python"
      ],
      "message": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.",
      "metadata": {
        "bandit-code": "B303",
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "functional-categories": [
          "crypto::search::symmetric-algorithm::cryptography"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://cryptography.io/en/latest/hazmat/primitives/cryptographic-hashes/#sha-1",
          "https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html",
          "https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability",
          "http://2012.sharcs.org/slides/stevens.pdf",
          "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"
        ],
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "cryptography"
        ]
      },
      "patterns": [
        {
          "pattern": "cryptography.hazmat.primitives.hashes.$SHA(...)"
        },
        {
          "metavariable-pattern": {
            "metavariable": "$SHA",
            "pattern": "SHA1\n"
          }
        },
        {
          "focus-metavariable": "$SHA"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.cryptography.security.crypto-mode-without-authentication",
      "languages": [
        "python"
      ],
      "message": "An encryption mode of operation is being used without proper message authentication. This can potentially result in the encrypted content to be decrypted by an attacker. Consider instead use an AEAD mode of operation like GCM. ",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A02_2021-Cryptographic_Failures"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "cryptography"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern": "Cipher(..., $HAZMAT_MODE(...),...)\n"
                },
                {
                  "pattern-not-inside": "Cipher(..., $HAZMAT_MODE(...),...)\n...\nHMAC(...)\n"
                },
                {
                  "pattern-not-inside": "Cipher(..., $HAZMAT_MODE(...),...)\n...\nhmac.HMAC(...)\n"
                }
              ]
            }
          ]
        },
        {
          "metavariable-pattern": {
            "metavariable": "$HAZMAT_MODE",
            "patterns": [
              {
                "pattern-either": [
                  {
                    "pattern": "modes.CTR"
                  },
                  {
                    "pattern": "modes.CBC"
                  },
                  {
                    "pattern": "modes.CFB"
                  },
                  {
                    "pattern": "modes.OFB"
                  }
                ]
              }
            ]
          }
        }
      ],
      "severity": "ERROR"
    },
    {
      "fix": "True\n",
      "id": "vendored-rules.python.distributed.require-encryption",
      "languages": [
        "python"
      ],
      "message": "Initializing a security context for Dask (`distributed`) without \"require_encryption\" keyword argument may silently fail to provide security.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-319: Cleartext Transmission of Sensitive Information"
        ],
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://distributed.dask.org/en/latest/tls.html?highlight=require_encryption#parameters"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "distributed"
        ]
      },
      "patterns": [
        {
          "pattern": "distributed.security.Security(..., require_encryption=$VAL, ...)\n"
        },
        {
          "metavariable-pattern": {
            "metavariable": "$VAL",
            "pattern": "False\n"
          }
        },
        {
          "focus-metavariable": "$VAL"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.django.security.django-using-request-post-after-is-valid",
      "languages": [
        "python"
      ],
      "message": "Use $FORM.cleaned_data[] instead of request.POST[] after form.is_valid() has been executed to only access sanitized data",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": "CWE-20: Improper Input Validation",
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "references": [
          "https://docs.djangoproject.com/en/4.2/ref/forms/api/#accessing-clean-data"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "def $FUNC(request, ...):\n  ...\n"
        },
        {
          "pattern-inside": "if $FORM.is_valid():\n  ...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "request.POST[...]"
            },
            {
              "pattern": "request.POST.get(...)"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.django.security.globals-as-template-context",
      "languages": [
        "python"
      ],
      "message": "Using 'globals()' as a context to 'render(...)' is extremely dangerous. This exposes Python functions to the template that were not meant to be exposed. An attacker could use these functions to execute code that was not intended to run and could compromise the application. (This is server-side template injection (SSTI)). Do not use 'globals()'. Instead, specify each variable in a dictionary or 'django.template.Context' object, like '{\"var1\": \"hello\"}' and use that instead.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"
        ],
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.djangoproject.com/en/3.2/ref/settings/#templates",
          "https://docs.djangoproject.com/en/3.2/topics/templates/#django.template.backends.django.DjangoTemplates",
          "https://docs.djangoproject.com/en/3.2/ref/templates/api/#rendering-a-context"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "django"
        ]
      },
      "pattern-either": [
        {
          "pattern": "django.shortcuts.render(..., globals(...), ...)"
        },
        {
          "pattern": "django.template.Template.render(..., globals(...), ...)"
        },
        {
          "patterns": [
            {
              "pattern-inside": "$CONTEXT = globals(...)\n...\n"
            },
            {
              "pattern-either": [
                {
                  "pattern": "django.shortcuts.render(..., $CONTEXT, ...)"
                },
                {
                  "pattern": "django.template.Template.render(..., $CONTEXT, ...)"
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.django.security.hashids-with-django-secret",
      "languages": [
        "python"
      ],
      "message": "The Django secret key is used as salt in HashIDs. The HashID mechanism is not secure. By observing sufficient HashIDs, the salt used to construct them can be recovered. This means the Django secret key can be obtained by attackers, through the HashIDs.",
      "metadata": {
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A02:2021 \u2013 Cryptographic Failures"
        ],
        "references": [
          "https://docs.djangoproject.com/en/4.2/ref/settings/#std-setting-SECRET_KEY",
          "http://carnage.github.io/2015/08/cryptanalysis-of-hashids"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "pattern-either": [
        {
          "pattern": "hashids.Hashids(..., salt=django.conf.settings.SECRET_KEY, ...)"
        },
        {
          "pattern": "hashids.Hashids(django.conf.settings.SECRET_KEY, ...)"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.django.security.locals-as-template-context",
      "languages": [
        "python"
      ],
      "message": "Using 'locals()' as a context to 'render(...)' is extremely dangerous. This exposes Python functions to the template that were not meant to be exposed. An attacker could use these functions to execute code that was not intended to run and could compromise the application. (This is server-side template injection (SSTI)). Do not use 'locals()'. Instead, specify each variable in a dictionary or 'django.template.Context' object, like '{\"var1\": \"hello\"}' and use that instead.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"
        ],
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.djangoproject.com/en/3.2/ref/settings/#templates",
          "https://docs.djangoproject.com/en/3.2/topics/templates/#django.template.backends.django.DjangoTemplates",
          "https://docs.djangoproject.com/en/3.2/ref/templates/api/#rendering-a-context"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "django"
        ]
      },
      "pattern-either": [
        {
          "pattern": "django.shortcuts.render(..., locals(...), ...)"
        },
        {
          "pattern": "django.template.Template.render(..., locals(...), ...)"
        },
        {
          "patterns": [
            {
              "pattern-inside": "$CONTEXT = locals(...)\n...\n"
            },
            {
              "pattern-either": [
                {
                  "pattern": "django.shortcuts.render(..., $CONTEXT, ...)"
                },
                {
                  "pattern": "django.template.Template.render(..., $CONTEXT, ...)"
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.django.security.nan-injection",
      "languages": [
        "python"
      ],
      "message": "Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-704: Incorrect Type Conversion or Cast"
        ],
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "references": [
          "https://discuss.python.org/t/nan-breaks-min-max-and-sorting-functions-a-solution/2868",
          "https://blog.bitdiscovery.com/2021/12/python-nan-injection/"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "mode": "taint",
      "pattern-sanitizers": [
        {
          "not_conflicting": true,
          "pattern": "$ANYTHING(...)"
        }
      ],
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "float(...)"
                },
                {
                  "pattern": "bool(...)"
                },
                {
                  "pattern": "complex(...)"
                }
              ]
            },
            {
              "pattern-not-inside": "if $COND:\n  ...\n...\n"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-inside": "def $FUNC(request, ...):\n  ...\n"
            },
            {
              "pattern-either": [
                {
                  "pattern": "request.$PROPERTY.get(...)"
                },
                {
                  "pattern": "request.$PROPERTY[...]"
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.django.security.django-no-csrf-token",
      "languages": [
        "generic"
      ],
      "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)",
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "references": [
          "https://docs.djangoproject.com/en/4.2/howto/csrf/"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "django"
        ]
      },
      "paths": {
        "include": [
          "*.html"
        ]
      },
      "patterns": [
        {
          "pattern": "<form...>...</form>"
        },
        {
          "pattern-either": [
            {
              "pattern": "<form ... method=\"$METHOD\" ...>...</form>\n"
            },
            {
              "pattern": "<form ... method='$METHOD' ...>...</form>\n"
            },
            {
              "pattern": "<form ... method=$METHOD ...>...</form>\n"
            }
          ]
        },
        {
          "metavariable-regex": {
            "metavariable": "$METHOD",
            "regex": "(?i)(post|put|delete|patch)"
          }
        },
        {
          "pattern-not-inside": "<form...>...{% csrf_token %}...</form>"
        },
        {
          "pattern-not-inside": "<form...>...{{ $VAR.csrf_token }}...</form>"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.django.security.audit.avoid-insecure-deserialization",
      "languages": [
        "python"
      ],
      "message": "Avoid using insecure deserialization library, backed by `pickle`, `_pickle`, `cpickle`, `dill`, `shelve`, or `yaml`, which are known to lead to remote code execution vulnerabilities.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-502: Deserialization of Untrusted Data"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A08:2017 - Insecure Deserialization",
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/pickle.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern-either": [
                    {
                      "pattern": "pickle.$PICKLEFUNC(...)\n"
                    },
                    {
                      "pattern": "_pickle.$PICKLEFUNC(...)\n"
                    },
                    {
                      "pattern": "cPickle.$PICKLEFUNC(...)\n"
                    },
                    {
                      "pattern": "shelve.$PICKLEFUNC(...)\n"
                    }
                  ]
                },
                {
                  "metavariable-regex": {
                    "metavariable": "$PICKLEFUNC",
                    "regex": "dumps|dump|load|loads"
                  }
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern": "dill.$DILLFUNC(...)"
                },
                {
                  "metavariable-regex": {
                    "metavariable": "$DILLFUNC",
                    "regex": "dump|dump_session|dumps|load|load_session|loads"
                  }
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern": "yaml.$YAMLFUNC(...)"
                },
                {
                  "pattern-not": "yaml.$YAMLFUNC(..., Dumper=SafeDumper, ...)"
                },
                {
                  "pattern-not": "yaml.$YAMLFUNC(..., Dumper=yaml.SafeDumper, ...)"
                },
                {
                  "pattern-not": "yaml.$YAMLFUNC(..., Loader=SafeLoader, ...)"
                },
                {
                  "pattern-not": "yaml.$YAMLFUNC(..., Loader=yaml.SafeLoader, ...)"
                },
                {
                  "metavariable-regex": {
                    "metavariable": "$YAMLFUNC",
                    "regex": "dump|dump_all|load|load_all"
                  }
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern-inside": "def $INSIDE(..., $PARAM, ...):\n  ...\n"
                },
                {
                  "pattern-either": [
                    {
                      "pattern": "request.$REQFUNC(...)"
                    },
                    {
                      "pattern": "request.$REQFUNC.get(...)"
                    },
                    {
                      "pattern": "request.$REQFUNC[...]"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.django.security.audit.avoid-mark-safe",
      "languages": [
        "python"
      ],
      "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe",
          "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"
        ],
        "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-not-inside": "django.utils.html.format_html(...)"
        },
        {
          "pattern-not": "django.utils.safestring.mark_safe(\"...\")"
        },
        {
          "pattern": "django.utils.safestring.mark_safe(...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.django.security.audit.custom-expression-as-sql",
      "languages": [
        "python"
      ],
      "message": "Detected a Custom Expression ''$EXPRESSION'' calling ''as_sql(...).'' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.djangoproject.com/en/3.0/ref/models/expressions/#django.db.models.Func.as_sql",
          "https://semgrep.dev/blog/2020/preventing-sql-injection-a-django-authors-perspective/"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "django"
        ]
      },
      "pattern": "$EXPRESSION.as_sql(...)",
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.django.security.audit.extends-custom-expression",
      "languages": [
        "python"
      ],
      "message": "Found extension of custom expression: $CLASS. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.djangoproject.com/en/3.0/ref/models/expressions/#avoiding-sql-injection",
          "https://semgrep.dev/blog/2020/preventing-sql-injection-a-django-authors-perspective/"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "django"
        ]
      },
      "pattern-either": [
        {
          "pattern": "class $CLASS(..., django.db.models.Func, ...):\n    ...\n"
        },
        {
          "pattern": "class $CLASS(..., django.db.models.expressions.Func, ...):\n    ...\n"
        },
        {
          "pattern": "class $CLASS(..., django.db.models.Expression, ...):\n    ...\n"
        },
        {
          "pattern": "class $CLASS(..., django.db.models.expressions.Expression, ...):\n    ...\n"
        },
        {
          "pattern": "class $CLASS(..., django.db.models.Value, ...):\n    ...\n"
        },
        {
          "pattern": "class $CLASS(..., django.db.models.expressions.Value, ...):\n    ...\n"
        },
        {
          "pattern": "class $CLASS(..., django.db.models.DurationValue, ...):\n    ...\n"
        },
        {
          "pattern": "class $CLASS(..., django.db.models.expressions.DurationValue, ...):\n    ...\n"
        },
        {
          "pattern": "class $CLASS(..., django.db.models.RawSQL, ...):\n    ...\n"
        },
        {
          "pattern": "class $CLASS(..., django.db.models.expressions.RawSQL, ...):\n    ...\n"
        },
        {
          "pattern": "class $CLASS(..., django.db.models.Star, ...):\n    ...\n"
        },
        {
          "pattern": "class $CLASS(..., django.db.models.expressions.Star, ...):\n    ...\n"
        },
        {
          "pattern": "class $CLASS(..., django.db.models.Random, ...):\n    ...\n"
        },
        {
          "pattern": "class $CLASS(..., django.db.models.expressions.Random, ...):\n    ...\n"
        },
        {
          "pattern": "class $CLASS(..., django.db.models.Col, ...):\n    ...\n"
        },
        {
          "pattern": "class $CLASS(..., django.db.models.expressions.Col, ...):\n    ...\n"
        },
        {
          "pattern": "class $CLASS(..., django.db.models.Ref, ...):\n    ...\n"
        },
        {
          "pattern": "class $CLASS(..., django.db.models.expressions.Ref, ...):\n    ...\n"
        },
        {
          "pattern": "class $CLASS(..., django.db.models.ExpressionList, ...):\n    ...\n"
        },
        {
          "pattern": "class $CLASS(..., django.db.models.expressions.ExpressionList, ...):\n    ...\n"
        },
        {
          "pattern": "class $CLASS(..., django.db.models.ExpressionWrapper, ...):\n    ...\n"
        },
        {
          "pattern": "class $CLASS(..., django.db.models.expressions.ExpressionWrapper, ...):\n    ...\n"
        },
        {
          "pattern": "class $CLASS(..., django.db.models.When, ...):\n    ...\n"
        },
        {
          "pattern": "class $CLASS(..., django.db.models.expressions.When, ...):\n    ...\n"
        },
        {
          "pattern": "class $CLASS(..., django.db.models.Case, ...):\n    ...\n"
        },
        {
          "pattern": "class $CLASS(..., django.db.models.expressions.Case, ...):\n    ...\n"
        },
        {
          "pattern": "class $CLASS(..., django.db.models.Subquery, ...):\n    ...\n"
        },
        {
          "pattern": "class $CLASS(..., django.db.models.expressions.Subquery, ...):\n    ...\n"
        },
        {
          "pattern": "class $CLASS(..., django.db.models.Exists, ...):\n    ...\n"
        },
        {
          "pattern": "class $CLASS(..., django.db.models.expressions.Exists, ...):\n    ...\n"
        },
        {
          "pattern": "class $CLASS(..., django.db.models.Window, ...):\n    ...\n"
        },
        {
          "pattern": "class $CLASS(..., django.db.models.expressions.Window, ...):\n    ...\n"
        },
        {
          "pattern": "class $CLASS(..., django.db.models.WindowFrame, ...):\n    ...\n"
        },
        {
          "pattern": "class $CLASS(..., django.db.models.expressions.WindowFrame, ...):\n    ...\n"
        },
        {
          "pattern": "class $CLASS(..., django.db.models.RowRange, ...):\n    ...\n"
        },
        {
          "pattern": "class $CLASS(..., django.db.models.expressions.RowRange, ...):\n    ...\n"
        },
        {
          "pattern": "class $CLASS(..., django.db.models.ValueRange, ...):\n    ...\n"
        },
        {
          "pattern": "class $CLASS(..., django.db.models.expressions.ValueRange, ...):\n    ...\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix": "if django.contrib.auth.password_validation.validate_password($X, user=$MODEL):\n    $MODEL.set_password($X)\n",
      "id": "vendored-rules.python.django.security.audit.unvalidated-password",
      "languages": [
        "python"
      ],
      "message": "The password on '$MODEL' is being set without validating the password. Call django.contrib.auth.password_validation.validate_password() with validation functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-521: Weak Password Requirements"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://docs.djangoproject.com/en/3.0/topics/auth/passwords/#module-django.contrib.auth.password_validation"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-not-inside": "if <... django.contrib.auth.password_validation.validate_password(...) ...>:\n    ...\n"
        },
        {
          "pattern-not-inside": "django.contrib.auth.password_validation.validate_password(...)\n...\n"
        },
        {
          "pattern-not-inside": "try:\n  ...\n  django.contrib.auth.password_validation.validate_password(...)\n  ...\nexcept $EX:\n  ...\n...\n"
        },
        {
          "pattern-not-inside": "try:\n  ...\n  django.contrib.auth.password_validation.validate_password(...)\n  ...\nexcept $EX as $E:\n  ...\n...\n"
        },
        {
          "pattern-not": "UserModel().set_password($X)"
        },
        {
          "pattern": "$MODEL.set_password($X)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.django.security.audit.no-csrf-exempt",
      "languages": [
        "python"
      ],
      "message": "Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-352: Cross-Site Request Forgery (CSRF)"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "pattern": "@django.views.decorators.csrf.csrf_exempt\ndef $R(...):\n  ...\n",
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.django.security.audit.avoid-query-set-extra",
      "languages": [
        "python"
      ],
      "message": "QuerySet.extra' does not provide safeguards against SQL injection and requires very careful use. SQL injection can lead to critical data being stolen by attackers. Instead of using '.extra', use the Django ORM and parameterized queries such as `People.objects.get(name='Bob')`.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.djangoproject.com/en/3.0/ref/models/querysets/#django.db.models.query.QuerySet.extra",
          "https://semgrep.dev/blog/2020/preventing-sql-injection-a-django-authors-perspective/"
        ],
        "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b610_django_extra_used.html",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern": "$MODEL.extra(...)"
        },
        {
          "pattern-not-inside": "$MODEL.extra(select = {$KEY: \"...\"})"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.django.security.audit.avoid-raw-sql",
      "languages": [
        "python"
      ],
      "message": "Detected the use of 'RawSQL' or 'raw' indicating the execution of a non-parameterized SQL query. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use Django ORM and parameterized queries before raw SQL. An example of using the Django ORM is: `People.objects.get(name='Bob')`",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.djangoproject.com/en/3.0/ref/models/expressions/#raw-sql-expressions",
          "https://semgrep.dev/blog/2020/preventing-sql-injection-a-django-authors-perspective/"
        ],
        "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b611_django_rawsql_used.html",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "$MODEL.objects.raw($QUERY, ...)"
            },
            {
              "pattern": "django.db.models.expressions.RawSQL(...)"
            }
          ]
        },
        {
          "pattern-not": "$MODEL.objects.raw(\"...\")"
        },
        {
          "pattern-not": "django.db.models.expressions.RawSQL(\"...\")"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.django.security.audit.django-secure-set-cookie",
      "languages": [
        "python"
      ],
      "message": "Django cookies should be handled securely by setting secure=True, httponly=True, and samesite='Lax' in response.set_cookie(...). If your situation calls for different settings, explicitly disable the setting. If you want to send the cookie over http, set secure=False. If you want to let client-side JavaScript read the cookie, set httponly=False. If you want to attach cookies to requests for external sites, set samesite=None.",
      "metadata": {
        "asvs": {
          "control_id": "3.4 Missing Cookie Attributes",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management",
          "section": "V3: Session Management Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A05:2021 - Security Misconfiguration"
        ],
        "references": [
          "https://docs.djangoproject.com/en/3.0/ref/request-response/#django.http.HttpResponse.set_cookie",
          "https://semgrep.dev/blog/2020/bento-check-keeping-cookies-safe-in-flask/",
          "https://bento.dev/checks/flask/secure-set-cookie/"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern-inside": "import django.http.HttpResponse\n...\n"
            },
            {
              "pattern-inside": "import django.shortcuts.render\n...\n"
            }
          ]
        },
        {
          "pattern-not-inside": "LANGUAGE_QUERY_PARAMETER = 'language'\n...\ndef set_language(request):\n    ...\n# Exclude vendored contrib/messages/storage/cookie.py\n"
        },
        {
          "pattern-not-inside": "class CookieStorage(django.contrib.messages.storage.base.BaseStorage):\n    ...\n# Exclude cookies handled by vendored middleware\n"
        },
        {
          "pattern-not": "response.set_cookie(django.conf.settings.SESSION_COOKIE_NAME, ...)"
        },
        {
          "pattern-not": "response.set_cookie(django.conf.settings.CSRF_COOKIE_NAME, ...)"
        },
        {
          "pattern-not": "response.set_cookie(django.conf.settings.LANGUAGE_COOKIE_NAME, ...)"
        },
        {
          "pattern-not": "response.set_cookie(rest_framework_jwt.settings.api_settings.JWT_AUTH_COOKIE, ...)"
        },
        {
          "pattern-not": "response.set_cookie(..., secure=$A, httponly=$B, samesite=$C, ...)"
        },
        {
          "pattern-not": "response.set_cookie(..., **$A)"
        },
        {
          "pattern": "response.set_cookie(...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.django.security.audit.django-rest-framework.missing-throttle-config",
      "languages": [
        "python"
      ],
      "message": "Django REST framework configuration is missing default rate- limiting options. This could inadvertently allow resource starvation or Denial of Service (DoS) attacks. Add 'DEFAULT_THROTTLE_CLASSES' and 'DEFAULT_THROTTLE_RATES' to add rate-limiting to your application.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-400: Uncontrolled Resource Consumption"
        ],
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A05:2021 - Security Misconfiguration",
          "A06:2017 - Security Misconfiguration"
        ],
        "references": [
          "https://www.django-rest-framework.org/api-guide/throttling/#setting-the-throttling-policy"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-not-inside": "REST_FRAMEWORK = {\n  ...,\n  \"DEFAULT_THROTTLE_RATES\": ...\n}\n"
        },
        {
          "pattern-inside": "REST_FRAMEWORK = ...\n"
        },
        {
          "pattern": "REST_FRAMEWORK"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.django.security.audit.templates.debug-template-tag",
      "languages": [
        "regex"
      ],
      "message": "Detected a debug template tag in a Django template. This dumps debugging information to the page when debug mode is enabled. Showing debug information to users is dangerous because it may reveal information about your environment that malicious actors can use to gain access to the system. Remove the debug tag.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-489: Active Debug Code"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": "A06:2017 - Security Misconfiguration",
        "references": [
          "https://docs.djangoproject.com/en/4.2/ref/templates/builtins/#debug",
          "https://stackoverflow.com/questions/2213977/django-debug-display-all-variables-of-a-page"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "django"
        ]
      },
      "paths": {
        "include": [
          "*.html"
        ]
      },
      "pattern-regex": "({% debug %})",
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.django.security.audit.xss.class-extends-safestring",
      "languages": [
        "python"
      ],
      "message": "Found a class extending 'SafeString', 'SafeText' or 'SafeData'. These classes are for bypassing the escaping engine built in to Django and should not be used directly. Improper use of this class exposes your application to cross-site scripting (XSS) vulnerabilities. If you need this functionality, use 'mark_safe' instead and ensure no user data can reach it.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.djangoproject.com/en/3.1/howto/custom-template-tags/#filters-and-auto-escaping",
          "https://github.com/django/django/blob/f138e75910b1e541686c4dce3d8f467f6fc234cb/django/utils/safestring.py#L11"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "django"
        ]
      },
      "pattern-either": [
        {
          "pattern": "class $CLASS(django.utils.safestring.SafeString):\n  ...\n"
        },
        {
          "pattern": "class $CLASS(django.utils.safestring.SafeText):\n  ...\n"
        },
        {
          "pattern": "class $CLASS(django.utils.safestring.SafeData):\n  ..."
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix": "True\n",
      "id": "vendored-rules.python.django.security.audit.xss.context-autoescape-off",
      "languages": [
        "python"
      ],
      "message": "Detected a Context with autoescape disabled. If you are rendering any web pages, this exposes your application to cross-site scripting (XSS) vulnerabilities. Remove 'autoescape: False' or set it to 'True'.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.djangoproject.com/en/3.1/ref/settings/#templates",
          "https://docs.djangoproject.com/en/3.1/topics/templates/#django.template.backends.django.DjangoTemplates"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "{..., \"autoescape\": $FALSE, ...}\n"
            },
            {
              "pattern": "$D[\"autoescape\"] = $FALSE\n"
            }
          ]
        },
        {
          "metavariable-pattern": {
            "metavariable": "$FALSE",
            "pattern": "False\n"
          }
        },
        {
          "focus-metavariable": "$FALSE"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.django.security.audit.xss.direct-use-of-httpresponse",
      "languages": [
        "python"
      ],
      "message": "Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.djangoproject.com/en/3.1/intro/tutorial03/#a-shortcut-render",
          "https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#render"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-not": "django.http.$ANY(\"...\", ...)"
        },
        {
          "pattern-not": "django.http.$ANY()"
        },
        {
          "pattern-not": "django.http.$ANY(..., content=None, ...)"
        },
        {
          "pattern-not": "django.http.$ANY(status=...)"
        },
        {
          "pattern-not": "django.http.HttpResponseNotAllowed([...])"
        },
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern-either": [
                    {
                      "pattern": "django.http.HttpResponse(...)"
                    },
                    {
                      "pattern": "django.http.HttpResponseBadRequest(...)"
                    },
                    {
                      "pattern": "django.http.HttpResponseNotFound(...)"
                    },
                    {
                      "pattern": "django.http.HttpResponseForbidden(...)"
                    },
                    {
                      "pattern": "django.http.HttpResponseNotAllowed(...)"
                    },
                    {
                      "pattern": "django.http.HttpResponseGone(...)"
                    },
                    {
                      "pattern": "django.http.HttpResponseServerError(...)"
                    }
                  ]
                },
                {
                  "pattern-not": "django.http.$ANY(...,content_type=$TYPE,...)"
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern-either": [
                    {
                      "pattern": "django.http.HttpResponse(...,content_type=$TYPE,...)"
                    },
                    {
                      "pattern": "django.http.HttpResponseBadRequest(...,content_type=$TYPE,...)"
                    },
                    {
                      "pattern": "django.http.HttpResponseNotFound(...,content_type=$TYPE,...)"
                    },
                    {
                      "pattern": "django.http.HttpResponseForbidden(...,content_type=$TYPE,...)"
                    },
                    {
                      "pattern": "django.http.HttpResponseNotAllowed(...,content_type=$TYPE,...)"
                    },
                    {
                      "pattern": "django.http.HttpResponseGone(...,content_type=$TYPE,...)"
                    },
                    {
                      "pattern": "django.http.HttpResponseServerError(...,content_type=$TYPE,...)"
                    }
                  ]
                },
                {
                  "metavariable-regex": {
                    "metavariable": "$TYPE",
                    "regex": ".*[tT][eE][xX][tT]/[hH][tT][mM][lL].*"
                  }
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.django.security.audit.xss.filter-with-is-safe",
      "languages": [
        "python"
      ],
      "message": "Detected Django filters flagged with 'is_safe'. 'is_safe' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, 'is_safe' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing 'is_safe' and explicitly marking safe content with 'mark_safe()'.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.djangoproject.com/en/3.1/topics/security/#cross-site-scripting-xss-protection",
          "https://docs.djangoproject.com/en/3.1/howto/custom-template-tags/#filters-and-auto-escaping",
          "https://stackoverflow.com/questions/7665512/why-use-is-safe"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "django"
        ]
      },
      "pattern": "@register.filter(..., is_safe=True, ...)\ndef $FILTER(...):\n  ...",
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.django.security.audit.xss.formathtml-fstring-parameter",
      "languages": [
        "python"
      ],
      "message": "Passing a formatted string as first parameter to `format_html` disables the proper encoding of variables. Any HTML in the first parameter is not encoded. Using a formatted string as first parameter obscures which parameters are encoded. Correct use of `format_html` is passing a static format string as first parameter, and the variables to substitute as subsequent parameters.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.html.format_html"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "django"
        ]
      },
      "pattern-either": [
        {
          "pattern": "format_html(<... f\"...\" ...>, ...)"
        },
        {
          "pattern": "format_html(\"...\" % ..., ...)"
        },
        {
          "pattern": "format_html(\"...\".format(...), ...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix": "True\n",
      "id": "vendored-rules.python.django.security.audit.xss.global-autoescape-off",
      "languages": [
        "python"
      ],
      "message": "Autoescape is globally disbaled for this Django application. If you are rendering any web pages, this exposes your application to cross-site scripting (XSS) vulnerabilities. Remove 'autoescape: False' or set it to 'True'.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.djangoproject.com/en/3.1/ref/settings/#templates",
          "https://docs.djangoproject.com/en/3.1/topics/templates/#django.template.backends.django.DjangoTemplates"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern": "{..., 'BACKEND': ..., 'OPTIONS': {..., 'autoescape': $FALSE, ...}, ...}\n"
        },
        {
          "metavariable-pattern": {
            "metavariable": "$FALSE",
            "pattern": "False\n"
          }
        },
        {
          "focus-metavariable": "$FALSE"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.django.security.audit.xss.html-magic-method",
      "languages": [
        "python"
      ],
      "message": "The `__html__` method indicates to the Django template engine that the value is 'safe' for rendering. This means that normal HTML escaping will not be applied to the return value. This exposes your application to cross-site scripting (XSS) vulnerabilities. If you need to render raw HTML, consider instead using `mark_safe()` which more clearly marks the intent to render raw HTML than a class with a magic method.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.djangoproject.com/en/3.0/_modules/django/utils/html/#conditional_escape",
          "https://gist.github.com/minusworld/7885d8a81dba3ea2d1e4b8fd3c218ef5"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "class $CLASS(...):\n  ...\n"
        },
        {
          "pattern": "def __html__(...):\n  ...\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.django.security.audit.xss.html-safe",
      "languages": [
        "python"
      ],
      "message": "`html_safe()` add the `__html__` magic method to the provided class. The `__html__` method indicates to the Django template engine that the value is 'safe' for rendering. This means that normal HTML escaping will not be applied to the return value. This exposes your application to cross-site scripting (XSS) vulnerabilities. If you need to render raw HTML, consider instead using `mark_safe()` which more clearly marks the intent to render raw HTML than a class with a magic method.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.djangoproject.com/en/3.0/_modules/django/utils/html/#html_safe",
          "https://gist.github.com/minusworld/7885d8a81dba3ea2d1e4b8fd3c218ef5"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "django"
        ]
      },
      "pattern-either": [
        {
          "pattern": "django.utils.html.html_safe(...)"
        },
        {
          "pattern": "@django.utils.html.html_safe\nclass $CLASS(...):\n  ...\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.django.security.audit.xss.template-autoescape-off",
      "languages": [
        "regex"
      ],
      "message": "Detected a template block where autoescaping is explicitly disabled with '{% autoescape off %}'. This allows rendering of raw HTML in this segment. Turn autoescaping on to prevent cross-site scripting (XSS). If you must do this, consider instead, using `mark_safe` in Python code.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#autoescape"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "django"
        ]
      },
      "paths": {
        "include": [
          "*.html"
        ]
      },
      "pattern-regex": "{%\\s+autoescape\\s+off\\s+%}",
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.django.security.audit.xss.template-blocktranslate-no-escape",
      "languages": [
        "generic"
      ],
      "message": "Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://edx.readthedocs.io/projects/edx-developer-guide/en/latest/preventing_xss/preventing_xss_in_django_templates.html#html-escaping-translations-in-django-templates",
          "https://docs.djangoproject.com/en/3.1/topics/i18n/translation/#internationalization-in-template-code"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "{% blocktranslate...%}\n"
            },
            {
              "pattern": "{% blocktrans...%}\n"
            }
          ]
        },
        {
          "pattern-not-inside": "{%...filter...force_escape...%}\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n{%...endfilter...%}\n"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.python.django.security.audit.xss.template-translate-as-no-escape",
      "languages": [
        "generic"
      ],
      "message": "Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://edx.readthedocs.io/projects/edx-developer-guide/en/latest/preventing_xss/preventing_xss_in_django_templates.html#html-escaping-translations-in-django-templates",
          "https://docs.djangoproject.com/en/3.1/topics/i18n/translation/#internationalization-in-template-code"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "{% translate ... as $TRANS ... %}\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n{{ ... $TRANS ... }}\n"
            },
            {
              "pattern": "{% trans ... as $TRANS ... %}\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n{{ ... $TRANS ... }}\n"
            }
          ]
        },
        {
          "pattern-not": "{% translate ... as $TRANS ... %}\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n{{ ... $TRANS ... | ... force_escape ... }}\n"
        },
        {
          "pattern-not": "{% trans ... as $TRANS ... %}\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n{{ ... $TRANS ... | ... force_escape ... }}\n"
        },
        {
          "pattern-not": "{% translate ... as $TRANS ... %}\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n{% filter force_escape %}\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n{{ ... $TRANS ... }}\n"
        },
        {
          "pattern-not": "{% trans ... as $TRANS ... %}\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n{% filter force_escape %}\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n{{ ... $TRANS ... }}\n"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.python.django.security.audit.xss.template-var-unescaped-with-safeseq",
      "languages": [
        "regex"
      ],
      "message": "Detected a template variable where autoescaping is explicitly disabled with '| safeseq' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability. If you must do this, use `mark_safe` in your Python code.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.djangoproject.com/en/3.0/ref/templates/builtins/#safeseq"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "django"
        ]
      },
      "paths": {
        "include": [
          "*.html"
        ]
      },
      "pattern-regex": "{{.*?\\|\\s+safeseq(\\s+}})?",
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.django.security.injection.csv-writer-injection",
      "languages": [
        "python"
      ],
      "message": "Detected user input into a generated CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-1236: Improper Neutralization of Formula Elements in a CSV File"
        ],
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://github.com/raphaelm/defusedcsv",
          "https://owasp.org/www-community/attacks/CSV_Injection",
          "https://web.archive.org/web/20220516052229/https://www.contextis.com/us/blog/comma-separated-vulnerabilities"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django",
          "python"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-inside": "$WRITER = csv.writer(...)\n\n...\n\n$WRITER.$WRITE(...)\n"
            },
            {
              "pattern": "$WRITER.$WRITE(...)"
            },
            {
              "metavariable-regex": {
                "metavariable": "$WRITE",
                "regex": "^(writerow|writerows|writeheader)$"
              }
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-inside": "def $FUNC(..., $REQUEST, ...):\n  ...\n"
            },
            {
              "focus-metavariable": "$REQUEST"
            },
            {
              "metavariable-pattern": {
                "metavariable": "$REQUEST",
                "patterns": [
                  {
                    "pattern": "request"
                  },
                  {
                    "pattern-not-inside": "request.build_absolute_uri"
                  }
                ]
              }
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.django.security.injection.mass-assignment",
      "languages": [
        "python"
      ],
      "message": "Mass assignment detected. This can result in assignment to model fields that are unintended and can be exploited by an attacker. Instead of using '**request.$W', assign each field you want to edit individually to prevent mass assignment. You can read more about mass assignment at https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "owaspapi": "API6: Mass Assignment",
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "django"
        ]
      },
      "pattern-either": [
        {
          "pattern": "$MODEL.objects.create(**request.$W)"
        },
        {
          "pattern": "$OBJ.update(**request.$W)\n...\n$OBJ.save()\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.django.security.injection.open-redirect",
      "languages": [
        "python"
      ],
      "message": "Data from request ($DATA) is passed to redirect(). This is an open redirect and could be exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url(). See https://cwe.mitre.org/data/definitions/601.html for more information.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://www.djm.org.uk/posts/djangos-little-protections-word-redirect-dangers/",
          "https://github.com/django/django/blob/d1b7bd030b1db111e1a3505b1fc029ab964382cc/django/utils/http.py#L231"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "def $FUNC(...):\n  ...\n"
        },
        {
          "pattern-not-inside": "def $FUNC(...):\n  ...\n  django.utils.http.is_safe_url(...)\n  ...\n"
        },
        {
          "pattern-not-inside": "def $FUNC(...):\n  ...\n  if <... django.utils.http.is_safe_url(...) ...>:\n    ...\n"
        },
        {
          "pattern-not-inside": "def $FUNC(...):\n  ...\n  django.utils.http.url_has_allowed_host_and_scheme(...)\n  ...\n"
        },
        {
          "pattern-not-inside": "def $FUNC(...):\n  ...\n  if <... django.utils.http.url_has_allowed_host_and_scheme(...) ...>:\n    ...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "django.shortcuts.redirect(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "django.shortcuts.redirect(..., $S.format(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "django.shortcuts.redirect(..., $S % request.$W.get(...), ...)"
            },
            {
              "pattern": "django.shortcuts.redirect(..., f\"...{request.$W.get(...)}...\", ...)"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.shortcuts.redirect(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $DATA\n...\ndjango.shortcuts.redirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.shortcuts.redirect(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.shortcuts.redirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.shortcuts.redirect(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % $DATA\n...\ndjango.shortcuts.redirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.shortcuts.redirect(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.shortcuts.redirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.shortcuts.redirect(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR + $DATA\n...\ndjango.shortcuts.redirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.shortcuts.redirect(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "$A = django.shortcuts.redirect(..., $S.format(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "$A = django.shortcuts.redirect(..., $S % request.$W.get(...), ...)"
            },
            {
              "pattern": "$A = django.shortcuts.redirect(..., f\"...{request.$W.get(...)}...\", ...)"
            },
            {
              "pattern": "return django.shortcuts.redirect(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "return django.shortcuts.redirect(..., $S.format(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "return django.shortcuts.redirect(..., $S % request.$W.get(...), ...)"
            },
            {
              "pattern": "return django.shortcuts.redirect(..., f\"...{request.$W.get(...)}...\", ...)"
            },
            {
              "pattern": "django.shortcuts.redirect(..., request.$W(...), ...)"
            },
            {
              "pattern": "django.shortcuts.redirect(..., $S.format(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "django.shortcuts.redirect(..., $S % request.$W(...), ...)"
            },
            {
              "pattern": "django.shortcuts.redirect(..., f\"...{request.$W(...)}...\", ...)"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.shortcuts.redirect(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $DATA\n...\ndjango.shortcuts.redirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.shortcuts.redirect(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.shortcuts.redirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.shortcuts.redirect(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR % $DATA\n...\ndjango.shortcuts.redirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.shortcuts.redirect(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.shortcuts.redirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.shortcuts.redirect(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR + $DATA\n...\ndjango.shortcuts.redirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.shortcuts.redirect(..., request.$W(...), ...)"
            },
            {
              "pattern": "$A = django.shortcuts.redirect(..., $S.format(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "$A = django.shortcuts.redirect(..., $S % request.$W(...), ...)"
            },
            {
              "pattern": "$A = django.shortcuts.redirect(..., f\"...{request.$W(...)}...\", ...)"
            },
            {
              "pattern": "return django.shortcuts.redirect(..., request.$W(...), ...)"
            },
            {
              "pattern": "return django.shortcuts.redirect(..., $S.format(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "return django.shortcuts.redirect(..., $S % request.$W(...), ...)"
            },
            {
              "pattern": "return django.shortcuts.redirect(..., f\"...{request.$W(...)}...\", ...)"
            },
            {
              "pattern": "django.shortcuts.redirect(..., request.$W[...], ...)"
            },
            {
              "pattern": "django.shortcuts.redirect(..., $S.format(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "django.shortcuts.redirect(..., $S % request.$W[...], ...)"
            },
            {
              "pattern": "django.shortcuts.redirect(..., f\"...{request.$W[...]}...\", ...)"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.shortcuts.redirect(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $DATA\n...\ndjango.shortcuts.redirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.shortcuts.redirect(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.shortcuts.redirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.shortcuts.redirect(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR % $DATA\n...\ndjango.shortcuts.redirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.shortcuts.redirect(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.shortcuts.redirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.shortcuts.redirect(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR + $DATA\n...\ndjango.shortcuts.redirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.shortcuts.redirect(..., request.$W[...], ...)"
            },
            {
              "pattern": "$A = django.shortcuts.redirect(..., $S.format(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "$A = django.shortcuts.redirect(..., $S % request.$W[...], ...)"
            },
            {
              "pattern": "$A = django.shortcuts.redirect(..., f\"...{request.$W[...]}...\", ...)"
            },
            {
              "pattern": "return django.shortcuts.redirect(..., request.$W[...], ...)"
            },
            {
              "pattern": "return django.shortcuts.redirect(..., $S.format(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "return django.shortcuts.redirect(..., $S % request.$W[...], ...)"
            },
            {
              "pattern": "return django.shortcuts.redirect(..., f\"...{request.$W[...]}...\", ...)"
            },
            {
              "pattern": "django.shortcuts.redirect(..., request.$W, ...)"
            },
            {
              "pattern": "django.shortcuts.redirect(..., $S.format(..., request.$W, ...), ...)"
            },
            {
              "pattern": "django.shortcuts.redirect(..., $S % request.$W, ...)"
            },
            {
              "pattern": "django.shortcuts.redirect(..., f\"...{request.$W}...\", ...)"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.shortcuts.redirect(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $DATA\n...\ndjango.shortcuts.redirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.shortcuts.redirect(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.shortcuts.redirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.shortcuts.redirect(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR % $DATA\n...\ndjango.shortcuts.redirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.shortcuts.redirect(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.shortcuts.redirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.shortcuts.redirect(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR + $DATA\n...\ndjango.shortcuts.redirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.shortcuts.redirect(..., request.$W, ...)"
            },
            {
              "pattern": "$A = django.shortcuts.redirect(..., $S.format(..., request.$W, ...), ...)"
            },
            {
              "pattern": "$A = django.shortcuts.redirect(..., $S % request.$W, ...)"
            },
            {
              "pattern": "$A = django.shortcuts.redirect(..., f\"...{request.$W}...\", ...)"
            },
            {
              "pattern": "return django.shortcuts.redirect(..., request.$W, ...)"
            },
            {
              "pattern": "return django.shortcuts.redirect(..., $S.format(..., request.$W, ...), ...)"
            },
            {
              "pattern": "return django.shortcuts.redirect(..., $S % request.$W, ...)"
            },
            {
              "pattern": "return django.shortcuts.redirect(..., f\"...{request.$W}...\", ...)"
            },
            {
              "pattern": "django.http.HttpResponseRedirect(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "django.http.HttpResponseRedirect(..., $S.format(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "django.http.HttpResponseRedirect(..., $S % request.$W.get(...), ...)"
            },
            {
              "pattern": "django.http.HttpResponseRedirect(..., f\"...{request.$W.get(...)}...\", ...)"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.http.HttpResponseRedirect(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $DATA\n...\ndjango.http.HttpResponseRedirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.http.HttpResponseRedirect(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.http.HttpResponseRedirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.http.HttpResponseRedirect(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % $DATA\n...\ndjango.http.HttpResponseRedirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.http.HttpResponseRedirect(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.http.HttpResponseRedirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.http.HttpResponseRedirect(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR + $DATA\n...\ndjango.http.HttpResponseRedirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.http.HttpResponseRedirect(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "$A = django.http.HttpResponseRedirect(..., $S.format(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "$A = django.http.HttpResponseRedirect(..., $S % request.$W.get(...), ...)"
            },
            {
              "pattern": "$A = django.http.HttpResponseRedirect(..., f\"...{request.$W.get(...)}...\", ...)"
            },
            {
              "pattern": "return django.http.HttpResponseRedirect(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "return django.http.HttpResponseRedirect(..., $S.format(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "return django.http.HttpResponseRedirect(..., $S % request.$W.get(...), ...)"
            },
            {
              "pattern": "return django.http.HttpResponseRedirect(..., f\"...{request.$W.get(...)}...\", ...)"
            },
            {
              "pattern": "django.http.HttpResponseRedirect(..., request.$W(...), ...)"
            },
            {
              "pattern": "django.http.HttpResponseRedirect(..., $S.format(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "django.http.HttpResponseRedirect(..., $S % request.$W(...), ...)"
            },
            {
              "pattern": "django.http.HttpResponseRedirect(..., f\"...{request.$W(...)}...\", ...)"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.http.HttpResponseRedirect(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $DATA\n...\ndjango.http.HttpResponseRedirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.http.HttpResponseRedirect(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.http.HttpResponseRedirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.http.HttpResponseRedirect(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR % $DATA\n...\ndjango.http.HttpResponseRedirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.http.HttpResponseRedirect(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.http.HttpResponseRedirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.http.HttpResponseRedirect(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR + $DATA\n...\ndjango.http.HttpResponseRedirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.http.HttpResponseRedirect(..., request.$W(...), ...)"
            },
            {
              "pattern": "$A = django.http.HttpResponseRedirect(..., $S.format(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "$A = django.http.HttpResponseRedirect(..., $S % request.$W(...), ...)"
            },
            {
              "pattern": "$A = django.http.HttpResponseRedirect(..., f\"...{request.$W(...)}...\", ...)"
            },
            {
              "pattern": "return django.http.HttpResponseRedirect(..., request.$W(...), ...)"
            },
            {
              "pattern": "return django.http.HttpResponseRedirect(..., $S.format(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "return django.http.HttpResponseRedirect(..., $S % request.$W(...), ...)"
            },
            {
              "pattern": "return django.http.HttpResponseRedirect(..., f\"...{request.$W(...)}...\", ...)"
            },
            {
              "pattern": "django.http.HttpResponseRedirect(..., request.$W[...], ...)"
            },
            {
              "pattern": "django.http.HttpResponseRedirect(..., $S.format(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "django.http.HttpResponseRedirect(..., $S % request.$W[...], ...)"
            },
            {
              "pattern": "django.http.HttpResponseRedirect(..., f\"...{request.$W[...]}...\", ...)"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.http.HttpResponseRedirect(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $DATA\n...\ndjango.http.HttpResponseRedirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.http.HttpResponseRedirect(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.http.HttpResponseRedirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.http.HttpResponseRedirect(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR % $DATA\n...\ndjango.http.HttpResponseRedirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.http.HttpResponseRedirect(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.http.HttpResponseRedirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.http.HttpResponseRedirect(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR + $DATA\n...\ndjango.http.HttpResponseRedirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.http.HttpResponseRedirect(..., request.$W[...], ...)"
            },
            {
              "pattern": "$A = django.http.HttpResponseRedirect(..., $S.format(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "$A = django.http.HttpResponseRedirect(..., $S % request.$W[...], ...)"
            },
            {
              "pattern": "$A = django.http.HttpResponseRedirect(..., f\"...{request.$W[...]}...\", ...)"
            },
            {
              "pattern": "return django.http.HttpResponseRedirect(..., request.$W[...], ...)"
            },
            {
              "pattern": "return django.http.HttpResponseRedirect(..., $S.format(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "return django.http.HttpResponseRedirect(..., $S % request.$W[...], ...)"
            },
            {
              "pattern": "return django.http.HttpResponseRedirect(..., f\"...{request.$W[...]}...\", ...)"
            },
            {
              "pattern": "django.http.HttpResponseRedirect(..., request.$W, ...)"
            },
            {
              "pattern": "django.http.HttpResponseRedirect(..., $S.format(..., request.$W, ...), ...)"
            },
            {
              "pattern": "django.http.HttpResponseRedirect(..., $S % request.$W, ...)"
            },
            {
              "pattern": "django.http.HttpResponseRedirect(..., f\"...{request.$W}...\", ...)"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.http.HttpResponseRedirect(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $DATA\n...\ndjango.http.HttpResponseRedirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.http.HttpResponseRedirect(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.http.HttpResponseRedirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.http.HttpResponseRedirect(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR % $DATA\n...\ndjango.http.HttpResponseRedirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.http.HttpResponseRedirect(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.http.HttpResponseRedirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.http.HttpResponseRedirect(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR + $DATA\n...\ndjango.http.HttpResponseRedirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.http.HttpResponseRedirect(..., request.$W, ...)"
            },
            {
              "pattern": "$A = django.http.HttpResponseRedirect(..., $S.format(..., request.$W, ...), ...)"
            },
            {
              "pattern": "$A = django.http.HttpResponseRedirect(..., $S % request.$W, ...)"
            },
            {
              "pattern": "$A = django.http.HttpResponseRedirect(..., f\"...{request.$W}...\", ...)"
            },
            {
              "pattern": "return django.http.HttpResponseRedirect(..., request.$W, ...)"
            },
            {
              "pattern": "return django.http.HttpResponseRedirect(..., $S.format(..., request.$W, ...), ...)"
            },
            {
              "pattern": "return django.http.HttpResponseRedirect(..., $S % request.$W, ...)"
            },
            {
              "pattern": "return django.http.HttpResponseRedirect(..., f\"...{request.$W}...\", ...)"
            }
          ]
        },
        {
          "metavariable-regex": {
            "metavariable": "$W",
            "regex": "(?!get_full_path)"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.django.security.injection.raw-html-format",
      "languages": [
        "python"
      ],
      "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render",
          "https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "mode": "taint",
      "pattern-sanitizers": [
        {
          "pattern": "django.utils.html.escape(...)"
        }
      ],
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "\"$HTMLSTR\" % ..."
                        },
                        {
                          "pattern": "\"$HTMLSTR\".format(...)"
                        },
                        {
                          "pattern": "\"$HTMLSTR\" + ..."
                        },
                        {
                          "pattern": "f\"$HTMLSTR{...}...\""
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "$HTML = \"$HTMLSTR\"\n...\n"
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "$HTML % ..."
                        },
                        {
                          "pattern": "$HTML.format(...)"
                        },
                        {
                          "pattern": "$HTML + ..."
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "metavariable-pattern": {
                "language": "generic",
                "metavariable": "$HTMLSTR",
                "pattern": "<$TAG ..."
              }
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "request.$ANYTHING"
            },
            {
              "pattern-not": "request.build_absolute_uri"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.django.security.injection.reflected-data-httpresponse",
      "languages": [
        "python"
      ],
      "message": "Found user-controlled request data passed into HttpResponse. This could be vulnerable to XSS, leading to attackers gaining access to user cookies and protected information. Ensure that the request data is properly escaped or sanitzed.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://django-book.readthedocs.io/en/latest/chapter20.html#cross-site-scripting-xss"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "def $FUNC(...):\n  ...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "django.http.HttpResponse(..., $S.format(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "django.http.HttpResponse(..., $S % request.$W.get(...), ...)"
            },
            {
              "pattern": "django.http.HttpResponse(..., f\"...{request.$W.get(...)}...\", ...)"
            },
            {
              "pattern": "django.http.HttpResponse(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.http.HttpResponse(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $DATA\n...\ndjango.http.HttpResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.http.HttpResponse(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.http.HttpResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.http.HttpResponse(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % $DATA\n...\ndjango.http.HttpResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.http.HttpResponse(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.http.HttpResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.http.HttpResponse(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR + $DATA\n...\ndjango.http.HttpResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.http.HttpResponse(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "return django.http.HttpResponse(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "django.http.HttpResponse(..., $S.format(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "django.http.HttpResponse(..., $S % request.$W(...), ...)"
            },
            {
              "pattern": "django.http.HttpResponse(..., f\"...{request.$W(...)}...\", ...)"
            },
            {
              "pattern": "django.http.HttpResponse(..., request.$W(...), ...)"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.http.HttpResponse(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $DATA\n...\ndjango.http.HttpResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.http.HttpResponse(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.http.HttpResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.http.HttpResponse(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR % $DATA\n...\ndjango.http.HttpResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.http.HttpResponse(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.http.HttpResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.http.HttpResponse(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR + $DATA\n...\ndjango.http.HttpResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.http.HttpResponse(..., request.$W(...), ...)"
            },
            {
              "pattern": "return django.http.HttpResponse(..., request.$W(...), ...)"
            },
            {
              "pattern": "django.http.HttpResponse(..., $S.format(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "django.http.HttpResponse(..., $S % request.$W[...], ...)"
            },
            {
              "pattern": "django.http.HttpResponse(..., f\"...{request.$W[...]}...\", ...)"
            },
            {
              "pattern": "django.http.HttpResponse(..., request.$W[...], ...)"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.http.HttpResponse(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $DATA\n...\ndjango.http.HttpResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.http.HttpResponse(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.http.HttpResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.http.HttpResponse(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR % $DATA\n...\ndjango.http.HttpResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.http.HttpResponse(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.http.HttpResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.http.HttpResponse(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR + $DATA\n...\ndjango.http.HttpResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.http.HttpResponse(..., request.$W[...], ...)"
            },
            {
              "pattern": "return django.http.HttpResponse(..., request.$W[...], ...)"
            },
            {
              "pattern": "django.http.HttpResponse(..., $S.format(..., request.$W, ...), ...)"
            },
            {
              "pattern": "django.http.HttpResponse(..., $S % request.$W, ...)"
            },
            {
              "pattern": "django.http.HttpResponse(..., f\"...{request.$W}...\", ...)"
            },
            {
              "pattern": "django.http.HttpResponse(..., request.$W, ...)"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.http.HttpResponse(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $DATA\n...\ndjango.http.HttpResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.http.HttpResponse(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.http.HttpResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.http.HttpResponse(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR % $DATA\n...\ndjango.http.HttpResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.http.HttpResponse(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$A = django.http.HttpResponse(..., request.$W, ...)"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR + $DATA\n...\n$A = django.http.HttpResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "return django.http.HttpResponse(..., request.$W, ...)"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.http.HttpResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.http.HttpResponse(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR + $DATA\n...\ndjango.http.HttpResponse(..., $INTERM, ...)\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.django.security.injection.reflected-data-httpresponsebadrequest",
      "languages": [
        "python"
      ],
      "message": "Found user-controlled request data passed into a HttpResponseBadRequest. This could be vulnerable to XSS, leading to attackers gaining access to user cookies and protected information. Ensure that the request data is properly escaped or sanitzed.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://django-book.readthedocs.io/en/latest/chapter20.html#cross-site-scripting-xss"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "def $FUNC(...):\n  ...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "django.http.HttpResponseBadRequest(..., $S.format(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "django.http.HttpResponseBadRequest(..., $S % request.$W.get(...), ...)"
            },
            {
              "pattern": "django.http.HttpResponseBadRequest(..., f\"...{request.$W.get(...)}...\", ...)"
            },
            {
              "pattern": "django.http.HttpResponseBadRequest(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.http.HttpResponseBadRequest(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $DATA\n...\ndjango.http.HttpResponseBadRequest(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.http.HttpResponseBadRequest(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.http.HttpResponseBadRequest(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.http.HttpResponseBadRequest(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % $DATA\n...\ndjango.http.HttpResponseBadRequest(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.http.HttpResponseBadRequest(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.http.HttpResponseBadRequest(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.http.HttpResponseBadRequest(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR + $DATA\n...\ndjango.http.HttpResponseBadRequest(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.http.HttpResponseBadRequest(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "return django.http.HttpResponseBadRequest(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "django.http.HttpResponseBadRequest(..., $S.format(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "django.http.HttpResponseBadRequest(..., $S % request.$W(...), ...)"
            },
            {
              "pattern": "django.http.HttpResponseBadRequest(..., f\"...{request.$W(...)}...\", ...)"
            },
            {
              "pattern": "django.http.HttpResponseBadRequest(..., request.$W(...), ...)"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.http.HttpResponseBadRequest(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $DATA\n...\ndjango.http.HttpResponseBadRequest(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.http.HttpResponseBadRequest(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.http.HttpResponseBadRequest(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.http.HttpResponseBadRequest(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR % $DATA\n...\ndjango.http.HttpResponseBadRequest(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.http.HttpResponseBadRequest(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.http.HttpResponseBadRequest(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.http.HttpResponseBadRequest(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR + $DATA\n...\ndjango.http.HttpResponseBadRequest(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.http.HttpResponseBadRequest(..., request.$W(...), ...)"
            },
            {
              "pattern": "return django.http.HttpResponseBadRequest(..., request.$W(...), ...)"
            },
            {
              "pattern": "django.http.HttpResponseBadRequest(..., $S.format(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "django.http.HttpResponseBadRequest(..., $S % request.$W[...], ...)"
            },
            {
              "pattern": "django.http.HttpResponseBadRequest(..., f\"...{request.$W[...]}...\", ...)"
            },
            {
              "pattern": "django.http.HttpResponseBadRequest(..., request.$W[...], ...)"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.http.HttpResponseBadRequest(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $DATA\n...\ndjango.http.HttpResponseBadRequest(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.http.HttpResponseBadRequest(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.http.HttpResponseBadRequest(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.http.HttpResponseBadRequest(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR % $DATA\n...\ndjango.http.HttpResponseBadRequest(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.http.HttpResponseBadRequest(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.http.HttpResponseBadRequest(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.http.HttpResponseBadRequest(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR + $DATA\n...\ndjango.http.HttpResponseBadRequest(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.http.HttpResponseBadRequest(..., request.$W[...], ...)"
            },
            {
              "pattern": "return django.http.HttpResponseBadRequest(..., request.$W[...], ...)"
            },
            {
              "pattern": "django.http.HttpResponseBadRequest(..., $S.format(..., request.$W, ...), ...)"
            },
            {
              "pattern": "django.http.HttpResponseBadRequest(..., $S % request.$W, ...)"
            },
            {
              "pattern": "django.http.HttpResponseBadRequest(..., f\"...{request.$W}...\", ...)"
            },
            {
              "pattern": "django.http.HttpResponseBadRequest(..., request.$W, ...)"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.http.HttpResponseBadRequest(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $DATA\n...\ndjango.http.HttpResponseBadRequest(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.http.HttpResponseBadRequest(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.http.HttpResponseBadRequest(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.http.HttpResponseBadRequest(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR % $DATA\n...\ndjango.http.HttpResponseBadRequest(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.http.HttpResponseBadRequest(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.http.HttpResponseBadRequest(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.http.HttpResponseBadRequest(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR + $DATA\n...\ndjango.http.HttpResponseBadRequest(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.http.HttpResponseBadRequest(..., request.$W, ...)"
            },
            {
              "pattern": "return django.http.HttpResponseBadRequest(..., request.$W, ...)"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.django.security.injection.request-data-fileresponse",
      "languages": [
        "python"
      ],
      "message": "Found user-controlled request data being passed into a file open, which is them passed as an argument into the FileResponse. This is dangerous because an attacker could specify an arbitrary file to read, which could result in leaking important data. Be sure to validate or sanitize the user-inputted filename in the request data before using it in FileResponse.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://django-book.readthedocs.io/en/latest/chapter20.html#cross-site-scripting-xss"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "def $FUNC(...):\n  ...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "django.http.FileResponse(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.http.FileResponse(..., open($DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = open($DATA, ...)\n...\ndjango.http.FileResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.http.FileResponse(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "return django.http.FileResponse(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "django.http.FileResponse(..., request.$W(...), ...)"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.http.FileResponse(..., open($DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = open($DATA, ...)\n...\ndjango.http.FileResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.http.FileResponse(..., request.$W(...), ...)"
            },
            {
              "pattern": "return django.http.FileResponse(..., request.$W(...), ...)"
            },
            {
              "pattern": "django.http.FileResponse(..., request.$W[...], ...)"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.http.FileResponse(..., open($DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = open($DATA, ...)\n...\ndjango.http.FileResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.http.FileResponse(..., request.$W[...], ...)"
            },
            {
              "pattern": "return django.http.FileResponse(..., request.$W[...], ...)"
            },
            {
              "pattern": "django.http.FileResponse(..., request.$W, ...)"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.http.FileResponse(..., open($DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = open($DATA, ...)\n...\ndjango.http.FileResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.http.FileResponse(..., request.$W, ...)"
            },
            {
              "pattern": "return django.http.FileResponse(..., request.$W, ...)"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.django.security.injection.request-data-write",
      "languages": [
        "python"
      ],
      "message": "Found user-controlled request data passed into '.write(...)'. This could be dangerous if a malicious actor is able to control data into sensitive files. For example, a malicious actor could force rolling of critical log files, or cause a denial-of-service by using up available disk space. Instead, ensure that request data is properly escaped or sanitized.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')"
        ],
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "pattern-either": [
        {
          "pattern": "$F.write(..., request.$W.get(...), ...)"
        },
        {
          "pattern": "$DATA = request.$W.get(...)\n...\n$F.write(..., $DATA, ...)\n"
        },
        {
          "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $DATA\n...\n$F.write(..., $INTERM, ...)\n"
        },
        {
          "pattern": "$DATA = request.$W.get(...)\n...\n$F.write(..., $B.$C(..., $DATA, ...), ...)\n"
        },
        {
          "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $B.$C(..., $DATA, ...)\n...\n$F.write(..., $INTERM, ...)\n"
        },
        {
          "pattern": "$DATA = request.$W.get(...)\n...\n$F.write(..., $STR % $DATA, ...)\n"
        },
        {
          "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % $DATA\n...\n$F.write(..., $INTERM, ...)\n"
        },
        {
          "pattern": "$DATA = request.$W.get(...)\n...\n$F.write(..., f\"...{$DATA}...\", ...)\n"
        },
        {
          "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\n$F.write(..., $INTERM, ...)\n"
        },
        {
          "pattern": "$A = $F.write(..., request.$W.get(...), ...)"
        },
        {
          "pattern": "return $F.write(..., request.$W.get(...), ...)"
        },
        {
          "pattern": "$F.write(..., request.$W(...), ...)"
        },
        {
          "pattern": "$DATA = request.$W(...)\n...\n$F.write(..., $DATA, ...)\n"
        },
        {
          "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $DATA\n...\n$F.write(..., $INTERM, ...)\n"
        },
        {
          "pattern": "$DATA = request.$W(...)\n...\n$F.write(..., $B.$C(..., $DATA, ...), ...)\n"
        },
        {
          "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $B.$C(..., $DATA, ...)\n...\n$F.write(..., $INTERM, ...)\n"
        },
        {
          "pattern": "$DATA = request.$W(...)\n...\n$F.write(..., $STR % $DATA, ...)\n"
        },
        {
          "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR % $DATA\n...\n$F.write(..., $INTERM, ...)\n"
        },
        {
          "pattern": "$DATA = request.$W(...)\n...\n$F.write(..., f\"...{$DATA}...\", ...)\n"
        },
        {
          "pattern": "$DATA = request.$W(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\n$F.write(..., $INTERM, ...)\n"
        },
        {
          "pattern": "$A = $F.write(..., request.$W(...), ...)"
        },
        {
          "pattern": "return $F.write(..., request.$W(...), ...)"
        },
        {
          "pattern": "$F.write(..., request.$W[...], ...)"
        },
        {
          "pattern": "$DATA = request.$W[...]\n...\n$F.write(..., $DATA, ...)\n"
        },
        {
          "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $DATA\n...\n$F.write(..., $INTERM, ...)\n"
        },
        {
          "pattern": "$DATA = request.$W[...]\n...\n$F.write(..., $B.$C(..., $DATA, ...), ...)\n"
        },
        {
          "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $B.$C(..., $DATA, ...)\n...\n$F.write(..., $INTERM, ...)\n"
        },
        {
          "pattern": "$DATA = request.$W[...]\n...\n$F.write(..., $STR % $DATA, ...)\n"
        },
        {
          "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR % $DATA\n...\n$F.write(..., $INTERM, ...)\n"
        },
        {
          "pattern": "$DATA = request.$W[...]\n...\n$F.write(..., f\"...{$DATA}...\", ...)\n"
        },
        {
          "pattern": "$DATA = request.$W[...]\n...\n$INTERM = f\"...{$DATA}...\"\n...\n$F.write(..., $INTERM, ...)\n"
        },
        {
          "pattern": "$A = $F.write(..., request.$W[...], ...)"
        },
        {
          "pattern": "return $F.write(..., request.$W[...], ...)"
        },
        {
          "pattern": "$F.write(..., request.$W, ...)"
        },
        {
          "pattern": "$DATA = request.$W\n...\n$F.write(..., $DATA, ...)\n"
        },
        {
          "pattern": "$DATA = request.$W\n...\n$INTERM = $DATA\n...\n$F.write(..., $INTERM, ...)\n"
        },
        {
          "pattern": "$DATA = request.$W\n...\n$F.write(..., $B.$C(..., $DATA, ...), ...)\n"
        },
        {
          "pattern": "$DATA = request.$W\n...\n$INTERM = $B.$C(..., $DATA, ...)\n...\n$F.write(..., $INTERM, ...)\n"
        },
        {
          "pattern": "$DATA = request.$W\n...\n$F.write(..., $STR % $DATA, ...)\n"
        },
        {
          "pattern": "$DATA = request.$W\n...\n$INTERM = $STR % $DATA\n...\n$F.write(..., $INTERM, ...)\n"
        },
        {
          "pattern": "$DATA = request.$W\n...\n$F.write(..., f\"...{$DATA}...\", ...)\n"
        },
        {
          "pattern": "$DATA = request.$W\n...\n$INTERM = f\"...{$DATA}...\"\n...\n$F.write(..., $INTERM, ...)\n"
        },
        {
          "pattern": "$A = $F.write(..., request.$W, ...)"
        },
        {
          "pattern": "return $F.write(..., request.$W, ...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.django.security.injection.tainted-sql-string",
      "languages": [
        "python"
      ],
      "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"
        ],
        "impact": "LOW",
        "likelihood": "MEDIUM",
        "owasp": [
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "django"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "\"$SQLSTR\" + ...\n"
                },
                {
                  "pattern": "\"$SQLSTR\" % ...\n"
                },
                {
                  "pattern": "\"$SQLSTR\".format(...)\n"
                },
                {
                  "pattern": "f\"$SQLSTR{...}...\"\n"
                }
              ]
            },
            {
              "metavariable-regex": {
                "metavariable": "$SQLSTR",
                "regex": "\\s*(?i)(select|delete|insert|create|update|alter|drop)\\b.*"
              }
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "request.$ANYTHING"
            },
            {
              "pattern-not": "request.build_absolute_uri"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.django.security.injection.tainted-url-host",
      "languages": [
        "python"
      ],
      "message": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-918: Server-Side Request Forgery (SSRF)"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A10:2021 - Server-Side Request Forgery (SSRF)"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "flask"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern": "\"$URLSTR\" % ..."
                    },
                    {
                      "metavariable-pattern": {
                        "language": "generic",
                        "metavariable": "$URLSTR",
                        "patterns": [
                          {
                            "pattern-either": [
                              {
                                "pattern": "$SCHEME://%s"
                              },
                              {
                                "pattern": "$SCHEME://%r"
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern": "\"$URLSTR\".format(...)"
                    },
                    {
                      "metavariable-pattern": {
                        "language": "generic",
                        "metavariable": "$URLSTR",
                        "pattern": "$SCHEME:// { ... }"
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern": "\"$URLSTR\" + ..."
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$URLSTR",
                        "regex": ".*://$"
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern": "f\"$URLSTR{...}...\""
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$URLSTR",
                        "regex": ".*://$"
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "$URL = \"$URLSTR\"\n...\n"
                    },
                    {
                      "pattern": "$URL += ..."
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$URLSTR",
                        "regex": ".*://$"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "request.$ANYTHING"
            },
            {
              "pattern-not": "request.build_absolute_uri"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.django.security.injection.code.globals-misuse-code-execution",
      "languages": [
        "python"
      ],
      "message": "Found request data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://github.com/mpirnat/lets-be-bad-guys/blob/d92768fb3ade32956abd53bd6bb06e19d634a084/badguys/vulnerable/views.py#L181-L186"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "def $FUNC(...):\n  ...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = globals().get($DATA, ...)\n...\n$INTERM(...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = globals().get(\"...\" % $DATA, ...)\n...\n$INTERM(...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = globals().get(f\"...{$DATA}...\", ...)\n...\n$INTERM(...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = globals().get(\"...\".format(..., $DATA, ...), ...)\n...\n$INTERM(...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = globals()[$DATA]\n...\n$INTERM(...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = globals()[\"...\" % $DATA]\n...\n$INTERM(...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = globals()[f\"...{$DATA}...\"]\n...\n$INTERM(...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = globals()[\"...\".format(..., $DATA, ...)]\n...\n$INTERM(...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = globals().get($DATA, ...)\n...\n$INTERM(...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = globals().get(\"...\" % $DATA, ...)\n...\n$INTERM(...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = globals().get(f\"...{$DATA}...\", ...)\n...\n$INTERM(...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = globals().get(\"...\".format(..., $DATA, ...), ...)\n...\n$INTERM(...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = globals()[$DATA]\n...\n$INTERM(...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = globals()[\"...\" % $DATA]\n...\n$INTERM(...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = globals()[f\"...{$DATA}...\"]\n...\n$INTERM(...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = globals()[\"...\".format(..., $DATA, ...)]\n...\n$INTERM(...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = globals().get($DATA, ...)\n...\n$INTERM(...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = globals().get(\"...\" % $DATA, ...)\n...\n$INTERM(...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = globals().get(f\"...{$DATA}...\", ...)\n...\n$INTERM(...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = globals().get(\"...\".format(..., $DATA, ...), ...)\n...\n$INTERM(...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = globals()[$DATA]\n...\n$INTERM(...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = globals()[\"...\" % $DATA]\n...\n$INTERM(...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = globals()[f\"...{$DATA}...\"]\n...\n$INTERM(...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = globals()[\"...\".format(..., $DATA, ...)]\n...\n$INTERM(...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = globals().get($DATA, ...)\n...\n$INTERM(...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = globals().get(\"...\" % $DATA, ...)\n...\n$INTERM(...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = globals().get(f\"...{$DATA}...\", ...)\n...\n$INTERM(...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = globals().get(\"...\".format(..., $DATA, ...), ...)\n...\n$INTERM(...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = globals()[$DATA]\n...\n$INTERM(...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = globals()[\"...\" % $DATA]\n...\n$INTERM(...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = globals()[f\"...{$DATA}...\"]\n...\n$INTERM(...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = globals()[\"...\".format(..., $DATA, ...)]\n...\n$INTERM(...)\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.django.security.injection.code.user-eval-format-string",
      "languages": [
        "python"
      ],
      "message": "Found user data in a call to 'eval'. This is extremely dangerous because it can enable an attacker to execute remote code. See https://owasp.org/www-community/attacks/Code_Injection for more information.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
        ],
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "def $F(...):\n  ...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "eval(..., $STR % request.$W.get(...), ...)"
            },
            {
              "pattern": "$V = request.$W.get(...)\n...\neval(..., $STR % $V, ...)\n"
            },
            {
              "pattern": "$V = request.$W.get(...)\n...\n$S = $STR % $V\n...\neval(..., $S, ...)\n"
            },
            {
              "pattern": "eval(..., \"...\" % request.$W(...), ...)"
            },
            {
              "pattern": "$V = request.$W(...)\n...\neval(..., $STR % $V, ...)\n"
            },
            {
              "pattern": "$V = request.$W(...)\n...\n$S = $STR % $V\n...\neval(..., $S, ...)\n"
            },
            {
              "pattern": "eval(..., $STR % request.$W[...], ...)"
            },
            {
              "pattern": "$V = request.$W[...]\n...\neval(..., $STR % $V, ...)\n"
            },
            {
              "pattern": "$V = request.$W[...]\n...\n$S = $STR % $V\n...\neval(..., $S, ...)\n"
            },
            {
              "pattern": "eval(..., $STR.format(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "$V = request.$W.get(...)\n...\neval(..., $STR.format(..., $V, ...), ...)\n"
            },
            {
              "pattern": "$V = request.$W.get(...)\n...\n$S = $STR.format(..., $V, ...)\n...\neval(..., $S, ...)\n"
            },
            {
              "pattern": "eval(..., $STR.format(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "$V = request.$W(...)\n...\neval(..., $STR.format(..., $V, ...), ...)\n"
            },
            {
              "pattern": "$V = request.$W(...)\n...\n$S = $STR.format(..., $V, ...)\n...\neval(..., $S, ...)\n"
            },
            {
              "pattern": "eval(..., $STR.format(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "$V = request.$W[...]\n...\neval(..., $STR.format(..., $V, ...), ...)\n"
            },
            {
              "pattern": "$V = request.$W[...]\n...\n$S = $STR.format(..., $V, ...)\n...\neval(..., $S, ...)\n"
            },
            {
              "pattern": "$V = request.$W.get(...)\n...\neval(..., f\"...{$V}...\", ...)\n"
            },
            {
              "pattern": "$V = request.$W.get(...)\n...\n$S = f\"...{$V}...\"\n...\neval(..., $S, ...)\n"
            },
            {
              "pattern": "$V = request.$W(...)\n...\neval(..., f\"...{$V}...\", ...)\n"
            },
            {
              "pattern": "$V = request.$W(...)\n...\n$S = f\"...{$V}...\"\n...\neval(..., $S, ...)\n"
            },
            {
              "pattern": "$V = request.$W[...]\n...\neval(..., f\"...{$V}...\", ...)\n"
            },
            {
              "pattern": "$V = request.$W[...]\n...\n$S = f\"...{$V}...\"\n...\neval(..., $S, ...)\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.django.security.injection.code.user-eval",
      "languages": [
        "python"
      ],
      "message": "Found user data in a call to 'eval'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
        ],
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html",
          "https://owasp.org/www-community/attacks/Code_Injection"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "def $F(...):\n  ...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "eval(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "$V = request.$W.get(...)\n...\neval(..., $V, ...)\n"
            },
            {
              "pattern": "eval(..., request.$W(...), ...)"
            },
            {
              "pattern": "$V = request.$W(...)\n...\neval(..., $V, ...)\n"
            },
            {
              "pattern": "eval(..., request.$W[...], ...)"
            },
            {
              "pattern": "$V = request.$W[...]\n...\neval(..., $V, ...)\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.django.security.injection.code.user-exec-format-string",
      "languages": [
        "python"
      ],
      "message": "Found user data in a call to 'exec'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
        ],
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Code_Injection"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "def $F(...):\n  ...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "exec(..., $STR % request.$W.get(...), ...)"
            },
            {
              "pattern": "$V = request.$W.get(...)\n...\nexec(..., $STR % $V, ...)\n"
            },
            {
              "pattern": "$V = request.$W.get(...)\n...\n$S = $STR % $V\n...\nexec(..., $S, ...)\n"
            },
            {
              "pattern": "exec(..., \"...\" % request.$W(...), ...)"
            },
            {
              "pattern": "$V = request.$W(...)\n...\nexec(..., $STR % $V, ...)\n"
            },
            {
              "pattern": "$V = request.$W(...)\n...\n$S = $STR % $V\n...\nexec(..., $S, ...)\n"
            },
            {
              "pattern": "exec(..., $STR % request.$W[...], ...)"
            },
            {
              "pattern": "$V = request.$W[...]\n...\nexec(..., $STR % $V, ...)\n"
            },
            {
              "pattern": "$V = request.$W[...]\n...\n$S = $STR % $V\n...\nexec(..., $S, ...)\n"
            },
            {
              "pattern": "exec(..., $STR.format(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "$V = request.$W.get(...)\n...\nexec(..., $STR.format(..., $V, ...), ...)\n"
            },
            {
              "pattern": "$V = request.$W.get(...)\n...\n$S = $STR.format(..., $V, ...)\n...\nexec(..., $S, ...)\n"
            },
            {
              "pattern": "exec(..., $STR.format(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "$V = request.$W(...)\n...\nexec(..., $STR.format(..., $V, ...), ...)\n"
            },
            {
              "pattern": "$V = request.$W(...)\n...\n$S = $STR.format(..., $V, ...)\n...\nexec(..., $S, ...)\n"
            },
            {
              "pattern": "exec(..., $STR.format(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "$V = request.$W[...]\n...\nexec(..., $STR.format(..., $V, ...), ...)\n"
            },
            {
              "pattern": "$V = request.$W[...]\n...\n$S = $STR.format(..., $V, ...)\n...\nexec(..., $S, ...)\n"
            },
            {
              "pattern": "$V = request.$W.get(...)\n...\nexec(..., f\"...{$V}...\", ...)\n"
            },
            {
              "pattern": "$V = request.$W.get(...)\n...\n$S = f\"...{$V}...\"\n...\nexec(..., $S, ...)\n"
            },
            {
              "pattern": "$V = request.$W(...)\n...\nexec(..., f\"...{$V}...\", ...)\n"
            },
            {
              "pattern": "$V = request.$W(...)\n...\n$S = f\"...{$V}...\"\n...\nexec(..., $S, ...)\n"
            },
            {
              "pattern": "$V = request.$W[...]\n...\nexec(..., f\"...{$V}...\", ...)\n"
            },
            {
              "pattern": "$V = request.$W[...]\n...\n$S = f\"...{$V}...\"\n...\nexec(..., $S, ...)\n"
            },
            {
              "pattern": "exec(..., base64.decodestring($S.format(..., request.$W.get(...), ...), ...), ...)"
            },
            {
              "pattern": "exec(..., base64.decodestring($S % request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "exec(..., base64.decodestring(f\"...{request.$W.get(...)}...\", ...), ...)"
            },
            {
              "pattern": "exec(..., base64.decodestring(request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "exec(..., base64.decodestring(bytes($S.format(..., request.$W.get(...), ...), ...), ...), ...)"
            },
            {
              "pattern": "exec(..., base64.decodestring(bytes($S % request.$W.get(...), ...), ...), ...)"
            },
            {
              "pattern": "exec(..., base64.decodestring(bytes(f\"...{request.$W.get(...)}...\", ...), ...), ...)"
            },
            {
              "pattern": "exec(..., base64.decodestring(bytes(request.$W.get(...), ...), ...), ...)"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nexec(..., base64.decodestring($DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = base64.decodestring($DATA, ...)\n...\nexec(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nexec(..., base64.decodestring(bytes($DATA, ...), ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = base64.decodestring(bytes($DATA, ...), ...)\n...\nexec(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nexec(..., base64.decodestring($DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = base64.decodestring($DATA, ...)\n...\nexec(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nexec(..., base64.decodestring(bytes($DATA, ...), ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = base64.decodestring(bytes($DATA, ...), ...)\n...\nexec(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nexec(..., base64.decodestring($DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = base64.decodestring($DATA, ...)\n...\nexec(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nexec(..., base64.decodestring(bytes($DATA, ...), ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = base64.decodestring(bytes($DATA, ...), ...)\n...\nexec(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\nexec(..., base64.decodestring($DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = base64.decodestring($DATA, ...)\n...\nexec(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\nexec(..., base64.decodestring(bytes($DATA, ...), ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = base64.decodestring(bytes($DATA, ...), ...)\n...\nexec(..., $INTERM, ...)\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.django.security.injection.code.user-exec",
      "languages": [
        "python"
      ],
      "message": "Found user data in a call to 'exec'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
        ],
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Code_Injection"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "def $F(...):\n  ...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "exec(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "$V = request.$W.get(...)\n...\nexec(..., $V, ...)\n"
            },
            {
              "pattern": "exec(..., request.$W(...), ...)"
            },
            {
              "pattern": "$V = request.$W(...)\n...\nexec(..., $V, ...)\n"
            },
            {
              "pattern": "exec(..., request.$W[...], ...)"
            },
            {
              "pattern": "$V = request.$W[...]\n...\nexec(..., $V, ...)\n"
            },
            {
              "pattern": "loop = asyncio.get_running_loop()\n...\nawait loop.run_in_executor(None, exec, request.$W[...])\n"
            },
            {
              "pattern": "$V = request.$W[...]\n...\nloop = asyncio.get_running_loop()\n...\nawait loop.run_in_executor(None, exec, $V)\n"
            },
            {
              "pattern": "loop = asyncio.get_running_loop()\n...\nawait loop.run_in_executor(None, exec, request.$W.get(...))\n"
            },
            {
              "pattern": "$V = request.$W.get(...)\n...\nloop = asyncio.get_running_loop()\n...\nawait loop.run_in_executor(None, exec, $V)\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.django.security.injection.command.command-injection-os-system",
      "languages": [
        "python"
      ],
      "message": "Request data detected in os.system. This could be vulnerable to a command injection and should be avoided. If this must be done, use the 'subprocess' module instead and pass the arguments as a list. See https://owasp.org/www-community/attacks/Command_Injection for more information.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "def $FUNC(...):\n  ...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "os.system(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "os.system(..., $S.format(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "os.system(..., $S % request.$W.get(...), ...)"
            },
            {
              "pattern": "os.system(..., f\"...{request.$W.get(...)}...\", ...)"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nos.system(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $DATA\n...\nos.system(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nos.system(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\nos.system(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nos.system(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % $DATA\n...\nos.system(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nos.system(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\nos.system(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nos.system(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR + $DATA\n...\nos.system(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = os.system(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "$A = os.system(..., $S.format(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "$A = os.system(..., $S % request.$W.get(...), ...)"
            },
            {
              "pattern": "$A = os.system(..., f\"...{request.$W.get(...)}...\", ...)"
            },
            {
              "pattern": "return os.system(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "return os.system(..., $S.format(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "return os.system(..., $S % request.$W.get(...), ...)"
            },
            {
              "pattern": "return os.system(..., f\"...{request.$W.get(...)}...\", ...)"
            },
            {
              "pattern": "os.system(..., request.$W(...), ...)"
            },
            {
              "pattern": "os.system(..., $S.format(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "os.system(..., $S % request.$W(...), ...)"
            },
            {
              "pattern": "os.system(..., f\"...{request.$W(...)}...\", ...)"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nos.system(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $DATA\n...\nos.system(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nos.system(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\nos.system(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nos.system(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR % $DATA\n...\nos.system(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nos.system(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\nos.system(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nos.system(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR + $DATA\n...\nos.system(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = os.system(..., request.$W(...), ...)"
            },
            {
              "pattern": "$A = os.system(..., $S.format(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "$A = os.system(..., $S % request.$W(...), ...)"
            },
            {
              "pattern": "$A = os.system(..., f\"...{request.$W(...)}...\", ...)"
            },
            {
              "pattern": "return os.system(..., request.$W(...), ...)"
            },
            {
              "pattern": "return os.system(..., $S.format(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "return os.system(..., $S % request.$W(...), ...)"
            },
            {
              "pattern": "return os.system(..., f\"...{request.$W(...)}...\", ...)"
            },
            {
              "pattern": "os.system(..., request.$W[...], ...)"
            },
            {
              "pattern": "os.system(..., $S.format(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "os.system(..., $S % request.$W[...], ...)"
            },
            {
              "pattern": "os.system(..., f\"...{request.$W[...]}...\", ...)"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nos.system(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $DATA\n...\nos.system(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nos.system(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\nos.system(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nos.system(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR % $DATA\n...\nos.system(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nos.system(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = f\"...{$DATA}...\"\n...\nos.system(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nos.system(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR + $DATA\n...\nos.system(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = os.system(..., request.$W[...], ...)"
            },
            {
              "pattern": "$A = os.system(..., $S.format(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "$A = os.system(..., $S % request.$W[...], ...)"
            },
            {
              "pattern": "$A = os.system(..., f\"...{request.$W[...]}...\", ...)"
            },
            {
              "pattern": "return os.system(..., request.$W[...], ...)"
            },
            {
              "pattern": "return os.system(..., $S.format(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "return os.system(..., $S % request.$W[...], ...)"
            },
            {
              "pattern": "return os.system(..., f\"...{request.$W[...]}...\", ...)"
            },
            {
              "pattern": "os.system(..., request.$W, ...)"
            },
            {
              "pattern": "os.system(..., $S.format(..., request.$W, ...), ...)"
            },
            {
              "pattern": "os.system(..., $S % request.$W, ...)"
            },
            {
              "pattern": "os.system(..., f\"...{request.$W}...\", ...)"
            },
            {
              "pattern": "$DATA = request.$W\n...\nos.system(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $DATA\n...\nos.system(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\nos.system(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\nos.system(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\nos.system(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR % $DATA\n...\nos.system(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\nos.system(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = f\"...{$DATA}...\"\n...\nos.system(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\nos.system(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR + $DATA\n...\nos.system(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = os.system(..., request.$W, ...)"
            },
            {
              "pattern": "$A = os.system(..., $S.format(..., request.$W, ...), ...)"
            },
            {
              "pattern": "$A = os.system(..., $S % request.$W, ...)"
            },
            {
              "pattern": "$A = os.system(..., f\"...{request.$W}...\", ...)"
            },
            {
              "pattern": "return os.system(..., request.$W, ...)"
            },
            {
              "pattern": "return os.system(..., $S.format(..., request.$W, ...), ...)"
            },
            {
              "pattern": "return os.system(..., $S % request.$W, ...)"
            },
            {
              "pattern": "return os.system(..., f\"...{request.$W}...\", ...)"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.django.security.injection.command.subprocess-injection",
      "languages": [
        "python"
      ],
      "message": "Detected user input entering a `subprocess` call unsafely. This could result in a command injection vulnerability. An attacker could use this vulnerability to execute arbitrary commands on the host, which allows them to download malware, scan sensitive data, or run any command they wish on the server. Do not let users choose the command to run. In general, prefer to use Python API versions of system commands. If you must use subprocess, use a dictionary to allowlist a set of commands.",
      "metadata": {
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "flask"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sanitizers": [
        {
          "patterns": [
            {
              "pattern": "$DICT[$KEY]"
            },
            {
              "focus-metavariable": "$KEY"
            }
          ]
        }
      ],
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern": "subprocess.$FUNC(...)"
                    },
                    {
                      "pattern-not": "subprocess.$FUNC(\"...\", ...)"
                    },
                    {
                      "pattern-not": "subprocess.$FUNC([\"...\", ...], ...)"
                    },
                    {
                      "pattern-not-inside": "$CMD = [\"...\", ...]\n...\nsubprocess.$FUNC($CMD, ...)\n"
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern": "subprocess.$FUNC([\"$SHELL\", \"-c\", ...], ...)"
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$SHELL",
                        "regex": "^(sh|bash|ksh|csh|tcsh|zsh)$"
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern": "subprocess.$FUNC([\"$INTERPRETER\", ...], ...)"
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$INTERPRETER",
                        "regex": "^(python|python\\d)$"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-inside": "def $FUNC(..., $REQUEST, ...):\n  ...\n"
            },
            {
              "focus-metavariable": "$REQUEST"
            },
            {
              "metavariable-pattern": {
                "metavariable": "$REQUEST",
                "patterns": [
                  {
                    "pattern": "request"
                  },
                  {
                    "pattern-not-inside": "request.build_absolute_uri"
                  }
                ]
              }
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.django.security.injection.email.xss-html-email-body",
      "languages": [
        "python"
      ],
      "message": "Found request data in an EmailMessage that is set to use HTML. This is dangerous because HTML emails are susceptible to XSS. An attacker could inject data into this HTML email, causing XSS.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')"
        ],
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://www.damonkohler.com/2008/12/email-injection.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "def $FUNC(...):\n  ...\n  $EMAIL.content_subtype = \"html\"\n  ...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "django.core.mail.EmailMessage($SUBJ, request.$W.get(...), ...)"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.core.mail.EmailMessage($SUBJ, $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $DATA\n...\ndjango.core.mail.EmailMessage($SUBJ, $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.core.mail.EmailMessage($SUBJ, $B.$C(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $B.$C(..., $DATA, ...)\n...\ndjango.core.mail.EmailMessage($SUBJ, $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.core.mail.EmailMessage($SUBJ, $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % $DATA\n...\ndjango.core.mail.EmailMessage($SUBJ, $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.core.mail.EmailMessage($SUBJ, f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.core.mail.EmailMessage($SUBJ, $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.core.mail.EmailMessage($SUBJ, request.$W.get(...), ...)"
            },
            {
              "pattern": "return django.core.mail.EmailMessage($SUBJ, request.$W.get(...), ...)"
            },
            {
              "pattern": "django.core.mail.EmailMessage($SUBJ, request.$W(...), ...)"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.core.mail.EmailMessage($SUBJ, $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $DATA\n...\ndjango.core.mail.EmailMessage($SUBJ, $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.core.mail.EmailMessage($SUBJ, $B.$C(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $B.$C(..., $DATA, ...)\n...\ndjango.core.mail.EmailMessage($SUBJ, $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.core.mail.EmailMessage($SUBJ, $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR % $DATA\n...\ndjango.core.mail.EmailMessage($SUBJ, $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.core.mail.EmailMessage($SUBJ, f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.core.mail.EmailMessage($SUBJ, $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.core.mail.EmailMessage($SUBJ, request.$W(...), ...)"
            },
            {
              "pattern": "return django.core.mail.EmailMessage($SUBJ, request.$W(...), ...)"
            },
            {
              "pattern": "django.core.mail.EmailMessage($SUBJ, request.$W[...], ...)"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.core.mail.EmailMessage($SUBJ, $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $DATA\n...\ndjango.core.mail.EmailMessage($SUBJ, $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.core.mail.EmailMessage($SUBJ, $B.$C(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $B.$C(..., $DATA, ...)\n...\ndjango.core.mail.EmailMessage($SUBJ, $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.core.mail.EmailMessage($SUBJ, $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR % $DATA\n...\ndjango.core.mail.EmailMessage($SUBJ, $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.core.mail.EmailMessage($SUBJ, f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.core.mail.EmailMessage($SUBJ, $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.core.mail.EmailMessage($SUBJ, request.$W[...], ...)"
            },
            {
              "pattern": "return django.core.mail.EmailMessage($SUBJ, request.$W[...], ...)"
            },
            {
              "pattern": "django.core.mail.EmailMessage($SUBJ, request.$W, ...)"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.core.mail.EmailMessage($SUBJ, $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $DATA\n...\ndjango.core.mail.EmailMessage($SUBJ, $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.core.mail.EmailMessage($SUBJ, $B.$C(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $B.$C(..., $DATA, ...)\n...\ndjango.core.mail.EmailMessage($SUBJ, $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.core.mail.EmailMessage($SUBJ, $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR % $DATA\n...\ndjango.core.mail.EmailMessage($SUBJ, $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.core.mail.EmailMessage($SUBJ, f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.core.mail.EmailMessage($SUBJ, $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.core.mail.EmailMessage($SUBJ, request.$W, ...)"
            },
            {
              "pattern": "return django.core.mail.EmailMessage($SUBJ, request.$W, ...)"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.django.security.injection.email.xss-send-mail-html-message",
      "languages": [
        "python"
      ],
      "message": "Found request data in 'send_mail(...)' that uses 'html_message'. This is dangerous because HTML emails are susceptible to XSS. An attacker could inject data into this HTML email, causing XSS.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')"
        ],
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://www.damonkohler.com/2008/12/email-injection.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "def $FUNC(...):\n  ...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "django.core.mail.send_mail(..., html_message=request.$W.get(...), ...)"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.core.mail.send_mail(..., html_message=$DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $DATA\n...\ndjango.core.mail.send_mail(..., html_message=$INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.core.mail.send_mail(..., html_message=$STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.core.mail.send_mail(..., html_message=$INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.core.mail.send_mail(..., html_message=$STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % $DATA\n...\ndjango.core.mail.send_mail(..., html_message=$INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.core.mail.send_mail(..., html_message=f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.core.mail.send_mail(..., html_message=$INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.core.mail.send_mail(..., html_message=$STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR + $DATA\n...\ndjango.core.mail.send_mail(..., html_message=$INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.core.mail.send_mail(..., html_message=request.$W.get(...), ...)"
            },
            {
              "pattern": "return django.core.mail.send_mail(..., html_message=request.$W.get(...), ...)"
            },
            {
              "pattern": "django.core.mail.send_mail(..., html_message=request.$W(...), ...)"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.core.mail.send_mail(..., html_message=$DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $DATA\n...\ndjango.core.mail.send_mail(..., html_message=$INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.core.mail.send_mail(..., html_message=$STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.core.mail.send_mail(..., html_message=$INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.core.mail.send_mail(..., html_message=$STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR % $DATA\n...\ndjango.core.mail.send_mail(..., html_message=$INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.core.mail.send_mail(..., html_message=f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.core.mail.send_mail(..., html_message=$INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.core.mail.send_mail(..., html_message=$STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR + $DATA\n...\ndjango.core.mail.send_mail(..., html_message=$INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.core.mail.send_mail(..., html_message=request.$W(...), ...)"
            },
            {
              "pattern": "return django.core.mail.send_mail(..., html_message=request.$W(...), ...)"
            },
            {
              "pattern": "django.core.mail.send_mail(..., html_message=request.$W[...], ...)"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.core.mail.send_mail(..., html_message=$DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $DATA\n...\ndjango.core.mail.send_mail(..., html_message=$INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.core.mail.send_mail(..., html_message=$STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.core.mail.send_mail(..., html_message=$INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.core.mail.send_mail(..., html_message=$STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR % $DATA\n...\ndjango.core.mail.send_mail(..., html_message=$INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.core.mail.send_mail(..., html_message=f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.core.mail.send_mail(..., html_message=$INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.core.mail.send_mail(..., html_message=$STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR + $DATA\n...\ndjango.core.mail.send_mail(..., html_message=$INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.core.mail.send_mail(..., html_message=request.$W[...], ...)"
            },
            {
              "pattern": "return django.core.mail.send_mail(..., html_message=request.$W[...], ...)"
            },
            {
              "pattern": "django.core.mail.send_mail(..., html_message=request.$W, ...)"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.core.mail.send_mail(..., html_message=$DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $DATA\n...\ndjango.core.mail.send_mail(..., html_message=$INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.core.mail.send_mail(..., html_message=$STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.core.mail.send_mail(..., html_message=$INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.core.mail.send_mail(..., html_message=$STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR % $DATA\n...\ndjango.core.mail.send_mail(..., html_message=$INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.core.mail.send_mail(..., html_message=f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.core.mail.send_mail(..., html_message=$INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.core.mail.send_mail(..., html_message=$STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR + $DATA\n...\ndjango.core.mail.send_mail(..., html_message=$INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.core.mail.send_mail(..., html_message=request.$W, ...)"
            },
            {
              "pattern": "return django.core.mail.send_mail(..., html_message=request.$W, ...)"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.django.security.injection.path-traversal.path-traversal-file-name",
      "languages": [
        "python"
      ],
      "message": "Data from request is passed to a file name `$FILE`. This is a path traversal vulnerability, which can lead to sensitive data being leaked. To mitigate, consider using os.path.abspath or os.path.realpath or the pathlib library.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "def $F(...):\n  ...\n"
        },
        {
          "pattern-not-inside": "def $F(...):\n  ...\n  os.path.realpath(...)\n  ...\n"
        },
        {
          "pattern-not-inside": "def $F(...):\n  ...\n  os.path.abspath(...)\n  ...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "$V = request.$W.get($X)\n...\n$FILE % ($V)\n"
            },
            {
              "pattern": "$V = request.$W[$X]\n...\n$FILE % ($V)\n"
            },
            {
              "pattern": "$V = request.$W($X)\n...\n$FILE % ($V)\n"
            },
            {
              "pattern": "$V = request.$W\n...\n$FILE % ($V)\n# match format use cases\n"
            },
            {
              "pattern": "$V = request.$W.get($X)\n...\n$FILE.format(..., $V, ...)\n"
            },
            {
              "pattern": "$V = request.$W[$X]\n...\n$FILE.format(..., $V, ...)\n"
            },
            {
              "pattern": "$V = request.$W($X)\n...\n$FILE.format(..., $V, ...)\n"
            },
            {
              "pattern": "$V = request.$W\n...\n$FILE.format(..., $V, ...)\n"
            }
          ]
        },
        {
          "metavariable-regex": {
            "metavariable": "$FILE",
            "regex": ".*\\.(log|zip|txt|csv|xml|html).*"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.django.security.injection.path-traversal.path-traversal-join",
      "languages": [
        "python"
      ],
      "message": "Data from request is passed to os.path.join() and to open(). This is a path traversal vulnerability, which can lead to sensitive data being leaked. To mitigate, consider using os.path.abspath or os.path.realpath or Path library.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "def $F(...):\n  ...\n"
        },
        {
          "pattern-not-inside": "def $F(...):\n  ...\n  os.path.abspath(...)\n  ...\n"
        },
        {
          "pattern-not-inside": "def $F(...):\n  ...\n  os.path.realpath(...)\n  ...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "open(os.path.join(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "open(os.path.join(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "open(os.path.join(..., request.$W, ...), ...)"
            },
            {
              "pattern": "open(os.path.join(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "$P = os.path.join(..., request.$W.get(...), ...)\n...\nopen($P, ...)\n"
            },
            {
              "pattern": "$P = os.path.join(..., request.$W(...), ...)\n...\nopen($P, ...)\n"
            },
            {
              "pattern": "$P = os.path.join(..., request.$W, ...)\n...\nopen($P, ...)\n"
            },
            {
              "pattern": "$P = os.path.join(..., request.$W[...], ...)\n...\nopen($P, ...)\n"
            },
            {
              "pattern": "$V = request.$W.get($X)\n...\n$P = os.path.join(..., $V, ...)\n...\nopen($P, ...)\n"
            },
            {
              "pattern": "$V = request.$W($X)\n...\n$P = os.path.join(..., $V, ...)\n...\nopen($P, ...)\n"
            },
            {
              "pattern": "$V = request.$W[$X]\n...\n$P = os.path.join(..., $V, ...)\n...\nopen($P, ...)\n"
            },
            {
              "pattern": "$V = request.$W\n...\n$P = os.path.join(..., $V, ...)\n...\nopen($P, ...)\n"
            },
            {
              "pattern": "$P = request.$W.get(...)\n...\nopen(os.path.join(..., $P, ...), ...)\n"
            },
            {
              "pattern": "$P = request.$W(...)\n...\nopen(os.path.join(..., $P, ...), ...)\n"
            },
            {
              "pattern": "$P = request.$W\n...\nopen(os.path.join(..., $P, ...), ...)\n"
            },
            {
              "pattern": "$P = request.$W[...]\n...\nopen(os.path.join(..., $P, ...), ...)\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.django.security.injection.path-traversal.path-traversal-open",
      "languages": [
        "python"
      ],
      "message": "Found request data in a call to 'open'. Ensure the request data is validated or sanitized, otherwise it could result in path traversal attacks and therefore sensitive data being leaked. To mitigate, consider using os.path.abspath or os.path.realpath or the pathlib library.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "def $FUNC(...):\n  ...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "open(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "open(..., $S.format(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "open(..., $S % request.$W.get(...), ...)"
            },
            {
              "pattern": "open(..., f\"...{request.$W.get(...)}...\", ...)"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nopen(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $DATA\n...\nopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $DATA\n...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nopen(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\nopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nopen(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % $DATA\n...\nopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % $DATA\n...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nopen(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\nopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nopen(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR + $DATA\n...\nopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR + $DATA\n...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "$A = open(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "$A = open(..., $S.format(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "$A = open(..., $S % request.$W.get(...), ...)"
            },
            {
              "pattern": "$A = open(..., f\"...{request.$W.get(...)}...\", ...)"
            },
            {
              "pattern": "return open(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "return open(..., $S.format(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "return open(..., $S % request.$W.get(...), ...)"
            },
            {
              "pattern": "return open(..., f\"...{request.$W.get(...)}...\", ...)"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nwith open(..., $DATA, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "open(..., request.$W(...), ...)"
            },
            {
              "pattern": "open(..., $S.format(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "open(..., $S % request.$W(...), ...)"
            },
            {
              "pattern": "open(..., f\"...{request.$W(...)}...\", ...)"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nopen(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $DATA\n...\nopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $DATA\n...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nopen(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\nopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nopen(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR % $DATA\n...\nopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR % $DATA\n...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nopen(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\nopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nopen(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR + $DATA\n...\nopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR + $DATA\n...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "$A = open(..., request.$W(...), ...)"
            },
            {
              "pattern": "$A = open(..., $S.format(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "$A = open(..., $S % request.$W(...), ...)"
            },
            {
              "pattern": "$A = open(..., f\"...{request.$W(...)}...\", ...)"
            },
            {
              "pattern": "return open(..., request.$W(...), ...)"
            },
            {
              "pattern": "return open(..., $S.format(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "return open(..., $S % request.$W(...), ...)"
            },
            {
              "pattern": "return open(..., f\"...{request.$W(...)}...\", ...)"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nwith open(..., $DATA, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "open(..., request.$W[...], ...)"
            },
            {
              "pattern": "open(..., $S.format(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "open(..., $S % request.$W[...], ...)"
            },
            {
              "pattern": "open(..., f\"...{request.$W[...]}...\", ...)"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nopen(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $DATA\n...\nopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $DATA\n...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nopen(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\nopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nopen(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR % $DATA\n...\nopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR % $DATA\n...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nopen(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = f\"...{$DATA}...\"\n...\nopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = f\"...{$DATA}...\"\n...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nopen(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR + $DATA\n...\nopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR + $DATA\n...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "$A = open(..., request.$W[...], ...)"
            },
            {
              "pattern": "$A = open(..., $S.format(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "$A = open(..., $S % request.$W[...], ...)"
            },
            {
              "pattern": "$A = open(..., f\"...{request.$W[...]}...\", ...)"
            },
            {
              "pattern": "return open(..., request.$W[...], ...)"
            },
            {
              "pattern": "return open(..., $S.format(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "return open(..., $S % request.$W[...], ...)"
            },
            {
              "pattern": "return open(..., f\"...{request.$W[...]}...\", ...)"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nwith open(..., $DATA, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "open(..., request.$W, ...)"
            },
            {
              "pattern": "open(..., $S.format(..., request.$W, ...), ...)"
            },
            {
              "pattern": "open(..., $S % request.$W, ...)"
            },
            {
              "pattern": "open(..., f\"...{request.$W}...\", ...)"
            },
            {
              "pattern": "$DATA = request.$W\n...\nopen(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $DATA\n...\nopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $DATA\n...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\nopen(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\nopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\nopen(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR % $DATA\n...\nopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR % $DATA\n...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\nopen(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = f\"...{$DATA}...\"\n...\nopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = f\"...{$DATA}...\"\n...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\nopen(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR + $DATA\n...\nopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR + $DATA\n...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "$A = open(..., request.$W, ...)"
            },
            {
              "pattern": "$A = open(..., $S.format(..., request.$W, ...), ...)"
            },
            {
              "pattern": "$A = open(..., $S % request.$W, ...)"
            },
            {
              "pattern": "$A = open(..., f\"...{request.$W}...\", ...)"
            },
            {
              "pattern": "return open(..., request.$W, ...)"
            },
            {
              "pattern": "return open(..., $S.format(..., request.$W, ...), ...)"
            },
            {
              "pattern": "return open(..., $S % request.$W, ...)"
            },
            {
              "pattern": "return open(..., f\"...{request.$W}...\", ...)"
            },
            {
              "pattern": "$DATA = request.$W\n...\nwith open(..., $DATA, ...) as $FD:\n  ...\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.django.security.injection.sql.sql-injection-using-raw",
      "languages": [
        "python"
      ],
      "message": "Data that is possible user-controlled from a python request is passed to `raw()`. This could lead to SQL injection and attackers gaining access to protected information. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "def $FUNC(...):\n  ...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "$MODEL.objects.raw(..., $S.format(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "$MODEL.objects.raw(..., $S % request.$W.get(...), ...)"
            },
            {
              "pattern": "$MODEL.objects.raw(..., f\"...{request.$W.get(...)}...\", ...)"
            },
            {
              "pattern": "$MODEL.objects.raw(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$MODEL.objects.raw(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $DATA\n...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$MODEL.objects.raw(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$MODEL.objects.raw(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % $DATA\n...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$MODEL.objects.raw(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$MODEL.objects.raw(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR + $DATA\n...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = $MODEL.objects.raw(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "return $MODEL.objects.raw(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "$MODEL.objects.raw(..., $S.format(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "$MODEL.objects.raw(..., $S % request.$W(...), ...)"
            },
            {
              "pattern": "$MODEL.objects.raw(..., f\"...{request.$W(...)}...\", ...)"
            },
            {
              "pattern": "$MODEL.objects.raw(..., request.$W(...), ...)"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$MODEL.objects.raw(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $DATA\n...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$MODEL.objects.raw(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$MODEL.objects.raw(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR % $DATA\n...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$MODEL.objects.raw(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$MODEL.objects.raw(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR + $DATA\n...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = $MODEL.objects.raw(..., request.$W(...), ...)"
            },
            {
              "pattern": "return $MODEL.objects.raw(..., request.$W(...), ...)"
            },
            {
              "pattern": "$MODEL.objects.raw(..., $S.format(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "$MODEL.objects.raw(..., $S % request.$W[...], ...)"
            },
            {
              "pattern": "$MODEL.objects.raw(..., f\"...{request.$W[...]}...\", ...)"
            },
            {
              "pattern": "$MODEL.objects.raw(..., request.$W[...], ...)"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$MODEL.objects.raw(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $DATA\n...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$MODEL.objects.raw(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$MODEL.objects.raw(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR % $DATA\n...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$MODEL.objects.raw(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = f\"...{$DATA}...\"\n...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$MODEL.objects.raw(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR + $DATA\n...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = $MODEL.objects.raw(..., request.$W[...], ...)"
            },
            {
              "pattern": "return $MODEL.objects.raw(..., request.$W[...], ...)"
            },
            {
              "pattern": "$MODEL.objects.raw(..., $S.format(..., request.$W, ...), ...)"
            },
            {
              "pattern": "$MODEL.objects.raw(..., $S % request.$W, ...)"
            },
            {
              "pattern": "$MODEL.objects.raw(..., f\"...{request.$W}...\", ...)"
            },
            {
              "pattern": "$MODEL.objects.raw(..., request.$W, ...)"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$MODEL.objects.raw(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $DATA\n...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$MODEL.objects.raw(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$MODEL.objects.raw(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR % $DATA\n...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$MODEL.objects.raw(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = f\"...{$DATA}...\"\n...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$MODEL.objects.raw(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR + $DATA\n...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = $MODEL.objects.raw(..., request.$W, ...)"
            },
            {
              "pattern": "return $MODEL.objects.raw(..., request.$W, ...)"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$MODEL.objects.raw($STR % (..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$MODEL.objects.raw($STR % (..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$MODEL.objects.raw($STR % (..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$MODEL.objects.raw($STR % (..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % (..., $DATA, ...)\n...\n$MODEL.objects.raw($INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR % (..., $DATA, ...)\n...\n$MODEL.objects.raw($INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR % (..., $DATA, ...)\n...\n$MODEL.objects.raw($INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR % (..., $DATA, ...)\n...\n$MODEL.objects.raw($INTERM, ...)\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.django.security.injection.sql.sql-injection-using-extra-where",
      "languages": [
        "python"
      ],
      "message": "User-controlled data from a request is passed to 'extra()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use parameterized queries or escape the user-controlled data by using `params` and not using quote placeholders in the SQL string.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.djangoproject.com/en/3.0/ref/models/expressions/#.objects.extra"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "def $FUNC(...):\n  ...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "$MODEL.objects.extra(..., where=[..., $S.format(..., request.$W.get(...), ...), ...], ...)"
            },
            {
              "pattern": "$MODEL.objects.extra(..., where=[..., $S % request.$W.get(...), ...], ...)"
            },
            {
              "pattern": "$MODEL.objects.extra(..., where=[..., f\"...{request.$W.get(...)}...\", ...], ...)"
            },
            {
              "pattern": "$MODEL.objects.extra(..., where=[..., request.$W.get(...), ...], ...)"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$MODEL.objects.extra(..., where=[..., $DATA, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $DATA\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$MODEL.objects.extra(..., where=[..., $STR.format(..., $DATA, ...), ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$MODEL.objects.extra(..., where=[..., $STR % $DATA, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % $DATA\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$MODEL.objects.extra(..., where=[..., f\"...{$DATA}...\", ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$MODEL.objects.extra(..., where=[..., $STR + $DATA, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR + $DATA\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$A = $MODEL.objects.extra(..., where=[..., request.$W.get(...), ...], ...)"
            },
            {
              "pattern": "return $MODEL.objects.extra(..., where=[..., request.$W.get(...), ...], ...)"
            },
            {
              "pattern": "$MODEL.objects.extra(..., where=[..., $S.format(..., request.$W(...), ...), ...], ...)"
            },
            {
              "pattern": "$MODEL.objects.extra(..., where=[..., $S % request.$W(...), ...], ...)"
            },
            {
              "pattern": "$MODEL.objects.extra(..., where=[..., f\"...{request.$W(...)}...\", ...], ...)"
            },
            {
              "pattern": "$MODEL.objects.extra(..., where=[..., request.$W(...), ...], ...)"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$MODEL.objects.extra(..., where=[..., $DATA, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $DATA\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$MODEL.objects.extra(..., where=[..., $STR.format(..., $DATA, ...), ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$MODEL.objects.extra(..., where=[..., $STR % $DATA, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR % $DATA\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$MODEL.objects.extra(..., where=[..., f\"...{$DATA}...\", ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$MODEL.objects.extra(..., where=[..., $STR + $DATA, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR + $DATA\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$A = $MODEL.objects.extra(..., where=[..., request.$W(...), ...], ...)"
            },
            {
              "pattern": "return $MODEL.objects.extra(..., where=[..., request.$W(...), ...], ...)"
            },
            {
              "pattern": "$MODEL.objects.extra(..., where=[..., $S.format(..., request.$W[...], ...), ...], ...)"
            },
            {
              "pattern": "$MODEL.objects.extra(..., where=[..., $S % request.$W[...], ...], ...)"
            },
            {
              "pattern": "$MODEL.objects.extra(..., where=[..., f\"...{request.$W[...]}...\", ...], ...)"
            },
            {
              "pattern": "$MODEL.objects.extra(..., where=[..., request.$W[...], ...], ...)"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$MODEL.objects.extra(..., where=[..., $DATA, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $DATA\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$MODEL.objects.extra(..., where=[..., $STR.format(..., $DATA, ...), ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$MODEL.objects.extra(..., where=[..., $STR % $DATA, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR % $DATA\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$MODEL.objects.extra(..., where=[..., f\"...{$DATA}...\", ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = f\"...{$DATA}...\"\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$MODEL.objects.extra(..., where=[..., $STR + $DATA, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR + $DATA\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$A = $MODEL.objects.extra(..., where=[..., request.$W[...], ...], ...)"
            },
            {
              "pattern": "return $MODEL.objects.extra(..., where=[..., request.$W[...], ...], ...)"
            },
            {
              "pattern": "$MODEL.objects.extra(..., where=[..., $S.format(..., request.$W, ...), ...], ...)"
            },
            {
              "pattern": "$MODEL.objects.extra(..., where=[..., $S % request.$W, ...], ...)"
            },
            {
              "pattern": "$MODEL.objects.extra(..., where=[..., f\"...{request.$W}...\", ...], ...)"
            },
            {
              "pattern": "$MODEL.objects.extra(..., where=[..., request.$W, ...], ...)"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$MODEL.objects.extra(..., where=[..., $DATA, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $DATA\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$MODEL.objects.extra(..., where=[..., $STR.format(..., $DATA, ...), ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$MODEL.objects.extra(..., where=[..., $STR % $DATA, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR % $DATA\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$MODEL.objects.extra(..., where=[..., f\"...{$DATA}...\", ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = f\"...{$DATA}...\"\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$MODEL.objects.extra(..., where=[..., $STR + $DATA, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR + $DATA\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$A = $MODEL.objects.extra(..., where=[..., request.$W, ...], ...)"
            },
            {
              "pattern": "return $MODEL.objects.extra(..., where=[..., request.$W, ...], ...)"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$MODEL.objects.extra(..., where=[..., $STR % (..., $DATA, ...), ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$MODEL.objects.extra(..., where=[..., $STR % (..., $DATA, ...), ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$MODEL.objects.extra(..., where=[..., $STR % (..., $DATA, ...), ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$MODEL.objects.extra(..., where=[..., $STR % (..., $DATA, ...), ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % (..., $DATA, ...)\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR % (..., $DATA, ...)\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR % (..., $DATA, ...)\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR % (..., $DATA, ...)\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.django.security.injection.sql.sql-injection-using-rawsql",
      "languages": [
        "python"
      ],
      "message": "User-controlled data from request is passed to 'RawSQL()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use parameterized queries or escape the user-controlled data by using `params` and not using quote placeholders in the SQL string.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.djangoproject.com/en/3.0/ref/models/expressions/#django.db.models.expressions.RawSQL"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "def $FUNC(...):\n  ...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "django.db.models.expressions.RawSQL(..., $S.format(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "django.db.models.expressions.RawSQL(..., $S % request.$W.get(...), ...)"
            },
            {
              "pattern": "django.db.models.expressions.RawSQL(..., f\"...{request.$W.get(...)}...\", ...)"
            },
            {
              "pattern": "django.db.models.expressions.RawSQL(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.db.models.expressions.RawSQL(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $DATA\n...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.db.models.expressions.RawSQL(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.db.models.expressions.RawSQL(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % $DATA\n...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.db.models.expressions.RawSQL(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.db.models.expressions.RawSQL(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR + $DATA\n...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.db.models.expressions.RawSQL(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "return django.db.models.expressions.RawSQL(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "django.db.models.expressions.RawSQL(..., $S.format(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "django.db.models.expressions.RawSQL(..., $S % request.$W(...), ...)"
            },
            {
              "pattern": "django.db.models.expressions.RawSQL(..., f\"...{request.$W(...)}...\", ...)"
            },
            {
              "pattern": "django.db.models.expressions.RawSQL(..., request.$W(...), ...)"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.db.models.expressions.RawSQL(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $DATA\n...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.db.models.expressions.RawSQL(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.db.models.expressions.RawSQL(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR % $DATA\n...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.db.models.expressions.RawSQL(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.db.models.expressions.RawSQL(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR + $DATA\n...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.db.models.expressions.RawSQL(..., request.$W(...), ...)"
            },
            {
              "pattern": "return django.db.models.expressions.RawSQL(..., request.$W(...), ...)"
            },
            {
              "pattern": "django.db.models.expressions.RawSQL(..., $S.format(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "django.db.models.expressions.RawSQL(..., $S % request.$W[...], ...)"
            },
            {
              "pattern": "django.db.models.expressions.RawSQL(..., f\"...{request.$W[...]}...\", ...)"
            },
            {
              "pattern": "django.db.models.expressions.RawSQL(..., request.$W[...], ...)"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.db.models.expressions.RawSQL(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $DATA\n...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.db.models.expressions.RawSQL(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.db.models.expressions.RawSQL(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR % $DATA\n...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.db.models.expressions.RawSQL(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.db.models.expressions.RawSQL(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR + $DATA\n...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.db.models.expressions.RawSQL(..., request.$W[...], ...)"
            },
            {
              "pattern": "return django.db.models.expressions.RawSQL(..., request.$W[...], ...)"
            },
            {
              "pattern": "django.db.models.expressions.RawSQL(..., $S.format(..., request.$W, ...), ...)"
            },
            {
              "pattern": "django.db.models.expressions.RawSQL(..., $S % request.$W, ...)"
            },
            {
              "pattern": "django.db.models.expressions.RawSQL(..., f\"...{request.$W}...\", ...)"
            },
            {
              "pattern": "django.db.models.expressions.RawSQL(..., request.$W, ...)"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.db.models.expressions.RawSQL(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $DATA\n...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.db.models.expressions.RawSQL(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.db.models.expressions.RawSQL(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR % $DATA\n...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.db.models.expressions.RawSQL(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.db.models.expressions.RawSQL(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR + $DATA\n...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.db.models.expressions.RawSQL(..., request.$W, ...)"
            },
            {
              "pattern": "return django.db.models.expressions.RawSQL(..., request.$W, ...)"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.db.models.expressions.RawSQL($STR % (..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.db.models.expressions.RawSQL($STR % (..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.db.models.expressions.RawSQL($STR % (..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.db.models.expressions.RawSQL($STR % (..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % (..., $DATA, ...)\n...\ndjango.db.models.expressions.RawSQL($INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR % (..., $DATA, ...)\n...\ndjango.db.models.expressions.RawSQL($INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR % (..., $DATA, ...)\n...\ndjango.db.models.expressions.RawSQL($INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR % (..., $DATA, ...)\n...\ndjango.db.models.expressions.RawSQL($INTERM, ...)\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.django.security.injection.sql.sql-injection-db-cursor-execute",
      "languages": [
        "python"
      ],
      "message": "User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "def $FUNC(...):\n  ...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "$CURSOR.execute(..., $S.format(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "$CURSOR.execute(..., $S % request.$W.get(...), ...)"
            },
            {
              "pattern": "$CURSOR.execute(..., f\"...{request.$W.get(...)}...\", ...)"
            },
            {
              "pattern": "$CURSOR.execute(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$CURSOR.execute(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $DATA\n...\n$CURSOR.execute(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$CURSOR.execute(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\n$CURSOR.execute(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$CURSOR.execute(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % $DATA\n...\n$CURSOR.execute(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$CURSOR.execute(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\n$CURSOR.execute(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$CURSOR.execute(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR + $DATA\n...\n$CURSOR.execute(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = $CURSOR.execute(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "return $CURSOR.execute(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "$CURSOR.execute(..., $S.format(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "$CURSOR.execute(..., $S % request.$W(...), ...)"
            },
            {
              "pattern": "$CURSOR.execute(..., f\"...{request.$W(...)}...\", ...)"
            },
            {
              "pattern": "$CURSOR.execute(..., request.$W(...), ...)"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$CURSOR.execute(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $DATA\n...\n$CURSOR.execute(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$CURSOR.execute(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\n$CURSOR.execute(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$CURSOR.execute(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR % $DATA\n...\n$CURSOR.execute(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$CURSOR.execute(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\n$CURSOR.execute(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$CURSOR.execute(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR + $DATA\n...\n$CURSOR.execute(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = $CURSOR.execute(..., request.$W(...), ...)"
            },
            {
              "pattern": "return $CURSOR.execute(..., request.$W(...), ...)"
            },
            {
              "pattern": "$CURSOR.execute(..., $S.format(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "$CURSOR.execute(..., $S % request.$W[...], ...)"
            },
            {
              "pattern": "$CURSOR.execute(..., f\"...{request.$W[...]}...\", ...)"
            },
            {
              "pattern": "$CURSOR.execute(..., request.$W[...], ...)"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$CURSOR.execute(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $DATA\n...\n$CURSOR.execute(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$CURSOR.execute(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\n$CURSOR.execute(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$CURSOR.execute(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR % $DATA\n...\n$CURSOR.execute(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$CURSOR.execute(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = f\"...{$DATA}...\"\n...\n$CURSOR.execute(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$CURSOR.execute(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR + $DATA\n...\n$CURSOR.execute(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = $CURSOR.execute(..., request.$W[...], ...)"
            },
            {
              "pattern": "return $CURSOR.execute(..., request.$W[...], ...)"
            },
            {
              "pattern": "$CURSOR.execute(..., $S.format(..., request.$W, ...), ...)"
            },
            {
              "pattern": "$CURSOR.execute(..., $S % request.$W, ...)"
            },
            {
              "pattern": "$CURSOR.execute(..., f\"...{request.$W}...\", ...)"
            },
            {
              "pattern": "$CURSOR.execute(..., request.$W, ...)"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$CURSOR.execute(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $DATA\n...\n$CURSOR.execute(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$CURSOR.execute(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\n$CURSOR.execute(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$CURSOR.execute(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR % $DATA\n...\n$CURSOR.execute(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$CURSOR.execute(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = f\"...{$DATA}...\"\n...\n$CURSOR.execute(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$CURSOR.execute(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR + $DATA\n...\n$CURSOR.execute(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = $CURSOR.execute(..., request.$W, ...)"
            },
            {
              "pattern": "return $CURSOR.execute(..., request.$W, ...)"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$CURSOR.execute($STR % (..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$CURSOR.execute($STR % (..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$CURSOR.execute($STR % (..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$CURSOR.execute($STR % (..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % (..., $DATA, ...)\n...\n$CURSOR.execute($INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR % (..., $DATA, ...)\n...\n$CURSOR.execute($INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR % (..., $DATA, ...)\n...\n$CURSOR.execute($INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR % (..., $DATA, ...)\n...\n$CURSOR.execute($INTERM, ...)"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.django.security.injection.ssrf.ssrf-injection-requests",
      "languages": [
        "python"
      ],
      "message": "Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request. See https://owasp.org/www-community/attacks/Server_Side_Request_Forgery to learn more about SSRF vulnerabilities.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-918: Server-Side Request Forgery (SSRF)"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "owasp": [
          "A10:2021 - Server-Side Request Forgery (SSRF)"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Server_Side_Request_Forgery"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "def $FUNC(...):\n  ...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "requests.$METHOD(..., $S.format(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "requests.$METHOD(..., $S % request.$W.get(...), ...)"
            },
            {
              "pattern": "requests.$METHOD(..., f\"...{request.$W.get(...)}...\", ...)"
            },
            {
              "pattern": "requests.$METHOD(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nrequests.$METHOD(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $DATA\n...\nrequests.$METHOD(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nrequests.$METHOD(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\nrequests.$METHOD(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nrequests.$METHOD(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % $DATA\n...\nrequests.$METHOD(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nrequests.$METHOD(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\nrequests.$METHOD(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nrequests.$METHOD(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR + $DATA\n...\nrequests.$METHOD(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = requests.$METHOD(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "return requests.$METHOD(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "requests.$METHOD(..., $S.format(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "requests.$METHOD(..., $S % request.$W(...), ...)"
            },
            {
              "pattern": "requests.$METHOD(..., f\"...{request.$W(...)}...\", ...)"
            },
            {
              "pattern": "requests.$METHOD(..., request.$W(...), ...)"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nrequests.$METHOD(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $DATA\n...\nrequests.$METHOD(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nrequests.$METHOD(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\nrequests.$METHOD(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nrequests.$METHOD(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR % $DATA\n...\nrequests.$METHOD(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nrequests.$METHOD(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\nrequests.$METHOD(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nrequests.$METHOD(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR + $DATA\n...\nrequests.$METHOD(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = requests.$METHOD(..., request.$W(...), ...)"
            },
            {
              "pattern": "return requests.$METHOD(..., request.$W(...), ...)"
            },
            {
              "pattern": "requests.$METHOD(..., $S.format(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "requests.$METHOD(..., $S % request.$W[...], ...)"
            },
            {
              "pattern": "requests.$METHOD(..., f\"...{request.$W[...]}...\", ...)"
            },
            {
              "pattern": "requests.$METHOD(..., request.$W[...], ...)"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nrequests.$METHOD(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $DATA\n...\nrequests.$METHOD(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nrequests.$METHOD(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\nrequests.$METHOD(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nrequests.$METHOD(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR % $DATA\n...\nrequests.$METHOD(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nrequests.$METHOD(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = f\"...{$DATA}...\"\n...\nrequests.$METHOD(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nrequests.$METHOD(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR + $DATA\n...\nrequests.$METHOD(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = requests.$METHOD(..., request.$W[...], ...)"
            },
            {
              "pattern": "return requests.$METHOD(..., request.$W[...], ...)"
            },
            {
              "pattern": "requests.$METHOD(..., $S.format(..., request.$W, ...), ...)"
            },
            {
              "pattern": "requests.$METHOD(..., $S % request.$W, ...)"
            },
            {
              "pattern": "requests.$METHOD(..., f\"...{request.$W}...\", ...)"
            },
            {
              "pattern": "requests.$METHOD(..., request.$W, ...)"
            },
            {
              "pattern": "$DATA = request.$W\n...\nrequests.$METHOD(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $DATA\n...\nrequests.$METHOD(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\nrequests.$METHOD(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\nrequests.$METHOD(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\nrequests.$METHOD(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR % $DATA\n...\nrequests.$METHOD(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\nrequests.$METHOD(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = f\"...{$DATA}...\"\n...\nrequests.$METHOD(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\nrequests.$METHOD(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR + $DATA\n...\nrequests.$METHOD(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = requests.$METHOD(..., request.$W, ...)"
            },
            {
              "pattern": "return requests.$METHOD(..., request.$W, ...)"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.django.security.injection.ssrf.ssrf-injection-urllib",
      "languages": [
        "python"
      ],
      "message": "Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF), which could result in attackers gaining access to private organization data. To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-918: Server-Side Request Forgery (SSRF)"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "owasp": [
          "A10:2021 - Server-Side Request Forgery (SSRF)"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Server_Side_Request_Forgery"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "def $FUNC(...):\n  ...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "urllib.request.urlopen(..., $S.format(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "urllib.request.urlopen(..., $S % request.$W.get(...), ...)"
            },
            {
              "pattern": "urllib.request.urlopen(..., f\"...{request.$W.get(...)}...\", ...)"
            },
            {
              "pattern": "urllib.request.urlopen(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nurllib.request.urlopen(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $DATA\n...\nurllib.request.urlopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nurllib.request.urlopen(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\nurllib.request.urlopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nurllib.request.urlopen(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % $DATA\n...\nurllib.request.urlopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nurllib.request.urlopen(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\nurllib.request.urlopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nurllib.request.urlopen(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR + $DATA\n...\nurllib.request.urlopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = urllib.request.urlopen(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "return urllib.request.urlopen(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "urllib.request.urlopen(..., $S.format(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "urllib.request.urlopen(..., $S % request.$W(...), ...)"
            },
            {
              "pattern": "urllib.request.urlopen(..., f\"...{request.$W(...)}...\", ...)"
            },
            {
              "pattern": "urllib.request.urlopen(..., request.$W(...), ...)"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nurllib.request.urlopen(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $DATA\n...\nurllib.request.urlopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nurllib.request.urlopen(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\nurllib.request.urlopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nurllib.request.urlopen(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR % $DATA\n...\nurllib.request.urlopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nurllib.request.urlopen(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\nurllib.request.urlopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nurllib.request.urlopen(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR + $DATA\n...\nurllib.request.urlopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = urllib.request.urlopen(..., request.$W(...), ...)"
            },
            {
              "pattern": "return urllib.request.urlopen(..., request.$W(...), ...)"
            },
            {
              "pattern": "urllib.request.urlopen(..., $S.format(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "urllib.request.urlopen(..., $S % request.$W[...], ...)"
            },
            {
              "pattern": "urllib.request.urlopen(..., f\"...{request.$W[...]}...\", ...)"
            },
            {
              "pattern": "urllib.request.urlopen(..., request.$W[...], ...)"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nurllib.request.urlopen(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $DATA\n...\nurllib.request.urlopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nurllib.request.urlopen(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\nurllib.request.urlopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nurllib.request.urlopen(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR % $DATA\n...\nurllib.request.urlopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nurllib.request.urlopen(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = f\"...{$DATA}...\"\n...\nurllib.request.urlopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nurllib.request.urlopen(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR + $DATA\n...\nurllib.request.urlopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = urllib.request.urlopen(..., request.$W[...], ...)"
            },
            {
              "pattern": "return urllib.request.urlopen(..., request.$W[...], ...)"
            },
            {
              "pattern": "urllib.request.urlopen(..., $S.format(..., request.$W, ...), ...)"
            },
            {
              "pattern": "urllib.request.urlopen(..., $S % request.$W, ...)"
            },
            {
              "pattern": "urllib.request.urlopen(..., f\"...{request.$W}...\", ...)"
            },
            {
              "pattern": "urllib.request.urlopen(..., request.$W, ...)"
            },
            {
              "pattern": "$DATA = request.$W\n...\nurllib.request.urlopen(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $DATA\n...\nurllib.request.urlopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\nurllib.request.urlopen(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\nurllib.request.urlopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\nurllib.request.urlopen(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR % $DATA\n...\nurllib.request.urlopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\nurllib.request.urlopen(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = f\"...{$DATA}...\"\n...\nurllib.request.urlopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\nurllib.request.urlopen(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR + $DATA\n...\nurllib.request.urlopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = urllib.request.urlopen(..., request.$W, ...)"
            },
            {
              "pattern": "return urllib.request.urlopen(..., request.$W, ...)"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.django.security.passwords.password-empty-string",
      "languages": [
        "python"
      ],
      "message": "'$VAR' is the empty string and is being used to set the password on '$MODEL'. If you meant to set an unusable password, set the password to None or call 'set_unusable_password()'.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-521: Weak Password Requirements"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://docs.djangoproject.com/en/3.0/ref/contrib/auth/#django.contrib.auth.models.User.set_password"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "$MODEL.set_password($EMPTY)\n...\n$MODEL.save()\n"
            },
            {
              "pattern": "$VAR = $EMPTY\n...\n$MODEL.set_password($VAR)\n...\n$MODEL.save()\n"
            }
          ]
        },
        {
          "metavariable-regex": {
            "metavariable": "$EMPTY",
            "regex": "(\\'\\'|\\\"\\\")"
          }
        }
      ],
      "severity": "ERROR"
    },
    {
      "fix": "None\n",
      "id": "vendored-rules.python.django.security.passwords.use-none-for-password-default",
      "languages": [
        "python"
      ],
      "message": "'$VAR' is using the empty string as its default and is being used to set the password on '$MODEL'. If you meant to set an unusable password, set the default value to 'None' or call 'set_unusable_password()'.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-521: Weak Password Requirements"
        ],
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://docs.djangoproject.com/en/3.0/ref/contrib/auth/#django.contrib.auth.models.User.set_password"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "$VAR = request.$W.get($X, $EMPTY)\n...\n$MODEL.set_password($VAR)\n...\n$MODEL.save(...)\n"
            },
            {
              "pattern": "def $F(..., $VAR=$EMPTY, ...):\n  ...\n  $MODEL.set_password($VAR)\n"
            }
          ]
        },
        {
          "metavariable-pattern": {
            "metavariable": "$EMPTY",
            "pattern": "\"\""
          }
        },
        {
          "focus-metavariable": "$EMPTY"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.docker.security.audit.docker-arbitrary-container-run",
      "languages": [
        "python"
      ],
      "message": "If unverified user data can reach the `run` or `create` method it can result in running arbitrary container.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-250: Execution with Unnecessary Privileges"
        ],
        "impact": "HIGH",
        "likelihood": "LOW",
        "references": [
          "https://cwe.mitre.org/data/definitions/250.html"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "docker"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern-inside": "$CLIENT = docker.from_env()\n...\n"
            },
            {
              "pattern-inside": "$CLIENT = docker.DockerClient(...)\n...\n"
            }
          ]
        },
        {
          "pattern-either": [
            {
              "pattern": "$CLIENT.containers.run(...)\n"
            },
            {
              "pattern": "$CLIENT.containers.create(...)\n"
            }
          ]
        },
        {
          "pattern-not": "$CLIENT.containers.run(\"...\",...)\n"
        },
        {
          "pattern-not": "$CLIENT.containers.create(\"...\",...)\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.fastapi.security.wildcard-cors",
      "languages": [
        "python"
      ],
      "message": "CORS policy allows any origin (using wildcard '*'). This is insecure and should be avoided.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-942: Permissive Cross-domain Policy with Untrusted Domains"
        ],
        "impact": "LOW",
        "likelihood": "HIGH",
        "owasp": [
          "A05:2021 - Security Misconfiguration"
        ],
        "references": [
          "https://owasp.org/Top10/A05_2021-Security_Misconfiguration",
          "https://cwe.mitre.org/data/definitions/942.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python",
          "fastapi"
        ],
        "vulnerability_class": [
          "Configuration"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern": "$APP.add_middleware(\n  CORSMiddleware,\n  allow_origins=$ORIGIN,\n  ...);\n"
            },
            {
              "focus-metavariable": "$ORIGIN"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "pattern": "[..., \"*\", ...]"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.flask.security.dangerous-template-string",
      "languages": [
        "python"
      ],
      "message": "Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html",
          "https://pequalsnp-team.github.io/cheatsheet/flask-jinja2-ssti"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "flask"
        ]
      },
      "pattern-either": [
        {
          "pattern": "$V = \"...\".format(...)\n...\nflask.render_template_string($V, ...)\n"
        },
        {
          "pattern": "$V = \"...\".format(...)\n...\nreturn flask.render_template_string($V, ...), $MORE\n"
        },
        {
          "pattern": "$V = \"...\" % $S\n...\nflask.render_template_string($V, ...)\n"
        },
        {
          "pattern": "$V = \"...\" % $S\n...\nreturn flask.render_template_string($V, ...), $MORE\n"
        },
        {
          "pattern": "$V = \"...\"\n...\n$V += $O\n...\nflask.render_template_string($V, ...)\n"
        },
        {
          "pattern": "$V = \"...\"\n...\n$V += $O\n...\nreturn flask.render_template_string($V, ...), $MORE\n"
        },
        {
          "pattern": "$V = f\"...{$X}...\"\n...\nflask.render_template_string($V, ...)\n"
        },
        {
          "pattern": "$V = f\"...{$X}...\"\n...\nreturn flask.render_template_string($V, ...), $CODE\n"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.flask.security.flask-api-method-string-format",
      "languages": [
        "python"
      ],
      "message": "Method $METHOD in API controller $CLASS provides user arg $ARG to requests method $REQMETHOD",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-134: Use of Externally-Controlled Format String"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "references": [
          "https://cwe.mitre.org/data/definitions/134.html"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "flask"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "def $METHOD(...,$ARG,...):\n  ...\n  $STRING = \"...\".format(...,$ARG,...)\n  ...\n  ... = requests.$REQMETHOD($STRING,...)\n"
            },
            {
              "pattern": "def $METHOD(...,$ARG,...):\n  ...\n  ... = requests.$REQMETHOD(\"...\".format(...,$ARG,...),...)\n"
            }
          ]
        },
        {
          "pattern-inside": "class $CLASS(...):\n  method_decorators = ...\n  ...\n"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.flask.security.hashids-with-flask-secret",
      "languages": [
        "python"
      ],
      "message": "The Flask secret key is used as salt in HashIDs. The HashID mechanism is not secure. By observing sufficient HashIDs, the salt used to construct them can be recovered. This means the Flask secret key can be obtained by attackers, through the HashIDs.",
      "metadata": {
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A02:2021 \u2013 Cryptographic Failures"
        ],
        "references": [
          "https://flask.palletsprojects.com/en/2.2.x/config/#SECRET_KEY",
          "http://carnage.github.io/2015/08/cryptanalysis-of-hashids"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "flask"
        ]
      },
      "pattern-either": [
        {
          "pattern": "hashids.Hashids(..., salt=flask.current_app.config['SECRET_KEY'], ...)"
        },
        {
          "pattern": "hashids.Hashids(flask.current_app.config['SECRET_KEY'], ...)"
        },
        {
          "patterns": [
            {
              "pattern-inside": "$APP = flask.Flask(...)\n...\n"
            },
            {
              "pattern-either": [
                {
                  "pattern": "hashids.Hashids(..., salt=$APP.config['SECRET_KEY'], ...)"
                },
                {
                  "pattern": "hashids.Hashids($APP.config['SECRET_KEY'], ...)"
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.flask.security.insecure-deserialization",
      "languages": [
        "python"
      ],
      "message": "Detected the use of an insecure deserialization library in a Flask route. These libraries are prone to code execution vulnerabilities. Ensure user data does not enter this function. To fix this, try to avoid serializing whole objects. Consider instead using a serializer such as JSON.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-502: Deserialization of Untrusted Data"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A08:2017 - Insecure Deserialization",
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/pickle.html"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "flask"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "@app.route(...)\ndef $X(...):\n  ...\n"
        },
        {
          "pattern-not": "$MODULE.$FUNC(\"...\")"
        },
        {
          "pattern-not": "$MODULE.$FUNC(open(\"...\", ...))"
        },
        {
          "pattern-either": [
            {
              "pattern": "pickle.$FUNC(...)"
            },
            {
              "pattern": "_pickle.$FUNC(...)"
            },
            {
              "pattern": "cPickle.$FUNC(...)"
            },
            {
              "pattern": "dill.$FUNC(...)"
            },
            {
              "pattern": "shelve.$FUNC(...)"
            },
            {
              "pattern": "yaml.load(...)"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.flask.security.unescaped-template-extension",
      "languages": [
        "python"
      ],
      "message": "Flask does not automatically escape Jinja templates unless they have .html, .htm, .xml, or .xhtml extensions. This could lead to XSS attacks. Use .html, .htm, .xml, or .xhtml for your template extensions. See https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup for more information.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup",
          "https://semgrep.dev/blog/2020/bento-check-unescaped-template-extensions-in-flask/",
          "https://bento.dev/checks/flask/unescaped-file-extension/"
        ],
        "source-rule-url": "https://pypi.org/project/flake8-flask/",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "flask"
        ]
      },
      "patterns": [
        {
          "pattern-not": "flask.render_template(\"=~/.+\\.html$/\", ...)"
        },
        {
          "pattern-not": "flask.render_template(\"=~/.+\\.xml$/\", ...)"
        },
        {
          "pattern-not": "flask.render_template(\"=~/.+\\.htm$/\", ...)"
        },
        {
          "pattern-not": "flask.render_template(\"=~/.+\\.xhtml$/\", ...)"
        },
        {
          "pattern-not": "flask.render_template($X + \"=~/\\.html$/\", ...)"
        },
        {
          "pattern-not": "flask.render_template($X + \"=~/\\.xml$/\", ...)"
        },
        {
          "pattern-not": "flask.render_template($X + \"=~/\\.htm$/\", ...)"
        },
        {
          "pattern-not": "flask.render_template($X + \"=~/\\.xhtml$/\", ...)"
        },
        {
          "pattern-not": "flask.render_template(\"=~/.+\\.html$/\" % $X, ...)"
        },
        {
          "pattern-not": "flask.render_template(\"=~/.+\\.xml$/\" % $X, ...)"
        },
        {
          "pattern-not": "flask.render_template(\"=~/.+\\.htm$/\" % $X, ...)"
        },
        {
          "pattern-not": "flask.render_template(\"=~/.+\\.xhtml$/\" % $X, ...)"
        },
        {
          "pattern-not": "flask.render_template(\"=~/.+\\.html$/\".format(...), ...)"
        },
        {
          "pattern-not": "flask.render_template(\"=~/.+\\.xml$/\".format(...), ...)"
        },
        {
          "pattern-not": "flask.render_template(\"=~/.+\\.htm$/\".format(...), ...)"
        },
        {
          "pattern-not": "flask.render_template(\"=~/.+\\.xhtml$/\".format(...), ...)"
        },
        {
          "pattern-not": "flask.render_template($TEMPLATE)"
        },
        {
          "pattern-either": [
            {
              "pattern": "flask.render_template(\"...\", ...)"
            },
            {
              "pattern": "flask.render_template($X + \"...\", ...)"
            },
            {
              "pattern": "flask.render_template(\"...\" % $Y, ...)"
            },
            {
              "pattern": "flask.render_template(\"...\".format(...), ...)"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.flask.security.avoid_send_file_without_path_sanitization",
      "languages": [
        "python"
      ],
      "message": "Detected a user-controlled `filename` that could flow to `flask.send_file()` function. This could lead to an attacker reading arbitrary file from the system, leaking private information. Make sure to properly sanitize filename or use `flask.send_from_directory`",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-73: External Control of File Name or Path"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A04:2021 - Insecure Design"
        ],
        "references": [
          "https://owasp.org/Top10/A04_2021-Insecure_Design"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "flask"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "@app.route(...)\ndef $X(filename):\n  ...\n"
        },
        {
          "pattern": "flask.send_file(filename, ...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.flask.security.response-contains-unsanitized-input",
      "languages": [
        "python"
      ],
      "message": "Flask response reflects unsanitized user input. This could lead to a cross-site scripting vulnerability (https://owasp.org/www-community/attacks/xss/) in which an attacker causes arbitrary code to be executed in the user's browser. To prevent, please sanitize the user input, e.g. by rendering the response in a Jinja2 template (see considerations in https://flask.palletsprojects.com/en/1.0.x/security/).",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://flask.palletsprojects.com/en/1.0.x/security/",
          "https://owasp.org/www-community/attacks/xss/"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "flask"
        ]
      },
      "pattern-either": [
        {
          "pattern": "$X = flask.request.args.get(...)\n...\nflask.make_response(\"...\".format($X))\n"
        },
        {
          "pattern": "$X = flask.request.args.get(...)\n...\nflask.make_response(f\"...{$X}...\")\n"
        },
        {
          "pattern": "$X = flask.request.args.get(...)\n...\nflask.make_response(f\"...{$X}\")\n"
        },
        {
          "pattern": "$X = flask.request.args.get(...)\n...\nflask.make_response(f\"{$X}...\")\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.flask.security.open-redirect",
      "languages": [
        "python"
      ],
      "message": "Use of redirect() with unvalidated user input is not allowed as it may lead to open redirect attacks. Validate URLs using urlparse() to check if the 'netloc' property is the same as your site's host name",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://flask-login.readthedocs.io/en/latest/#login-example",
          "https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html#dangerous-url-redirect-example-1",
          "https://docs.python.org/3/library/urllib.parse.html#url-parsing"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "flask"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "@$APP.route(...)\ndef $X(...):\n  ...\n"
        },
        {
          "pattern-not-inside": "@$APP.route(...)\ndef $X(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n"
        },
        {
          "pattern-not-inside": "@$APP.route(...)\ndef $X(...):\n  ...\n  $PARSED = werkzeug.urls.url_parse(...)\n  ...\n  if <... $PARSED.netloc ...>:\n    ...\n"
        },
        {
          "pattern-not-inside": "@$APP.route(...)\ndef $X(...):\n  ...\n  if <... urllib.parse.urlparse($V) ...>:\n    ...\n"
        },
        {
          "pattern-not-inside": "@$APP.route(...)\ndef $X(...):\n  ...\n  $PARSED = urllib.parse.urlparse(...)\n  ...\n  if <... $PARSED.netloc ...>:\n    ...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "flask.redirect(<... flask.request.$W.get(...) ...>, ...)"
            },
            {
              "pattern": "flask.redirect(<... flask.request.$W[...] ...>, ...)"
            },
            {
              "pattern": "flask.redirect(<... flask.request.$W(...) ...>, ...)"
            },
            {
              "pattern": "flask.redirect(<... flask.request.$W ...>, ...)"
            },
            {
              "pattern": "$V = flask.request.$W.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n"
            },
            {
              "pattern": "$V = flask.request.$W[...]\n...\nflask.redirect(<... $V ...>, ...)\n"
            },
            {
              "pattern": "$V = flask.request.$W(...)\n...\nflask.redirect(<... $V ...>, ...)\n"
            },
            {
              "pattern": "$V = flask.request.$W\n...\nflask.redirect(<... $V ...>, ...)\n"
            }
          ]
        },
        {
          "pattern-not": "flask.redirect(flask.request.path)"
        },
        {
          "pattern-not": "flask.redirect(flask.request.path + ...)"
        },
        {
          "pattern-not": "flask.redirect(f\"{flask.request.path}...\")"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.flask.security.audit.debug-enabled",
      "languages": [
        "python"
      ],
      "message": "Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.",
      "metadata": {
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-489: Active Debug Code"
        ],
        "impact": "MEDIUM",
        "likelihood": "HIGH",
        "owasp": "A06:2017 - Security Misconfiguration",
        "references": [
          "https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "flask"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "import flask\n...\n"
        },
        {
          "pattern": "$APP.run(..., debug=True, ...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.flask.security.audit.directly-returned-format-string",
      "languages": [
        "python"
      ],
      "message": "Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "HIGH",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "flask"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-not-inside": "return \"...\""
            },
            {
              "pattern-either": [
                {
                  "pattern": "return \"...\".format(...)"
                },
                {
                  "pattern": "return \"...\" % ..."
                },
                {
                  "pattern": "return \"...\" + ..."
                },
                {
                  "pattern": "return ... + \"...\""
                },
                {
                  "pattern": "return f\"...{...}...\""
                },
                {
                  "patterns": [
                    {
                      "pattern": "return $X"
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "$X = \"...\".format(...)\n...\n"
                        },
                        {
                          "pattern-inside": "$X = \"...\" % ...\n...\n"
                        },
                        {
                          "pattern-inside": "$X = \"...\" + ...\n...\n"
                        },
                        {
                          "pattern-inside": "$X = ... + \"...\"\n...\n"
                        },
                        {
                          "pattern-inside": "$X = f\"...{...}...\"\n...\n"
                        }
                      ]
                    },
                    {
                      "pattern-not-inside": "$X = \"...\"\n...\n"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern-inside": "@$APP.route(...)\ndef $FUNC(..., $PARAM, ...):\n  ...\n"
                },
                {
                  "pattern": "$PARAM"
                }
              ]
            },
            {
              "pattern": "request.$FUNC.get(...)\n"
            },
            {
              "pattern": "request.$FUNC(...)\n"
            },
            {
              "pattern": "request.$FUNC[...]"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.flask.security.audit.flask-cors-misconfiguration",
      "languages": [
        "python"
      ],
      "message": "Setting 'support_credentials=True' together with 'origin=\"*\"' is a CORS misconfiguration that can allow third party origins to read sensitive data. Using this configuration, flask_cors will dynamically reflects the Origin of each request in the Access-Control-Allow-Origin header, allowing all origins and allowing cookies and credentials to be sent along with request. It is recommended to specify allowed origins instead of using \"*\" when setting 'support_credentials=True'.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-942: Permissive Cross-domain Policy with Untrusted Domains"
        ],
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://pypi.org/project/Flask-Cors/",
          "https://flask-cors.readthedocs.io/en/latest/index.html"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "flask"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "@cross_origin(..., origins=\"*\", supports_credentials=True, ...)\n"
            },
            {
              "pattern": "CORS(..., supports_credentials=True, origins=\"*\", ...)\n"
            },
            {
              "pattern": "CORS(..., resources={\"...\": {...,\"origins\": \"*\",\n\"supports_credentials\": True,...}})\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.flask.security.audit.render-template-string",
      "languages": [
        "python"
      ],
      "message": "Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "flask"
        ]
      },
      "pattern": "flask.render_template_string(...)",
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.flask.security.audit.secure-set-cookie",
      "languages": [
        "python"
      ],
      "message": "Found a Flask cookie with insecurely configured properties.  By default the secure, httponly and samesite ar configured insecurely. cookies should be handled securely by setting `secure=True`, `httponly=True`, and `samesite='Lax'` in response.set_cookie(...). If these parameters are not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker. Include the `secure=True`, `httponly=True`, `samesite='Lax'` arguments or set these to be true in the Flask configuration.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"
        ],
        "functional-categories": [
          "web::search::cookie-config::flask"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A05:2021 - Security Misconfiguration"
        ],
        "references": [
          "https://flask.palletsprojects.com/en/3.0.x/api/#flask.Response.set_cookie",
          "https://flask.palletsprojects.com/en/3.0.x/security/#set-cookie-options"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python",
          "flask"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern-inside": "$RESP = flask.make_response(...)\n...\n"
            },
            {
              "pattern-inside": "$RESP = flask.Response(...)\n...\n"
            }
          ]
        },
        {
          "pattern-not": "$RESP.set_cookie(..., secure=$A, httponly=$B, samesite=$C, ...)"
        },
        {
          "pattern-not": "$RESP.set_cookie(..., **$A)"
        },
        {
          "pattern": "$RESP.set_cookie(...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.flask.security.audit.avoid_app_run_with_bad_host",
      "languages": [
        "python"
      ],
      "message": "Running flask app with host 0.0.0.0 could expose the server publicly.",
      "metadata": {
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-668: Exposure of Resource to Wrong Sphere"
        ],
        "impact": "MEDIUM",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "flask"
        ]
      },
      "pattern-either": [
        {
          "pattern": "app.run(..., host=\"0.0.0.0\", ...)"
        },
        {
          "pattern": "app.run(..., \"0.0.0.0\", ...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.flask.security.audit.avoid_using_app_run_directly",
      "languages": [
        "python"
      ],
      "message": "top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-668: Exposure of Resource to Wrong Sphere"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "flask"
        ]
      },
      "patterns": [
        {
          "pattern-not-inside": "if __name__ == '__main__':\n  ...\n"
        },
        {
          "pattern-not-inside": "def $X(...):\n  ...\n"
        },
        {
          "pattern": "app.run(...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.flask.security.audit.avoid_hardcoded_config_TESTING",
      "languages": [
        "python"
      ],
      "message": "Hardcoded variable `TESTING` detected. Use environment variables or config files instead",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-489: Active Debug Code"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A05:2021 - Security Misconfiguration"
        ],
        "references": [
          "https://bento.dev/checks/flask/avoid-hardcoded-config/",
          "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values",
          "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "flask"
        ]
      },
      "pattern-either": [
        {
          "pattern": "$M.config['TESTING'] = True"
        },
        {
          "pattern": "$M.config['TESTING'] = False"
        },
        {
          "pattern": "$M.update(TESTING=True, ...)"
        },
        {
          "pattern": "$M.update(TESTING=False, ...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.flask.security.audit.avoid_hardcoded_config_SECRET_KEY",
      "languages": [
        "python"
      ],
      "message": "Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-489: Active Debug Code"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A05:2021 - Security Misconfiguration"
        ],
        "references": [
          "https://bento.dev/checks/flask/avoid-hardcoded-config/",
          "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values",
          "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "flask"
        ]
      },
      "pattern-either": [
        {
          "pattern": "$M.update(SECRET_KEY=\"=~/.*/\")"
        },
        {
          "pattern": "$M.config['SECRET_KEY'] = \"=~/.*/\""
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.flask.security.audit.avoid_hardcoded_config_ENV",
      "languages": [
        "python"
      ],
      "message": "Hardcoded variable `ENV` detected. Set this by using FLASK_ENV environment variable",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-489: Active Debug Code"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A05:2021 - Security Misconfiguration"
        ],
        "references": [
          "https://bento.dev/checks/flask/avoid-hardcoded-config/",
          "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values",
          "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "flask"
        ]
      },
      "pattern-either": [
        {
          "pattern": "$M.update(ENV=\"=~/^development|production$/\")"
        },
        {
          "pattern": "$M.config['ENV'] = \"=~/^development|production$/\""
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.flask.security.audit.avoid_hardcoded_config_DEBUG",
      "languages": [
        "python"
      ],
      "message": "Hardcoded variable `DEBUG` detected. Set this by using FLASK_DEBUG environment variable",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-489: Active Debug Code"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A05:2021 - Security Misconfiguration"
        ],
        "references": [
          "https://bento.dev/checks/flask/avoid-hardcoded-config/",
          "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values",
          "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "flask"
        ]
      },
      "pattern-either": [
        {
          "pattern": "$M.update(DEBUG=True)"
        },
        {
          "pattern": "$M.update(DEBUG=False)"
        },
        {
          "pattern": "$M.config['DEBUG'] = True"
        },
        {
          "pattern": "$M.config['DEBUG'] = False"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.flask.security.audit.host-header-injection-python",
      "languages": [
        "python"
      ],
      "message": "The `flask.request.host` is used to construct an HTTP request.  This can lead to host header injection issues. Vulnerabilities  that generally occur due to this issue are authentication bypasses,  password reset issues, Server-Side-Request-Forgery (SSRF), and many more.  It is recommended to validate the URL before passing it to a  request library, or using application logic such as authentication  or password resets.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-20: Improper Input Validation"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/17-Testing_for_Host_Header_Injection",
          "https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "flask"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "$X = <... \"=~/.*http[s]*:///\" + flask.request.host ...>;\n"
            },
            {
              "pattern": "$X = <... \"=~/.*http[s]*:///\" + flask.request[\"host\"] ...>;\n"
            },
            {
              "pattern": "$Z = flask.request.host;\n...\n$X = <... \"=~/.*http[s]*:///\" + $Z ...>;\n"
            },
            {
              "pattern": "$Z = flask.request[\"host\"];\n...\n$X = <... \"=~/.*http[s]*:///\" + $Z ...>;\n"
            }
          ]
        },
        {
          "pattern-inside": "@$APP.route($ROUTE, ...)\ndef $FUNC():\n  ...\n"
        }
      ],
      "severity": "INFO"
    },
    {
      "fix": "True",
      "id": "vendored-rules.python.flask.security.audit.flask-wtf-csrf-disabled",
      "languages": [
        "python"
      ],
      "message": "Setting 'WTF_CSRF_ENABLED' to 'False' explicitly disables CSRF protection.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-352: Cross-Site Request Forgery (CSRF)"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "functional-categories": [
          "web::search::csrf-config::flask",
          "web::search::csrf-config::flask-wtf"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://flask-wtf.readthedocs.io/en/1.2.x/csrf/"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "flask"
        ]
      },
      "options": {
        "symbolic_propagation": true
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern-either": [
                    {
                      "pattern": "$APP.config[\"WTF_CSRF_ENABLED\"] = $FALSE"
                    },
                    {
                      "pattern": "$APP.config.WTF_CSRF_ENABLED = $FALSE"
                    },
                    {
                      "patterns": [
                        {
                          "pattern": "$APP.config.$UPDATE(\n  ...,\n  WTF_CSRF_ENABLED = $FALSE,\n  ...\n)\n"
                        },
                        {
                          "pattern-not-inside": "$APP.config.$UPDATE(\n    ...,\n    TESTING=True,\n    ...\n)\n"
                        },
                        {
                          "pattern-not-inside": "$APP.config.$UPDATE(\n    ...,\n    DEBUG=True,\n    ...\n)\n"
                        },
                        {
                          "metavariable-regex": {
                            "metavariable": "$UPDATE",
                            "regex": "^(update|from_mapping)$"
                          }
                        }
                      ]
                    },
                    {
                      "pattern": "$OBJ = $CLASS()\n...\n$OBJ.WTF_CSRF_ENABLED = $FALSE\n...\n$APP.config.from_object($OBJ, ...)\n"
                    },
                    {
                      "pattern": "WTF_CSRF_ENABLED = $FALSE\n...\n$APP.config.from_object(__name__)\n"
                    }
                  ]
                },
                {
                  "metavariable-regex": {
                    "metavariable": "$FALSE",
                    "regex": "^(False)$"
                  }
                },
                {
                  "focus-metavariable": "$FALSE"
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.flask.security.audit.xss.make-response-with-unknown-content",
      "languages": [
        "python"
      ],
      "message": "Be careful with `flask.make_response()`. If this response is rendered onto a webpage, this could create a cross-site scripting (XSS) vulnerability. `flask.make_response()` will not autoescape HTML. If you are rendering HTML, write your HTML in a template file and use `flask.render_template()` which will take care of escaping. If you are returning data from an API, consider using `flask.jsonify()`.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://github.com/python-security/pyt//blob/093a077bcf12d1f58ddeb2d73ddc096623985fb0/examples/vulnerable_code/XSS_assign_to_other_var.py#L11",
          "https://flask.palletsprojects.com/en/1.1.x/api/#flask.Flask.make_response",
          "https://flask.palletsprojects.com/en/1.1.x/api/#response-objects"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "flask"
        ]
      },
      "patterns": [
        {
          "pattern": "flask.make_response(...)"
        },
        {
          "pattern-not-inside": "flask.make_response()"
        },
        {
          "pattern-not-inside": "flask.make_response(\"...\", ...)"
        },
        {
          "pattern-not-inside": "flask.make_response({\"...\": \"...\"}, ...)"
        },
        {
          "pattern-not-inside": "flask.make_response(flask.redirect(...), ...)"
        },
        {
          "pattern-not-inside": "flask.make_response(flask.render_template(...), ...)"
        },
        {
          "pattern-not-inside": "flask.make_response(flask.jsonify(...), ...)"
        },
        {
          "pattern-not-inside": "flask.make_response(json.dumps(...), ...)"
        },
        {
          "pattern-not-inside": "$X = flask.render_template(...)\n...\nflask.make_response($X, ...)\n"
        },
        {
          "pattern-not-inside": "$X = flask.jsonify(...)\n...\nflask.make_response($X, ...)\n"
        },
        {
          "pattern-not-inside": "$X = json.dumps(...)\n...\nflask.make_response($X, ...)\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.flask.security.injection.csv-writer-injection",
      "languages": [
        "python"
      ],
      "message": "Detected user input into a generated CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-1236: Improper Neutralization of Formula Elements in a CSV File"
        ],
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://github.com/raphaelm/defusedcsv",
          "https://owasp.org/www-community/attacks/CSV_Injection",
          "https://web.archive.org/web/20220516052229/https://www.contextis.com/us/blog/comma-separated-vulnerabilities"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python",
          "flask"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-inside": "$WRITER = csv.writer(...)\n\n...\n\n$WRITER.$WRITE(...)\n"
            },
            {
              "pattern": "$WRITER.$WRITE(...)"
            },
            {
              "metavariable-regex": {
                "metavariable": "$WRITE",
                "regex": "^(writerow|writerows|writeheader)$"
              }
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "flask.request.form.get(...)"
                        },
                        {
                          "pattern": "flask.request.form[...]"
                        },
                        {
                          "pattern": "flask.request.args.get(...)"
                        },
                        {
                          "pattern": "flask.request.args[...]"
                        },
                        {
                          "pattern": "flask.request.values.get(...)"
                        },
                        {
                          "pattern": "flask.request.values[...]"
                        },
                        {
                          "pattern": "flask.request.cookies.get(...)"
                        },
                        {
                          "pattern": "flask.request.cookies[...]"
                        },
                        {
                          "pattern": "flask.request.stream"
                        },
                        {
                          "pattern": "flask.request.headers.get(...)"
                        },
                        {
                          "pattern": "flask.request.headers[...]"
                        },
                        {
                          "pattern": "flask.request.data"
                        },
                        {
                          "pattern": "flask.request.full_path"
                        },
                        {
                          "pattern": "flask.request.url"
                        },
                        {
                          "pattern": "flask.request.json"
                        },
                        {
                          "pattern": "flask.request.get_json()"
                        },
                        {
                          "pattern": "flask.request.view_args.get(...)"
                        },
                        {
                          "pattern": "flask.request.view_args[...]"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "@$APP.route($ROUTE, ...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n"
                    },
                    {
                      "focus-metavariable": "$ROUTEVAR"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.flask.security.injection.nan-injection",
      "languages": [
        "python"
      ],
      "message": "Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-704: Incorrect Type Conversion or Cast"
        ],
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "references": [
          "https://discuss.python.org/t/nan-breaks-min-max-and-sorting-functions-a-solution/2868",
          "https://blog.bitdiscovery.com/2021/12/python-nan-injection/"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "flask"
        ]
      },
      "mode": "taint",
      "pattern-sanitizers": [
        {
          "not_conflicting": true,
          "pattern": "$ANYTHING(...)"
        }
      ],
      "pattern-sinks": [
        {
          "pattern-either": [
            {
              "pattern": "float(...)"
            },
            {
              "pattern": "bool(...)"
            },
            {
              "pattern": "complex(...)"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "pattern-either": [
            {
              "pattern": "flask.request.$SOMETHING.get(...)"
            },
            {
              "pattern": "flask.request.$SOMETHING[...]"
            },
            {
              "patterns": [
                {
                  "pattern-inside": "@$APP.route(...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n"
                },
                {
                  "pattern": "$ROUTEVAR"
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.flask.security.injection.os-system-injection",
      "languages": [
        "python"
      ],
      "message": "User data detected in os.system. This could be vulnerable to a command injection and should be avoided. If this must be done, use the 'subprocess' module instead and pass the arguments as a list.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "flask"
        ]
      },
      "pattern-either": [
        {
          "patterns": [
            {
              "pattern": "os.system(...)"
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "@$APP.route($ROUTE, ...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n  os.system(..., <... $ROUTEVAR ...>, ...)\n"
                },
                {
                  "pattern-inside": "@$APP.route($ROUTE, ...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n  $INTERM = <... $ROUTEVAR ...>\n  ...\n  os.system(..., <... $INTERM ...>, ...)\n"
                }
              ]
            }
          ]
        },
        {
          "pattern": "os.system(..., <... flask.request.$W.get(...) ...>, ...)"
        },
        {
          "pattern": "os.system(..., <... flask.request.$W[...] ...>, ...)"
        },
        {
          "pattern": "os.system(..., <... flask.request.$W(...) ...>, ...)"
        },
        {
          "pattern": "os.system(..., <... flask.request.$W ...>, ...)"
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W.get(...) ...>\n...\nos.system(<... $INTERM ...>)\n"
            },
            {
              "pattern": "os.system(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W[...] ...>\n...\nos.system(<... $INTERM ...>)\n"
            },
            {
              "pattern": "os.system(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W(...) ...>\n...\nos.system(<... $INTERM ...>)\n"
            },
            {
              "pattern": "os.system(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W ...>\n...\nos.system(<... $INTERM ...>)\n"
            },
            {
              "pattern": "os.system(...)"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.flask.security.injection.path-traversal-open",
      "languages": [
        "python"
      ],
      "message": "Found request data in a call to 'open'. Ensure the request data is validated or sanitized, otherwise it could result in path traversal attacks.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "flask"
        ]
      },
      "pattern-either": [
        {
          "patterns": [
            {
              "pattern": "open(...)"
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "@$APP.route($ROUTE, ...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n  open(..., <... $ROUTEVAR ...>, ...)\n"
                },
                {
                  "pattern-inside": "@$APP.route($ROUTE, ...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n  with open(..., <... $ROUTEVAR ...>, ...) as $FD:\n    ...\n"
                },
                {
                  "pattern-inside": "@$APP.route($ROUTE, ...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n  $INTERM = <... $ROUTEVAR ...>\n  ...\n  open(..., <... $INTERM ...>, ...)\n"
                }
              ]
            }
          ]
        },
        {
          "pattern": "open(..., <... flask.request.$W.get(...) ...>, ...)"
        },
        {
          "pattern": "open(..., <... flask.request.$W[...] ...>, ...)"
        },
        {
          "pattern": "open(..., <... flask.request.$W(...) ...>, ...)"
        },
        {
          "pattern": "open(..., <... flask.request.$W ...>, ...)"
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W.get(...) ...>\n...\nopen(<... $INTERM ...>, ...)\n"
            },
            {
              "pattern": "open(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W[...] ...>\n...\nopen(<... $INTERM ...>, ...)\n"
            },
            {
              "pattern": "open(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W(...) ...>\n...\nopen(<... $INTERM ...>, ...)\n"
            },
            {
              "pattern": "open(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W ...>\n...\nopen(<... $INTERM ...>, ...)\n"
            },
            {
              "pattern": "open(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W.get(...) ...>\n...\nwith open(<... $INTERM ...>, ...) as $F:\n  ...\n"
            },
            {
              "pattern": "open(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W[...] ...>\n...\nwith open(<... $INTERM ...>, ...) as $F:\n  ...\n"
            },
            {
              "pattern": "open(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W(...) ...>\n...\nwith open(<... $INTERM ...>, ...) as $F:\n  ...\n"
            },
            {
              "pattern": "open(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W ...>\n...\nwith open(<... $INTERM ...>, ...) as $F:\n  ...\n"
            },
            {
              "pattern": "open(...)"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.flask.security.injection.raw-html-format",
      "languages": [
        "python"
      ],
      "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "flask"
        ]
      },
      "mode": "taint",
      "pattern-sanitizers": [
        {
          "pattern": "jinja2.escape(...)"
        },
        {
          "pattern": "flask.escape(...)"
        },
        {
          "patterns": [
            {
              "pattern": "flask.render_template($TPL, ...)"
            },
            {
              "metavariable-regex": {
                "metavariable": "$TPL",
                "regex": ".*\\.html"
              }
            }
          ]
        }
      ],
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "\"$HTMLSTR\" % ..."
                        },
                        {
                          "pattern": "\"$HTMLSTR\".format(...)"
                        },
                        {
                          "pattern": "\"$HTMLSTR\" + ..."
                        },
                        {
                          "pattern": "f\"$HTMLSTR{...}...\""
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "$HTML = \"$HTMLSTR\"\n...\n"
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "$HTML % ..."
                        },
                        {
                          "pattern": "$HTML.format(...)"
                        },
                        {
                          "pattern": "$HTML + ..."
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "metavariable-pattern": {
                "language": "generic",
                "metavariable": "$HTMLSTR",
                "pattern": "<$TAG ..."
              }
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "flask.request.$ANYTHING"
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "@$APP.route(...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n"
                    },
                    {
                      "pattern": "$ROUTEVAR"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.flask.security.injection.ssrf-requests",
      "languages": [
        "python"
      ],
      "message": "Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-918: Server-Side Request Forgery (SSRF)"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "owasp": [
          "A10:2021 - Server-Side Request Forgery (SSRF)"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Server_Side_Request_Forgery"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "flask"
        ]
      },
      "pattern-either": [
        {
          "patterns": [
            {
              "pattern": "requests.$FUNC(...)"
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "@$APP.$ROUTE_METHOD($ROUTE, ...)\ndef $ROUTE_FUNC(..., $ROUTEVAR, ...):\n  ...\n  requests.$FUNC(..., <... $ROUTEVAR ...>, ...)\n"
                },
                {
                  "pattern-inside": "@$APP.$ROUTE_METHOD($ROUTE, ...)\ndef $ROUTE_FUNC(..., $ROUTEVAR, ...):\n  ...\n  $INTERM = <... $ROUTEVAR ...>\n  ...\n  requests.$FUNC(..., <... $INTERM ...>, ...)\n"
                }
              ]
            },
            {
              "metavariable-regex": {
                "metavariable": "$ROUTE_METHOD",
                "regex": "^(route|get|post|put|delete|patch)$"
              }
            }
          ]
        },
        {
          "pattern": "requests.$FUNC(..., <... flask.request.$W.get(...) ...>, ...)"
        },
        {
          "pattern": "requests.$FUNC(..., <... flask.request.$W[...] ...>, ...)"
        },
        {
          "pattern": "requests.$FUNC(..., <... flask.request.$W(...) ...>, ...)"
        },
        {
          "pattern": "requests.$FUNC(..., <... flask.request.$W ...>, ...)"
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W.get(...) ...>\n...\nrequests.$FUNC(<... $INTERM ...>, ...)\n"
            },
            {
              "pattern": "requests.$FUNC(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W[...] ...>\n...\nrequests.$FUNC(<... $INTERM ...>, ...)\n"
            },
            {
              "pattern": "requests.$FUNC(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W(...) ...>\n...\nrequests.$FUNC(<... $INTERM ...>, ...)\n"
            },
            {
              "pattern": "requests.$FUNC(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W ...>\n...\nrequests.$FUNC(<... $INTERM ...>, ...)\n"
            },
            {
              "pattern": "requests.$FUNC(...)"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.flask.security.injection.subprocess-injection",
      "languages": [
        "python"
      ],
      "message": "Detected user input entering a `subprocess` call unsafely. This could result in a command injection vulnerability. An attacker could use this vulnerability to execute arbitrary commands on the host, which allows them to download malware, scan sensitive data, or run any command they wish on the server. Do not let users choose the command to run. In general, prefer to use Python API versions of system commands. If you must use subprocess, use a dictionary to allowlist a set of commands.",
      "metadata": {
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "flask"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sanitizers": [
        {
          "patterns": [
            {
              "pattern": "$DICT[$KEY]"
            },
            {
              "focus-metavariable": "$KEY"
            }
          ]
        }
      ],
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern": "subprocess.$FUNC(...)"
                    },
                    {
                      "pattern-not": "subprocess.$FUNC(\"...\", ...)"
                    },
                    {
                      "pattern-not": "subprocess.$FUNC([\"...\", ...], ...)"
                    },
                    {
                      "pattern-not-inside": "$CMD = [\"...\", ...]\n...\nsubprocess.$FUNC($CMD, ...)\n"
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern": "subprocess.$FUNC([\"$SHELL\", \"-c\", ...], ...)"
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$SHELL",
                        "regex": "^(sh|bash|ksh|csh|tcsh|zsh)$"
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern": "subprocess.$FUNC([\"$INTERPRETER\", ...], ...)"
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$INTERPRETER",
                        "regex": "^(python|python\\d)$"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern-either": [
                    {
                      "pattern": "flask.request.form.get(...)"
                    },
                    {
                      "pattern": "flask.request.form[...]"
                    },
                    {
                      "pattern": "flask.request.args.get(...)"
                    },
                    {
                      "pattern": "flask.request.args[...]"
                    },
                    {
                      "pattern": "flask.request.values.get(...)"
                    },
                    {
                      "pattern": "flask.request.values[...]"
                    },
                    {
                      "pattern": "flask.request.cookies.get(...)"
                    },
                    {
                      "pattern": "flask.request.cookies[...]"
                    },
                    {
                      "pattern": "flask.request.stream"
                    },
                    {
                      "pattern": "flask.request.headers.get(...)"
                    },
                    {
                      "pattern": "flask.request.headers[...]"
                    },
                    {
                      "pattern": "flask.request.data"
                    },
                    {
                      "pattern": "flask.request.full_path"
                    },
                    {
                      "pattern": "flask.request.url"
                    },
                    {
                      "pattern": "flask.request.json"
                    },
                    {
                      "pattern": "flask.request.get_json()"
                    },
                    {
                      "pattern": "flask.request.view_args.get(...)"
                    },
                    {
                      "pattern": "flask.request.view_args[...]"
                    }
                  ]
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern-inside": "@$APP.route($ROUTE, ...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n"
                },
                {
                  "focus-metavariable": "$ROUTEVAR"
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.flask.security.injection.tainted-sql-string",
      "languages": [
        "python"
      ],
      "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-704: Incorrect Type Conversion or Cast"
        ],
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql",
          "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm",
          "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "sqlalchemy",
          "flask"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "\"$SQLSTR\" + ...\n"
                },
                {
                  "pattern": "\"$SQLSTR\" % ...\n"
                },
                {
                  "pattern": "\"$SQLSTR\".format(...)\n"
                },
                {
                  "pattern": "f\"$SQLSTR{...}...\"\n"
                }
              ]
            },
            {
              "metavariable-regex": {
                "metavariable": "$SQLSTR",
                "regex": "\\s*(?i)(select|delete|insert|create|update|alter|drop)\\b.*"
              }
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "flask.request.$ANYTHING"
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "@$APP.route(...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n"
                    },
                    {
                      "pattern": "$ROUTEVAR"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.flask.security.injection.tainted-url-host",
      "languages": [
        "python"
      ],
      "message": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-918: Server-Side Request Forgery (SSRF)"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A10:2021 - Server-Side Request Forgery (SSRF)"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "flask"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern": "\"$URLSTR\" % ..."
                    },
                    {
                      "metavariable-pattern": {
                        "language": "generic",
                        "metavariable": "$URLSTR",
                        "patterns": [
                          {
                            "pattern-either": [
                              {
                                "pattern": "$SCHEME://%s"
                              },
                              {
                                "pattern": "$SCHEME://%r"
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern": "\"$URLSTR\".format(...)"
                    },
                    {
                      "metavariable-pattern": {
                        "language": "generic",
                        "metavariable": "$URLSTR",
                        "pattern": "$SCHEME:// { ... }"
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern": "\"$URLSTR\" + ..."
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$URLSTR",
                        "regex": ".*://$"
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern": "f\"$URLSTR{...}...\""
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$URLSTR",
                        "regex": ".*://$"
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "$URL = \"$URLSTR\"\n...\n"
                    },
                    {
                      "pattern": "$URL += ..."
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$URLSTR",
                        "regex": ".*://$"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "flask.request.$ANYTHING"
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "@$APP.route(...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n"
                    },
                    {
                      "pattern": "$ROUTEVAR"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.flask.security.injection.eval-injection",
      "languages": [
        "python"
      ],
      "message": "Detected user data flowing into eval. This is code injection and should be avoided.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
        ],
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "flask"
        ]
      },
      "pattern-either": [
        {
          "patterns": [
            {
              "pattern": "eval(...)"
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "@$APP.route($ROUTE, ...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n  eval(..., <... $ROUTEVAR ...>, ...)\n"
                },
                {
                  "pattern-inside": "@$APP.route($ROUTE, ...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n  $INTERM = <... $ROUTEVAR ...>\n  ...\n  eval(..., <... $INTERM ...>, ...)\n"
                }
              ]
            }
          ]
        },
        {
          "pattern": "eval(..., <... flask.request.$W.get(...) ...>, ...)"
        },
        {
          "pattern": "eval(..., <... flask.request.$W[...] ...>, ...)"
        },
        {
          "pattern": "eval(..., <... flask.request.$W(...) ...>, ...)"
        },
        {
          "pattern": "eval(..., <... flask.request.$W ...>, ...)"
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W.get(...) ...>\n...\neval(..., <... $INTERM ...>, ...)\n"
            },
            {
              "pattern": "eval(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W[...] ...>\n...\neval(..., <... $INTERM ...>, ...)\n"
            },
            {
              "pattern": "eval(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W(...) ...>\n...\neval(..., <... $INTERM ...>, ...)\n"
            },
            {
              "pattern": "eval(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W ...>\n...\neval(..., <... $INTERM ...>, ...)\n"
            },
            {
              "pattern": "eval(...)"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.flask.security.injection.exec-injection",
      "languages": [
        "python"
      ],
      "message": "Detected user data flowing into exec. This is code injection and should be avoided.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
        ],
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://nedbatchelder.com/blog/201206/exec_really_is_dangerous.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "flask"
        ]
      },
      "pattern-either": [
        {
          "patterns": [
            {
              "pattern": "exec(...)"
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "@$APP.route($ROUTE, ...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n  exec(..., <... $ROUTEVAR ...>, ...)\n"
                },
                {
                  "pattern-inside": "@$APP.route($ROUTE, ...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n  $INTERM = <... $ROUTEVAR ...>\n  ...\n  exec(..., <... $INTERM ...>, ...)\n"
                }
              ]
            }
          ]
        },
        {
          "pattern": "exec(..., <... flask.request.$W.get(...) ...>, ...)"
        },
        {
          "pattern": "exec(..., <... flask.request.$W[...] ...>, ...)"
        },
        {
          "pattern": "exec(..., <... flask.request.$W(...) ...>, ...)"
        },
        {
          "pattern": "exec(..., <... flask.request.$W ...>, ...)"
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W.get(...) ...>\n...\nexec(..., <... $INTERM ...>, ...)\n"
            },
            {
              "pattern": "exec(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W[...] ...>\n...\nexec(..., <... $INTERM ...>, ...)\n"
            },
            {
              "pattern": "exec(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W(...) ...>\n...\nexec(..., <... $INTERM ...>, ...)\n"
            },
            {
              "pattern": "exec(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W ...>\n...\nexec(..., <... $INTERM ...>, ...)\n"
            },
            {
              "pattern": "exec(...)"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.flask.security.xss.audit.direct-use-of-jinja2",
      "languages": [
        "python"
      ],
      "message": "Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://jinja.palletsprojects.com/en/2.11.x/api/#basics"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "flask"
        ]
      },
      "pattern-either": [
        {
          "pattern": "jinja2.Environment(...)"
        },
        {
          "pattern": "jinja2.Template.render(...)"
        },
        {
          "patterns": [
            {
              "pattern-inside": "$TEMPLATE = $ENV.get_template(...)\n...\n"
            },
            {
              "pattern": "$TEMPLATE.render(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$TEMPLATE = jinja2.Template(...)\n...\n"
            },
            {
              "pattern": "$TEMPLATE.render(...)"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.flask.security.xss.audit.explicit-unescape-with-markup",
      "languages": [
        "python"
      ],
      "message": "Detected explicitly unescaped content using 'Markup()'. This permits the unescaped data to include unescaped HTML which could result in cross-site scripting. Ensure this data is not externally controlled, or consider rewriting to not use 'Markup()'.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://tedboy.github.io/flask/generated/generated/flask.Markup.html"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "flask"
        ]
      },
      "pattern-either": [
        {
          "pattern": "flask.Markup.unescape(...)"
        },
        {
          "pattern": "$MARKUPOBJ.unescape()"
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "flask.Markup($Q)"
                },
                {
                  "pattern": "markupsafe.Markup($Q)"
                }
              ]
            },
            {
              "metavariable-pattern": {
                "metavariable": "$Q",
                "patterns": [
                  {
                    "pattern-not": "\"...\""
                  }
                ]
              }
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.flask.security.xss.audit.template-autoescape-off",
      "languages": [
        "regex"
      ],
      "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '{% autoescape off %}'. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability, or turn autoescape on.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://flask.palletsprojects.com/en/1.1.x/templating/#controlling-autoescaping",
          "https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "flask"
        ]
      },
      "paths": {
        "include": [
          "*.html"
        ]
      },
      "pattern-regex": "{%\\s*autoescape\\s+false\\s*%}",
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.flask.security.xss.audit.template-unescaped-with-safe",
      "languages": [
        "regex"
      ],
      "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "flask"
        ]
      },
      "paths": {
        "include": [
          "*.html"
        ]
      },
      "pattern-regex": "{{.*?\\|\\s*safe(\\s*}})?",
      "severity": "WARNING"
    },
    {
      "fix": "=\"{{$...VAR}}\"\n",
      "id": "vendored-rules.python.flask.security.xss.audit.template-unquoted-attribute-var",
      "languages": [
        "generic"
      ],
      "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ $...VAR }}\".",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "flask"
        ]
      },
      "paths": {
        "include": [
          "*.html",
          "*.py"
        ]
      },
      "patterns": [
        {
          "pattern": "={{$...VAR}}"
        },
        {
          "pattern-inside": "<$TAG ... >\n"
        },
        {
          "metavariable-pattern": {
            "metavariable": "$...VAR",
            "pattern-either": [
              {
                "pattern": "request.$VALUE.get(...)\n"
              },
              {
                "pattern": "request.$VALUE['...']\n"
              },
              {
                "patterns": [
                  {
                    "pattern": "$REQ"
                  },
                  {
                    "pattern-either": [
                      {
                        "pattern-inside": "$REQ = request.$VALUE.get(...)\n... \n"
                      },
                      {
                        "pattern-inside": "$REQ = request.$VALUE['...']\n... \n"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix-regex": {
        "regex": "(.*)\\)",
        "replacement": "\\1, autoescape=True)"
      },
      "id": "vendored-rules.python.jinja2.security.audit.missing-autoescape-disabled",
      "languages": [
        "python"
      ],
      "message": "Detected a Jinja2 environment without autoescaping. Jinja2 does not autoescape by default. This is dangerous if you are rendering to a browser because this allows for cross-site scripting (XSS) attacks. If you are in a web context, enable autoescaping by setting 'autoescape=True.' You may also consider using 'jinja2.select_autoescape()' to only enable automatic escaping for certain file extensions.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-116: Improper Encoding or Escaping of Output"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://jinja.palletsprojects.com/en/2.11.x/api/#basics"
        ],
        "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b701_jinja2_autoescape_false.html",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "jinja2"
        ]
      },
      "patterns": [
        {
          "pattern-not": "jinja2.Environment(..., autoescape=$VAL, ...)"
        },
        {
          "pattern": "jinja2.Environment(...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix": "True\n",
      "id": "vendored-rules.python.jinja2.security.audit.incorrect-autoescape-disabled",
      "languages": [
        "python"
      ],
      "message": "Detected a Jinja2 environment with 'autoescaping' disabled. This is dangerous if you are rendering to a browser because this allows for cross-site scripting (XSS) attacks. If you are in a web context, enable 'autoescaping' by setting 'autoescape=True.' You may also consider using 'jinja2.select_autoescape()' to only enable automatic escaping for certain file extensions.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-116: Improper Encoding or Escaping of Output"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://jinja.palletsprojects.com/en/2.11.x/api/#basics"
        ],
        "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b701_jinja2_autoescape_false.html",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "jinja2"
        ]
      },
      "patterns": [
        {
          "pattern": "jinja2.Environment(... , autoescape=$VAL, ...)"
        },
        {
          "pattern-not": "jinja2.Environment(... , autoescape=True, ...)"
        },
        {
          "pattern-not": "jinja2.Environment(... , autoescape=jinja2.select_autoescape(...), ...)"
        },
        {
          "focus-metavariable": "$VAL"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.jwt.security.jwt-python-none-alg",
      "languages": [
        "python"
      ],
      "message": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A02_2021-Cryptographic_Failures"
        ],
        "source-rule-url": "https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "jwt"
        ]
      },
      "pattern-either": [
        {
          "pattern": "jwt.encode(...,algorithm=\"none\",...)\n"
        },
        {
          "pattern": "jwt.decode(...,algorithms=[...,\"none\",...],...)"
        }
      ],
      "severity": "ERROR"
    },
    {
      "fix": "True\n",
      "id": "vendored-rules.python.jwt.security.unverified-jwt-decode",
      "languages": [
        "python"
      ],
      "message": "Detected JWT token decoded with 'verify=False'. This bypasses any integrity checks for the token which means the token could be tampered with by malicious actors. Ensure that the JWT token is verified.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-287: Improper Authentication"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A02:2017 - Broken Authentication",
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://github.com/we45/Vulnerable-Flask-App/blob/752ee16087c0bfb79073f68802d907569a1f0df7/app/app.py#L96"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "jwt"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern": "jwt.decode(..., options={..., \"verify_signature\": $BOOL, ...}, ...)\n"
                },
                {
                  "metavariable-pattern": {
                    "metavariable": "$BOOL",
                    "pattern": "False\n"
                  }
                },
                {
                  "focus-metavariable": "$BOOL"
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern": "$OPTS = {..., \"verify_signature\": $BOOL, ...}\n...\njwt.decode(..., options=$OPTS, ...)\n"
                },
                {
                  "metavariable-pattern": {
                    "metavariable": "$BOOL",
                    "pattern": "False\n"
                  }
                },
                {
                  "focus-metavariable": "$BOOL"
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.jwt.security.jwt-python-exposed-credentials",
      "languages": [
        "python"
      ],
      "message": "Password is exposed through JWT token payload. This is not encrypted and the password could be compromised. Do not store passwords in JWT tokens.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-522: Insufficiently Protected Credentials"
        ],
        "cwe2021-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A02:2017 - Broken Authentication",
          "A04:2021 - Insecure Design"
        ],
        "references": [
          "https://cwe.mitre.org/data/definitions/522.html"
        ],
        "source-rule-url": "https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "jwt"
        ]
      },
      "pattern-either": [
        {
          "pattern": "jwt.encode({...,\"password\":$P,...},...)\n"
        },
        {
          "pattern": "$PAYLOAD = {...,\"password\":$P,...}\n...\njwt.encode($PAYLOAD,...)\n"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.jwt.security.jwt-python-hardcoded-secret",
      "languages": [
        "python"
      ],
      "message": "Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)",
      "metadata": {
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-522: Insufficiently Protected Credentials"
        ],
        "cwe2021-top25": true,
        "impact": "MEDIUM",
        "likelihood": "HIGH",
        "owasp": [
          "A02:2017 - Broken Authentication",
          "A04:2021 - Insecure Design"
        ],
        "references": [
          "https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "jwt"
        ]
      },
      "patterns": [
        {
          "pattern": "jwt.encode($X, $SECRET, ...)\n"
        },
        {
          "focus-metavariable": "$SECRET"
        },
        {
          "pattern": "\"...\"\n"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.jwt.security.audit.jwt-python-exposed-data",
      "languages": [
        "python"
      ],
      "message": "The object is passed strictly to jwt.encode(...) Make sure that sensitive information is not exposed through JWT token payload.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-522: Insufficiently Protected Credentials"
        ],
        "cwe2021-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A02:2017 - Broken Authentication",
          "A04:2021 - Insecure Design"
        ],
        "references": [
          "https://owasp.org/Top10/A04_2021-Insecure_Design"
        ],
        "source-rule-url": "https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "jwt"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "def $FUNC(...,$INPUT,...):\n  ...\n"
        },
        {
          "pattern": "jwt.encode($INPUT,...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.dangerous-globals-use",
      "languages": [
        "python"
      ],
      "message": "Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://github.com/mpirnat/lets-be-bad-guys/blob/d92768fb3ade32956abd53bd6bb06e19d634a084/badguys/vulnerable/views.py#L181-L186"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "globals().get(...)"
            },
            {
              "pattern": "locals().get(...)"
            },
            {
              "pattern": "globals()[...]"
            },
            {
              "pattern": "locals()[...]"
            },
            {
              "patterns": [
                {
                  "pattern-either": [
                    {
                      "pattern-inside": "$G = globals()\n...\n"
                    },
                    {
                      "pattern-inside": "$G = locals()\n...\n"
                    }
                  ]
                },
                {
                  "pattern-either": [
                    {
                      "pattern": "$G.get(...)"
                    },
                    {
                      "pattern": "$G[...]"
                    }
                  ]
                }
              ]
            },
            {
              "pattern": "$FUNC.__globals__[...]"
            }
          ]
        },
        {
          "pattern-not": "globals().get(\"...\")"
        },
        {
          "pattern-not": "locals().get(\"...\")"
        },
        {
          "pattern-not": "globals()[\"...\"]"
        },
        {
          "pattern-not": "locals()[\"...\"]"
        },
        {
          "pattern-not": "$G.get(\"...\")"
        },
        {
          "pattern-not": "$G.get[\"...\"]"
        },
        {
          "pattern-not": "$G[\"...\"]"
        },
        {
          "pattern-not": "$FUNC.__globals__[\"...\"]"
        },
        {
          "pattern-not-inside": "globals()[...] = ..."
        },
        {
          "pattern-not-inside": "locals()[...] = ..."
        },
        {
          "pattern-not-inside": "$G[...] = ..."
        },
        {
          "pattern-not-inside": "$FUNC.__globals__[...] = ..."
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.dangerous-os-exec",
      "languages": [
        "python"
      ],
      "message": "Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands.",
      "metadata": {
        "asvs": {
          "control_id": "5.3.8 OS Command Injection",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-not": "os.$METHOD(\"...\", ...)"
                    },
                    {
                      "pattern": "os.$METHOD(...)"
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "(execl|execle|execlp|execlpe|execv|execve|execvp|execvpe)"
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-not": "os.$METHOD(\"...\", [$PATH,\"...\",\"...\",...],...)"
                    },
                    {
                      "pattern-inside": "os.$METHOD($BASH,[$PATH,\"-c\",$CMD,...],...)"
                    },
                    {
                      "pattern": "$CMD"
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "(execv|execve|execvp|execvpe)"
                      }
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$BASH",
                        "regex": "(.*)(sh|bash|ksh|csh|tcsh|zsh)"
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-not": "os.$METHOD(\"...\", $PATH, \"...\", \"...\",...)"
                    },
                    {
                      "pattern-inside": "os.$METHOD($BASH, $PATH, \"-c\", $CMD,...)"
                    },
                    {
                      "pattern": "$CMD"
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "(execl|execle|execlp|execlpe)"
                      }
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$BASH",
                        "regex": "(.*)(sh|bash|ksh|csh|tcsh|zsh)"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "flask.request.form.get(...)"
                        },
                        {
                          "pattern": "flask.request.form[...]"
                        },
                        {
                          "pattern": "flask.request.args.get(...)"
                        },
                        {
                          "pattern": "flask.request.args[...]"
                        },
                        {
                          "pattern": "flask.request.values.get(...)"
                        },
                        {
                          "pattern": "flask.request.values[...]"
                        },
                        {
                          "pattern": "flask.request.cookies.get(...)"
                        },
                        {
                          "pattern": "flask.request.cookies[...]"
                        },
                        {
                          "pattern": "flask.request.stream"
                        },
                        {
                          "pattern": "flask.request.headers.get(...)"
                        },
                        {
                          "pattern": "flask.request.headers[...]"
                        },
                        {
                          "pattern": "flask.request.data"
                        },
                        {
                          "pattern": "flask.request.full_path"
                        },
                        {
                          "pattern": "flask.request.url"
                        },
                        {
                          "pattern": "flask.request.json"
                        },
                        {
                          "pattern": "flask.request.get_json()"
                        },
                        {
                          "pattern": "flask.request.view_args.get(...)"
                        },
                        {
                          "pattern": "flask.request.view_args[...]"
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "@$APP.route(...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n"
                            },
                            {
                              "focus-metavariable": "$ROUTEVAR"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "def $FUNC(request, ...):\n  ...\n"
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "request.$PROPERTY.get(...)"
                        },
                        {
                          "pattern": "request.$PROPERTY[...]"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "@rest_framework.decorators.api_view(...)\ndef $FUNC($REQ, ...):\n  ...\n"
                        },
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern-inside": "class $VIEW(..., rest_framework.views.APIView, ...):\n  ...\n"
                                },
                                {
                                  "pattern-inside": "class $VIEW(..., rest_framework.generics.GenericAPIView, ...):\n  ...                              \n"
                                }
                              ]
                            },
                            {
                              "pattern-inside": "def $METHOD(self, $REQ, ...):\n  ...\n"
                            },
                            {
                              "metavariable-regex": {
                                "metavariable": "$METHOD",
                                "regex": "(get|post|put|patch|delete|head)"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "$REQ.POST.get(...)"
                        },
                        {
                          "pattern": "$REQ.POST[...]"
                        },
                        {
                          "pattern": "$REQ.FILES.get(...)"
                        },
                        {
                          "pattern": "$REQ.FILES[...]"
                        },
                        {
                          "pattern": "$REQ.DATA.get(...)"
                        },
                        {
                          "pattern": "$REQ.DATA[...]"
                        },
                        {
                          "pattern": "$REQ.QUERY_PARAMS.get(...)"
                        },
                        {
                          "pattern": "$REQ.QUERY_PARAMS[...]"
                        },
                        {
                          "pattern": "$REQ.data.get(...)"
                        },
                        {
                          "pattern": "$REQ.data[...]"
                        },
                        {
                          "pattern": "$REQ.query_params.get(...)"
                        },
                        {
                          "pattern": "$REQ.query_params[...]"
                        },
                        {
                          "pattern": "$REQ.content_type"
                        },
                        {
                          "pattern": "$REQ.content_type"
                        },
                        {
                          "pattern": "$REQ.stream"
                        },
                        {
                          "pattern": "$REQ.stream"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "class $SERVER(..., http.server.BaseHTTPRequestHandler, ...):\n  ...\n"
                        },
                        {
                          "pattern-inside": "class $SERVER(..., http.server.StreamRequestHandler, ...):\n  ...\n"
                        },
                        {
                          "pattern-inside": "class $SERVER(..., http.server.DatagramRequestHandler, ...):\n  ...\n"
                        }
                      ]
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "self.requestline"
                        },
                        {
                          "pattern": "self.path"
                        },
                        {
                          "pattern": "self.headers[...]"
                        },
                        {
                          "pattern": "self.headers.get(...)"
                        },
                        {
                          "pattern": "self.rfile"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "@pyramid.view.view_config( ... )\ndef $VIEW($REQ):\n  ...\n"
                    },
                    {
                      "pattern": "$REQ.$ANYTHING"
                    },
                    {
                      "pattern-not": "$REQ.dbsession"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.lang.security.dangerous-spawn-process",
      "languages": [
        "python"
      ],
      "message": "Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands.",
      "metadata": {
        "asvs": {
          "control_id": "5.3.8 OS Command Injection",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-not": "os.$METHOD($MODE, \"...\", ...)"
                    },
                    {
                      "pattern-inside": "os.$METHOD($MODE, $CMD, ...)"
                    },
                    {
                      "pattern": "$CMD"
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "(spawnl|spawnle|spawnlp|spawnlpe|spawnv|spawnve|spawnvp|spawnvp|spawnvpe|posix_spawn|posix_spawnp|startfile)"
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-not": "os.$METHOD($MODE, \"...\", [\"...\",\"...\",...], ...)"
                    },
                    {
                      "pattern-inside": "os.$METHOD($MODE, $BASH, [\"-c\",$CMD,...],...)"
                    },
                    {
                      "pattern": "$CMD"
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "(spawnv|spawnve|spawnvp|spawnvp|spawnvpe|posix_spawn|posix_spawnp)"
                      }
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$BASH",
                        "regex": "(.*)(sh|bash|ksh|csh|tcsh|zsh)"
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-not": "os.$METHOD($MODE, \"...\", \"...\", \"...\", ...)"
                    },
                    {
                      "pattern-inside": "os.$METHOD($MODE, $BASH, \"-c\", $CMD,...)"
                    },
                    {
                      "pattern": "$CMD"
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "(spawnl|spawnle|spawnlp|spawnlpe)"
                      }
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$BASH",
                        "regex": "(.*)(sh|bash|ksh|csh|tcsh|zsh)"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "flask.request.form.get(...)"
                        },
                        {
                          "pattern": "flask.request.form[...]"
                        },
                        {
                          "pattern": "flask.request.args.get(...)"
                        },
                        {
                          "pattern": "flask.request.args[...]"
                        },
                        {
                          "pattern": "flask.request.values.get(...)"
                        },
                        {
                          "pattern": "flask.request.values[...]"
                        },
                        {
                          "pattern": "flask.request.cookies.get(...)"
                        },
                        {
                          "pattern": "flask.request.cookies[...]"
                        },
                        {
                          "pattern": "flask.request.stream"
                        },
                        {
                          "pattern": "flask.request.headers.get(...)"
                        },
                        {
                          "pattern": "flask.request.headers[...]"
                        },
                        {
                          "pattern": "flask.request.data"
                        },
                        {
                          "pattern": "flask.request.full_path"
                        },
                        {
                          "pattern": "flask.request.url"
                        },
                        {
                          "pattern": "flask.request.json"
                        },
                        {
                          "pattern": "flask.request.get_json()"
                        },
                        {
                          "pattern": "flask.request.view_args.get(...)"
                        },
                        {
                          "pattern": "flask.request.view_args[...]"
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "@$APP.route(...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n"
                            },
                            {
                              "pattern": "$ROUTEVAR"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "def $FUNC(request, ...):\n  ...\n"
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "request.$PROPERTY.get(...)"
                        },
                        {
                          "pattern": "request.$PROPERTY[...]"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "@rest_framework.decorators.api_view(...)\ndef $FUNC($REQ, ...):\n  ...\n"
                        },
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern-inside": "class $VIEW(..., rest_framework.views.APIView, ...):\n  ...\n"
                                },
                                {
                                  "pattern-inside": "class $VIEW(..., rest_framework.generics.GenericAPIView, ...):\n  ...                              \n"
                                }
                              ]
                            },
                            {
                              "pattern-inside": "def $METHOD(self, $REQ, ...):\n  ...\n"
                            },
                            {
                              "metavariable-regex": {
                                "metavariable": "$METHOD",
                                "regex": "(get|post|put|patch|delete|head)"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "$REQ.POST.get(...)"
                        },
                        {
                          "pattern": "$REQ.POST[...]"
                        },
                        {
                          "pattern": "$REQ.FILES.get(...)"
                        },
                        {
                          "pattern": "$REQ.FILES[...]"
                        },
                        {
                          "pattern": "$REQ.DATA.get(...)"
                        },
                        {
                          "pattern": "$REQ.DATA[...]"
                        },
                        {
                          "pattern": "$REQ.QUERY_PARAMS.get(...)"
                        },
                        {
                          "pattern": "$REQ.QUERY_PARAMS[...]"
                        },
                        {
                          "pattern": "$REQ.data.get(...)"
                        },
                        {
                          "pattern": "$REQ.data[...]"
                        },
                        {
                          "pattern": "$REQ.query_params.get(...)"
                        },
                        {
                          "pattern": "$REQ.query_params[...]"
                        },
                        {
                          "pattern": "$REQ.content_type"
                        },
                        {
                          "pattern": "$REQ.content_type"
                        },
                        {
                          "pattern": "$REQ.stream"
                        },
                        {
                          "pattern": "$REQ.stream"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "class $SERVER(..., http.server.BaseHTTPRequestHandler, ...):\n  ...\n"
                        },
                        {
                          "pattern-inside": "class $SERVER(..., http.server.StreamRequestHandler, ...):\n  ...\n"
                        },
                        {
                          "pattern-inside": "class $SERVER(..., http.server.DatagramRequestHandler, ...):\n  ...\n"
                        }
                      ]
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "self.requestline"
                        },
                        {
                          "pattern": "self.path"
                        },
                        {
                          "pattern": "self.headers[...]"
                        },
                        {
                          "pattern": "self.headers.get(...)"
                        },
                        {
                          "pattern": "self.rfile"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "@pyramid.view.view_config( ... )\ndef $VIEW($REQ):\n  ...\n"
                    },
                    {
                      "pattern": "$REQ.$ANYTHING"
                    },
                    {
                      "pattern-not": "$REQ.dbsession"
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "os.environ['$ANYTHING']"
                        },
                        {
                          "pattern": "os.environ.get('$FOO', ...)"
                        },
                        {
                          "pattern": "os.environb['$ANYTHING']"
                        },
                        {
                          "pattern": "os.environb.get('$FOO', ...)"
                        },
                        {
                          "pattern": "os.getenv('$ANYTHING', ...)"
                        },
                        {
                          "pattern": "os.getenvb('$ANYTHING', ...)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern": "sys.argv[...]"
                                },
                                {
                                  "pattern": "sys.orig_argv[...]"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "$PARSER = argparse.ArgumentParser(...)\n...\n"
                            },
                            {
                              "pattern-inside": "$ARGS = $PARSER.parse_args()\n"
                            },
                            {
                              "pattern": "<... $ARGS ...>"
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "$PARSER = optparse.OptionParser(...)\n...\n"
                            },
                            {
                              "pattern-inside": "$ARGS = $PARSER.parse_args()\n"
                            },
                            {
                              "pattern": "<... $ARGS ...>"
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern-inside": "$OPTS, $ARGS = getopt.getopt(...)\n...\n"
                                },
                                {
                                  "pattern-inside": "$OPTS, $ARGS = getopt.gnu_getopt(...)\n...\n"
                                }
                              ]
                            },
                            {
                              "pattern-either": [
                                {
                                  "patterns": [
                                    {
                                      "pattern-inside": "for $O, $A in $OPTS:\n  ...\n"
                                    },
                                    {
                                      "pattern": "$A"
                                    }
                                  ]
                                },
                                {
                                  "pattern": "$ARGS"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.lang.security.dangerous-subinterpreters-run-string",
      "languages": [
        "python"
      ],
      "message": "Found user controlled content in `run_string`. This is dangerous because it allows a malicious actor to run arbitrary Python code.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
        ],
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://bugs.python.org/issue43472",
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern": "_xxsubinterpreters.run_string($ID, $PAYLOAD, ...)\n"
            },
            {
              "pattern-not": "_xxsubinterpreters.run_string($ID, \"...\", ...)\n"
            },
            {
              "focus-metavariable": "$PAYLOAD"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "flask.request.form.get(...)"
                        },
                        {
                          "pattern": "flask.request.form[...]"
                        },
                        {
                          "pattern": "flask.request.args.get(...)"
                        },
                        {
                          "pattern": "flask.request.args[...]"
                        },
                        {
                          "pattern": "flask.request.values.get(...)"
                        },
                        {
                          "pattern": "flask.request.values[...]"
                        },
                        {
                          "pattern": "flask.request.cookies.get(...)"
                        },
                        {
                          "pattern": "flask.request.cookies[...]"
                        },
                        {
                          "pattern": "flask.request.stream"
                        },
                        {
                          "pattern": "flask.request.headers.get(...)"
                        },
                        {
                          "pattern": "flask.request.headers[...]"
                        },
                        {
                          "pattern": "flask.request.data"
                        },
                        {
                          "pattern": "flask.request.full_path"
                        },
                        {
                          "pattern": "flask.request.url"
                        },
                        {
                          "pattern": "flask.request.json"
                        },
                        {
                          "pattern": "flask.request.get_json()"
                        },
                        {
                          "pattern": "flask.request.view_args.get(...)"
                        },
                        {
                          "pattern": "flask.request.view_args[...]"
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "@$APP.route(...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n"
                            },
                            {
                              "focus-metavariable": "$ROUTEVAR"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "def $FUNC(request, ...):\n  ...\n"
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "request.$PROPERTY.get(...)"
                        },
                        {
                          "pattern": "request.$PROPERTY[...]"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "@rest_framework.decorators.api_view(...)\ndef $FUNC($REQ, ...):\n  ...\n"
                        },
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern-inside": "class $VIEW(..., rest_framework.views.APIView, ...):\n  ...\n"
                                },
                                {
                                  "pattern-inside": "class $VIEW(..., rest_framework.generics.GenericAPIView, ...):\n  ...                              \n"
                                }
                              ]
                            },
                            {
                              "pattern-inside": "def $METHOD(self, $REQ, ...):\n  ...\n"
                            },
                            {
                              "metavariable-regex": {
                                "metavariable": "$METHOD",
                                "regex": "(get|post|put|patch|delete|head)"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "$REQ.POST.get(...)"
                        },
                        {
                          "pattern": "$REQ.POST[...]"
                        },
                        {
                          "pattern": "$REQ.FILES.get(...)"
                        },
                        {
                          "pattern": "$REQ.FILES[...]"
                        },
                        {
                          "pattern": "$REQ.DATA.get(...)"
                        },
                        {
                          "pattern": "$REQ.DATA[...]"
                        },
                        {
                          "pattern": "$REQ.QUERY_PARAMS.get(...)"
                        },
                        {
                          "pattern": "$REQ.QUERY_PARAMS[...]"
                        },
                        {
                          "pattern": "$REQ.data.get(...)"
                        },
                        {
                          "pattern": "$REQ.data[...]"
                        },
                        {
                          "pattern": "$REQ.query_params.get(...)"
                        },
                        {
                          "pattern": "$REQ.query_params[...]"
                        },
                        {
                          "pattern": "$REQ.content_type"
                        },
                        {
                          "pattern": "$REQ.content_type"
                        },
                        {
                          "pattern": "$REQ.stream"
                        },
                        {
                          "pattern": "$REQ.stream"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "class $SERVER(..., http.server.BaseHTTPRequestHandler, ...):\n  ...\n"
                        },
                        {
                          "pattern-inside": "class $SERVER(..., http.server.StreamRequestHandler, ...):\n  ...\n"
                        },
                        {
                          "pattern-inside": "class $SERVER(..., http.server.DatagramRequestHandler, ...):\n  ...\n"
                        }
                      ]
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "self.requestline"
                        },
                        {
                          "pattern": "self.path"
                        },
                        {
                          "pattern": "self.headers[...]"
                        },
                        {
                          "pattern": "self.headers.get(...)"
                        },
                        {
                          "pattern": "self.rfile"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "@pyramid.view.view_config( ... )\ndef $VIEW($REQ):\n  ...\n"
                    },
                    {
                      "pattern": "$REQ.$ANYTHING"
                    },
                    {
                      "pattern-not": "$REQ.dbsession"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.dangerous-subprocess-use",
      "languages": [
        "python"
      ],
      "message": "Detected subprocess function '$FUNC' with user controlled data. A malicious actor could leverage this to perform command injection. You may consider using 'shlex.escape()'.",
      "metadata": {
        "asvs": {
          "control_id": "5.3.8 OS Command Injection",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess",
          "https://docs.python.org/3/library/subprocess.html",
          "https://docs.python.org/3/library/shlex.html",
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-not": "subprocess.$FUNC(\"...\", ...)"
                    },
                    {
                      "pattern-not": "subprocess.$FUNC([\"...\",...], ...)"
                    },
                    {
                      "pattern-not": "subprocess.$FUNC((\"...\",...), ...)"
                    },
                    {
                      "pattern-not": "subprocess.CalledProcessError(...)"
                    },
                    {
                      "pattern-not": "subprocess.SubprocessError(...)"
                    },
                    {
                      "pattern": "subprocess.$FUNC($CMD, ...)"
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-not": "subprocess.$FUNC(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",\"...\",...)"
                    },
                    {
                      "pattern": "subprocess.$FUNC(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\", $CMD)"
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-not": "subprocess.$FUNC([\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",\"...\",...],...)"
                    },
                    {
                      "pattern-not": "subprocess.$FUNC((\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",\"...\",...),...)"
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "subprocess.$FUNC([\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\", $CMD], ...)"
                        },
                        {
                          "pattern": "subprocess.$FUNC((\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\", $CMD), ...)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-not": "subprocess.$FUNC(\"=~/(python)/\",\"...\",...)"
                    },
                    {
                      "pattern": "subprocess.$FUNC(\"=~/(python)/\", $CMD)"
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-not": "subprocess.$FUNC([\"=~/(python)/\",\"...\",...],...)"
                    },
                    {
                      "pattern-not": "subprocess.$FUNC((\"=~/(python)/\",\"...\",...),...)"
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "subprocess.$FUNC([\"=~/(python)/\", $CMD],...)"
                        },
                        {
                          "pattern": "subprocess.$FUNC((\"=~/(python)/\", $CMD),...)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "focus-metavariable": "$CMD"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "flask.request.form.get(...)"
                        },
                        {
                          "pattern": "flask.request.form[...]"
                        },
                        {
                          "pattern": "flask.request.args.get(...)"
                        },
                        {
                          "pattern": "flask.request.args[...]"
                        },
                        {
                          "pattern": "flask.request.values.get(...)"
                        },
                        {
                          "pattern": "flask.request.values[...]"
                        },
                        {
                          "pattern": "flask.request.cookies.get(...)"
                        },
                        {
                          "pattern": "flask.request.cookies[...]"
                        },
                        {
                          "pattern": "flask.request.stream"
                        },
                        {
                          "pattern": "flask.request.headers.get(...)"
                        },
                        {
                          "pattern": "flask.request.headers[...]"
                        },
                        {
                          "pattern": "flask.request.data"
                        },
                        {
                          "pattern": "flask.request.full_path"
                        },
                        {
                          "pattern": "flask.request.url"
                        },
                        {
                          "pattern": "flask.request.json"
                        },
                        {
                          "pattern": "flask.request.get_json()"
                        },
                        {
                          "pattern": "flask.request.view_args.get(...)"
                        },
                        {
                          "pattern": "flask.request.view_args[...]"
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "@$APP.route(...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n"
                            },
                            {
                              "focus-metavariable": "$ROUTEVAR"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "def $FUNC(request, ...):\n  ...\n"
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "request.$PROPERTY.get(...)"
                        },
                        {
                          "pattern": "request.$PROPERTY[...]"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "@rest_framework.decorators.api_view(...)\ndef $FUNC($REQ, ...):\n  ...\n"
                        },
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern-inside": "class $VIEW(..., rest_framework.views.APIView, ...):\n  ...\n"
                                },
                                {
                                  "pattern-inside": "class $VIEW(..., rest_framework.generics.GenericAPIView, ...):\n  ...                              \n"
                                }
                              ]
                            },
                            {
                              "pattern-inside": "def $METHOD(self, $REQ, ...):\n  ...\n"
                            },
                            {
                              "metavariable-regex": {
                                "metavariable": "$METHOD",
                                "regex": "(get|post|put|patch|delete|head)"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "$REQ.POST.get(...)"
                        },
                        {
                          "pattern": "$REQ.POST[...]"
                        },
                        {
                          "pattern": "$REQ.FILES.get(...)"
                        },
                        {
                          "pattern": "$REQ.FILES[...]"
                        },
                        {
                          "pattern": "$REQ.DATA.get(...)"
                        },
                        {
                          "pattern": "$REQ.DATA[...]"
                        },
                        {
                          "pattern": "$REQ.QUERY_PARAMS.get(...)"
                        },
                        {
                          "pattern": "$REQ.QUERY_PARAMS[...]"
                        },
                        {
                          "pattern": "$REQ.data.get(...)"
                        },
                        {
                          "pattern": "$REQ.data[...]"
                        },
                        {
                          "pattern": "$REQ.query_params.get(...)"
                        },
                        {
                          "pattern": "$REQ.query_params[...]"
                        },
                        {
                          "pattern": "$REQ.content_type"
                        },
                        {
                          "pattern": "$REQ.content_type"
                        },
                        {
                          "pattern": "$REQ.stream"
                        },
                        {
                          "pattern": "$REQ.stream"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "class $SERVER(..., http.server.BaseHTTPRequestHandler, ...):\n  ...\n"
                        },
                        {
                          "pattern-inside": "class $SERVER(..., http.server.StreamRequestHandler, ...):\n  ...\n"
                        },
                        {
                          "pattern-inside": "class $SERVER(..., http.server.DatagramRequestHandler, ...):\n  ...\n"
                        }
                      ]
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "self.requestline"
                        },
                        {
                          "pattern": "self.path"
                        },
                        {
                          "pattern": "self.headers[...]"
                        },
                        {
                          "pattern": "self.headers.get(...)"
                        },
                        {
                          "pattern": "self.rfile"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "@pyramid.view.view_config( ... )\ndef $VIEW($REQ):\n  ...\n"
                    },
                    {
                      "pattern": "$REQ.$ANYTHING"
                    },
                    {
                      "pattern-not": "$REQ.dbsession"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.lang.security.dangerous-system-call",
      "languages": [
        "python"
      ],
      "message": "Found user-controlled data used in a system call. This could allow a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.",
      "metadata": {
        "asvs": {
          "control_id": "5.2.4 Dyanmic Code Execution Features",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-not": "os.$W(\"...\", ...)"
            },
            {
              "pattern-either": [
                {
                  "pattern": "os.system(...)"
                },
                {
                  "pattern": "getattr(os, \"system\")(...)"
                },
                {
                  "pattern": "__import__(\"os\").system(...)"
                },
                {
                  "pattern": "getattr(__import__(\"os\"), \"system\")(...)"
                },
                {
                  "pattern": "$X = __import__(\"os\")\n...\n$X.system(...)\n"
                },
                {
                  "pattern": "$X = __import__(\"os\")\n...\ngetattr($X, \"system\")(...)\n"
                },
                {
                  "pattern": "$X = getattr(os, \"system\")\n...\n$X(...)\n"
                },
                {
                  "pattern": "$X = __import__(\"os\")\n...\n$Y = getattr($X, \"system\")\n...\n$Y(...)\n"
                },
                {
                  "pattern": "os.popen(...)"
                },
                {
                  "pattern": "os.popen2(...)"
                },
                {
                  "pattern": "os.popen3(...)"
                },
                {
                  "pattern": "os.popen4(...)"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "flask.request.form.get(...)"
                        },
                        {
                          "pattern": "flask.request.form[...]"
                        },
                        {
                          "pattern": "flask.request.args.get(...)"
                        },
                        {
                          "pattern": "flask.request.args[...]"
                        },
                        {
                          "pattern": "flask.request.values.get(...)"
                        },
                        {
                          "pattern": "flask.request.values[...]"
                        },
                        {
                          "pattern": "flask.request.cookies.get(...)"
                        },
                        {
                          "pattern": "flask.request.cookies[...]"
                        },
                        {
                          "pattern": "flask.request.stream"
                        },
                        {
                          "pattern": "flask.request.headers.get(...)"
                        },
                        {
                          "pattern": "flask.request.headers[...]"
                        },
                        {
                          "pattern": "flask.request.data"
                        },
                        {
                          "pattern": "flask.request.full_path"
                        },
                        {
                          "pattern": "flask.request.url"
                        },
                        {
                          "pattern": "flask.request.json"
                        },
                        {
                          "pattern": "flask.request.get_json()"
                        },
                        {
                          "pattern": "flask.request.view_args.get(...)"
                        },
                        {
                          "pattern": "flask.request.view_args[...]"
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "@$APP.route(...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n"
                            },
                            {
                              "focus-metavariable": "$ROUTEVAR"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "def $FUNC(request, ...):\n  ...\n"
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "request.$PROPERTY.get(...)"
                        },
                        {
                          "pattern": "request.$PROPERTY[...]"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "@rest_framework.decorators.api_view(...)\ndef $FUNC($REQ, ...):\n  ...\n"
                        },
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern-inside": "class $VIEW(..., rest_framework.views.APIView, ...):\n  ...\n"
                                },
                                {
                                  "pattern-inside": "class $VIEW(..., rest_framework.generics.GenericAPIView, ...):\n  ...                              \n"
                                }
                              ]
                            },
                            {
                              "pattern-inside": "def $METHOD(self, $REQ, ...):\n  ...\n"
                            },
                            {
                              "metavariable-regex": {
                                "metavariable": "$METHOD",
                                "regex": "(get|post|put|patch|delete|head)"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "$REQ.POST.get(...)"
                        },
                        {
                          "pattern": "$REQ.POST[...]"
                        },
                        {
                          "pattern": "$REQ.FILES.get(...)"
                        },
                        {
                          "pattern": "$REQ.FILES[...]"
                        },
                        {
                          "pattern": "$REQ.DATA.get(...)"
                        },
                        {
                          "pattern": "$REQ.DATA[...]"
                        },
                        {
                          "pattern": "$REQ.QUERY_PARAMS.get(...)"
                        },
                        {
                          "pattern": "$REQ.QUERY_PARAMS[...]"
                        },
                        {
                          "pattern": "$REQ.data.get(...)"
                        },
                        {
                          "pattern": "$REQ.data[...]"
                        },
                        {
                          "pattern": "$REQ.query_params.get(...)"
                        },
                        {
                          "pattern": "$REQ.query_params[...]"
                        },
                        {
                          "pattern": "$REQ.content_type"
                        },
                        {
                          "pattern": "$REQ.content_type"
                        },
                        {
                          "pattern": "$REQ.stream"
                        },
                        {
                          "pattern": "$REQ.stream"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "class $SERVER(..., http.server.BaseHTTPRequestHandler, ...):\n  ...\n"
                        },
                        {
                          "pattern-inside": "class $SERVER(..., http.server.StreamRequestHandler, ...):\n  ...\n"
                        },
                        {
                          "pattern-inside": "class $SERVER(..., http.server.DatagramRequestHandler, ...):\n  ...\n"
                        }
                      ]
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "self.requestline"
                        },
                        {
                          "pattern": "self.path"
                        },
                        {
                          "pattern": "self.headers[...]"
                        },
                        {
                          "pattern": "self.headers.get(...)"
                        },
                        {
                          "pattern": "self.rfile"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "@pyramid.view.view_config( ... )\ndef $VIEW($REQ):\n  ...\n"
                    },
                    {
                      "pattern": "$REQ.$ANYTHING"
                    },
                    {
                      "pattern-not": "$REQ.dbsession"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.lang.security.dangerous-testcapi-run-in-subinterp",
      "languages": [
        "python"
      ],
      "message": "Found user controlled content in `run_in_subinterp`. This is dangerous because it allows a malicious actor to run arbitrary Python code.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
        ],
        "impact": "HIGH",
        "likelihood": "HIGH",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "_testcapi.run_in_subinterp($PAYLOAD, ...)\n"
                },
                {
                  "pattern": "test.support.run_in_subinterp($PAYLOAD, ...)\n"
                }
              ]
            },
            {
              "focus-metavariable": "$PAYLOAD"
            },
            {
              "pattern-not": "_testcapi.run_in_subinterp(\"...\", ...)\n"
            },
            {
              "pattern-not": "test.support.run_in_subinterp(\"...\", ...)\n"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "flask.request.form.get(...)"
                        },
                        {
                          "pattern": "flask.request.form[...]"
                        },
                        {
                          "pattern": "flask.request.args.get(...)"
                        },
                        {
                          "pattern": "flask.request.args[...]"
                        },
                        {
                          "pattern": "flask.request.values.get(...)"
                        },
                        {
                          "pattern": "flask.request.values[...]"
                        },
                        {
                          "pattern": "flask.request.cookies.get(...)"
                        },
                        {
                          "pattern": "flask.request.cookies[...]"
                        },
                        {
                          "pattern": "flask.request.stream"
                        },
                        {
                          "pattern": "flask.request.headers.get(...)"
                        },
                        {
                          "pattern": "flask.request.headers[...]"
                        },
                        {
                          "pattern": "flask.request.data"
                        },
                        {
                          "pattern": "flask.request.full_path"
                        },
                        {
                          "pattern": "flask.request.url"
                        },
                        {
                          "pattern": "flask.request.json"
                        },
                        {
                          "pattern": "flask.request.get_json()"
                        },
                        {
                          "pattern": "flask.request.view_args.get(...)"
                        },
                        {
                          "pattern": "flask.request.view_args[...]"
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "@$APP.route(...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n"
                            },
                            {
                              "focus-metavariable": "$ROUTEVAR"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "def $FUNC(request, ...):\n  ...\n"
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "request.$PROPERTY.get(...)"
                        },
                        {
                          "pattern": "request.$PROPERTY[...]"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "@rest_framework.decorators.api_view(...)\ndef $FUNC($REQ, ...):\n  ...\n"
                        },
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern-inside": "class $VIEW(..., rest_framework.views.APIView, ...):\n  ...\n"
                                },
                                {
                                  "pattern-inside": "class $VIEW(..., rest_framework.generics.GenericAPIView, ...):\n  ...                              \n"
                                }
                              ]
                            },
                            {
                              "pattern-inside": "def $METHOD(self, $REQ, ...):\n  ...\n"
                            },
                            {
                              "metavariable-regex": {
                                "metavariable": "$METHOD",
                                "regex": "(get|post|put|patch|delete|head)"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "$REQ.POST.get(...)"
                        },
                        {
                          "pattern": "$REQ.POST[...]"
                        },
                        {
                          "pattern": "$REQ.FILES.get(...)"
                        },
                        {
                          "pattern": "$REQ.FILES[...]"
                        },
                        {
                          "pattern": "$REQ.DATA.get(...)"
                        },
                        {
                          "pattern": "$REQ.DATA[...]"
                        },
                        {
                          "pattern": "$REQ.QUERY_PARAMS.get(...)"
                        },
                        {
                          "pattern": "$REQ.QUERY_PARAMS[...]"
                        },
                        {
                          "pattern": "$REQ.data.get(...)"
                        },
                        {
                          "pattern": "$REQ.data[...]"
                        },
                        {
                          "pattern": "$REQ.query_params.get(...)"
                        },
                        {
                          "pattern": "$REQ.query_params[...]"
                        },
                        {
                          "pattern": "$REQ.content_type"
                        },
                        {
                          "pattern": "$REQ.content_type"
                        },
                        {
                          "pattern": "$REQ.stream"
                        },
                        {
                          "pattern": "$REQ.stream"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "class $SERVER(..., http.server.BaseHTTPRequestHandler, ...):\n  ...\n"
                        },
                        {
                          "pattern-inside": "class $SERVER(..., http.server.StreamRequestHandler, ...):\n  ...\n"
                        },
                        {
                          "pattern-inside": "class $SERVER(..., http.server.DatagramRequestHandler, ...):\n  ...\n"
                        }
                      ]
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "self.requestline"
                        },
                        {
                          "pattern": "self.path"
                        },
                        {
                          "pattern": "self.headers[...]"
                        },
                        {
                          "pattern": "self.headers.get(...)"
                        },
                        {
                          "pattern": "self.rfile"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "@pyramid.view.view_config( ... )\ndef $VIEW($REQ):\n  ...\n"
                    },
                    {
                      "pattern": "$REQ.$ANYTHING"
                    },
                    {
                      "pattern-not": "$REQ.dbsession"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.insecure-hash-function",
      "languages": [
        "python"
      ],
      "message": "Detected use of an insecure MD4 or MD5 hash function. These functions have known vulnerabilities and are considered deprecated. Consider using 'SHA256' or a similar function instead.",
      "metadata": {
        "asvs": {
          "control_id": "6.2.2 Insecure Custom Algorithm",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms",
          "section": "V6 Stored Cryptography Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://tools.ietf.org/html/rfc6151",
          "https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision",
          "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"
        ],
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/hashlib_new_insecure_functions.py",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "pattern-either": [
        {
          "pattern": "hashlib.new(\"=~/[M|m][D|d][4|5]/\", ...)"
        },
        {
          "pattern": "hashlib.new(..., name=\"=~/[M|m][D|d][4|5]/\", ...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix-regex": {
        "regex": "uuid1",
        "replacement": "uuid4"
      },
      "id": "vendored-rules.python.lang.security.insecure-uuid-version",
      "languages": [
        "python"
      ],
      "message": "Using UUID version 1 for UUID generation can lead to predictable UUIDs based on system information (e.g., MAC address, timestamp). This may lead to security risks such as the sandwich attack. Consider using `uuid.uuid4()` instead for better randomness and security.",
      "metadata": {
        "asvs": {
          "control_id": "6.3.2 Insecure UUID Generation",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v63-random-values",
          "section": "V6 Stored Cryptography Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-330: Use of Insufficiently Random Values"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://www.landh.tech/blog/20230811-sandwich-attack/"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern": "uuid.uuid1(...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix-regex": {
        "regex": "_create_unverified_context",
        "replacement": "create_default_context"
      },
      "id": "vendored-rules.python.lang.security.unverified-ssl-context",
      "languages": [
        "python"
      ],
      "message": "Unverified SSL context detected. This will permit insecure connections without verifying SSL certificates. Use 'ssl.create_default_context' instead.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-295: Improper Certificate Validation"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/ssl.html#ssl-security",
          "https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "ssl._create_unverified_context(...)"
            },
            {
              "pattern": "ssl._create_default_https_context = ssl._create_unverified_context"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "fix": "defusedxml.etree.ElementTree.parse($...ARGS)",
      "id": "vendored-rules.python.lang.security.use-defused-xml-parse",
      "languages": [
        "python"
      ],
      "message": "The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and \"XML bombs\" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-611: Improper Restriction of XML External Entity Reference"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A04:2017 - XML External Entities (XXE)",
          "A05:2021 - Security Misconfiguration"
        ],
        "references": [
          "https://docs.python.org/3/library/xml.html",
          "https://github.com/tiran/defusedxml",
          "https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern": "xml.etree.ElementTree.parse($...ARGS)"
        },
        {
          "pattern-not": "xml.etree.ElementTree.parse(\"...\")"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.lang.security.use-defused-xml",
      "languages": [
        "python"
      ],
      "message": "The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and \"XML bombs\" can cause denial of service.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-611: Improper Restriction of XML External Entity Reference"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A04:2017 - XML External Entities (XXE)",
          "A05:2021 - Security Misconfiguration"
        ],
        "references": [
          "https://docs.python.org/3/library/xml.html",
          "https://github.com/tiran/defusedxml",
          "https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "pattern": "import xml",
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.lang.security.use-defused-xmlrpc",
      "languages": [
        "python"
      ],
      "message": "Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc instead.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A04:2017 - XML External Entities (XXE)",
          "A05:2021 - Security Misconfiguration"
        ],
        "references": [
          "https://pypi.org/project/defusedxml/",
          "https://docs.python.org/3/library/xml.html#xml-vulnerabilities"
        ],
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/07f84cb5f5e7c1055e6feaa0fe93afa471de0ac3/bandit/blacklists/imports.py#L160",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "pattern-either": [
        {
          "pattern": "import xmlrpclib"
        },
        {
          "pattern": "import SimpleXMLRPCServer"
        },
        {
          "pattern": "import xmlrpc"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.lang.security.dangerous-interactive-code-run",
      "languages": [
        "python"
      ],
      "message": "Found user controlled data inside InteractiveConsole/InteractiveInterpreter method. This is dangerous if external data can reach this function call because it allows a malicious actor to run arbitrary Python code.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
        ],
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "$X = code.InteractiveConsole(...)\n...\n"
                },
                {
                  "pattern-inside": "$X = code.InteractiveInterpreter(...)\n...\n"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$X.push($PAYLOAD,...)\n"
                },
                {
                  "pattern": "$X.runsource($PAYLOAD,...)\n"
                },
                {
                  "pattern": "$X.runcode(code.compile_command($PAYLOAD),...)\n"
                },
                {
                  "pattern": "$PL = code.compile_command($PAYLOAD,...)\n...\n$X.runcode($PL,...)\n"
                }
              ]
            },
            {
              "focus-metavariable": "$PAYLOAD"
            },
            {
              "pattern-not": "$X.push(\"...\",...)\n"
            },
            {
              "pattern-not": "$X.runsource(\"...\",...)\n"
            },
            {
              "pattern-not": "$X.runcode(code.compile_command(\"...\"),...)\n"
            },
            {
              "pattern-not": "$PL = code.compile_command(\"...\",...)\n...\n$X.runcode($PL,...)\n"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "flask.request.form.get(...)"
                        },
                        {
                          "pattern": "flask.request.form[...]"
                        },
                        {
                          "pattern": "flask.request.args.get(...)"
                        },
                        {
                          "pattern": "flask.request.args[...]"
                        },
                        {
                          "pattern": "flask.request.values.get(...)"
                        },
                        {
                          "pattern": "flask.request.values[...]"
                        },
                        {
                          "pattern": "flask.request.cookies.get(...)"
                        },
                        {
                          "pattern": "flask.request.cookies[...]"
                        },
                        {
                          "pattern": "flask.request.stream"
                        },
                        {
                          "pattern": "flask.request.headers.get(...)"
                        },
                        {
                          "pattern": "flask.request.headers[...]"
                        },
                        {
                          "pattern": "flask.request.data"
                        },
                        {
                          "pattern": "flask.request.full_path"
                        },
                        {
                          "pattern": "flask.request.url"
                        },
                        {
                          "pattern": "flask.request.json"
                        },
                        {
                          "pattern": "flask.request.get_json()"
                        },
                        {
                          "pattern": "flask.request.view_args.get(...)"
                        },
                        {
                          "pattern": "flask.request.view_args[...]"
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "@$APP.route(...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n"
                            },
                            {
                              "focus-metavariable": "$ROUTEVAR"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "def $FUNC(request, ...):\n  ...\n"
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "request.$PROPERTY.get(...)"
                        },
                        {
                          "pattern": "request.$PROPERTY[...]"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "@rest_framework.decorators.api_view(...)\ndef $FUNC($REQ, ...):\n  ...\n"
                        },
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern-inside": "class $VIEW(..., rest_framework.views.APIView, ...):\n  ...\n"
                                },
                                {
                                  "pattern-inside": "class $VIEW(..., rest_framework.generics.GenericAPIView, ...):\n  ...                              \n"
                                }
                              ]
                            },
                            {
                              "pattern-inside": "def $METHOD(self, $REQ, ...):\n  ...\n"
                            },
                            {
                              "metavariable-regex": {
                                "metavariable": "$METHOD",
                                "regex": "(get|post|put|patch|delete|head)"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "$REQ.POST.get(...)"
                        },
                        {
                          "pattern": "$REQ.POST[...]"
                        },
                        {
                          "pattern": "$REQ.FILES.get(...)"
                        },
                        {
                          "pattern": "$REQ.FILES[...]"
                        },
                        {
                          "pattern": "$REQ.DATA.get(...)"
                        },
                        {
                          "pattern": "$REQ.DATA[...]"
                        },
                        {
                          "pattern": "$REQ.QUERY_PARAMS.get(...)"
                        },
                        {
                          "pattern": "$REQ.QUERY_PARAMS[...]"
                        },
                        {
                          "pattern": "$REQ.data.get(...)"
                        },
                        {
                          "pattern": "$REQ.data[...]"
                        },
                        {
                          "pattern": "$REQ.query_params.get(...)"
                        },
                        {
                          "pattern": "$REQ.query_params[...]"
                        },
                        {
                          "pattern": "$REQ.content_type"
                        },
                        {
                          "pattern": "$REQ.content_type"
                        },
                        {
                          "pattern": "$REQ.stream"
                        },
                        {
                          "pattern": "$REQ.stream"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "class $SERVER(..., http.server.BaseHTTPRequestHandler, ...):\n  ...\n"
                        },
                        {
                          "pattern-inside": "class $SERVER(..., http.server.StreamRequestHandler, ...):\n  ...\n"
                        },
                        {
                          "pattern-inside": "class $SERVER(..., http.server.DatagramRequestHandler, ...):\n  ...\n"
                        }
                      ]
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "self.requestline"
                        },
                        {
                          "pattern": "self.path"
                        },
                        {
                          "pattern": "self.headers[...]"
                        },
                        {
                          "pattern": "self.headers.get(...)"
                        },
                        {
                          "pattern": "self.rfile"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "@pyramid.view.view_config( ... )\ndef $VIEW($REQ):\n  ...\n"
                    },
                    {
                      "pattern": "$REQ.$ANYTHING"
                    },
                    {
                      "pattern-not": "$REQ.dbsession"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.insecure-hash-algorithm-md5",
      "languages": [
        "python"
      ],
      "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.",
      "metadata": {
        "asvs": {
          "control_id": "6.2.2 Insecure Custom Algorithm",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms",
          "section": "V6 Stored Cryptography Verification Requirements",
          "version": "4"
        },
        "bandit-code": "B303",
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html",
          "https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability",
          "http://2012.sharcs.org/slides/stevens.pdf",
          "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"
        ],
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern": "hashlib.md5(...)"
        },
        {
          "pattern-not": "hashlib.md5(..., usedforsecurity=False, ...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix-regex": {
        "regex": "sha1",
        "replacement": "sha256"
      },
      "id": "vendored-rules.python.lang.security.insecure-hash-algorithm-sha1",
      "languages": [
        "python"
      ],
      "message": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.",
      "metadata": {
        "asvs": {
          "control_id": "6.2.2 Insecure Custom Algorithm",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms",
          "section": "V6 Stored Cryptography Verification Requirements",
          "version": "4"
        },
        "bandit-code": "B303",
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html",
          "https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability",
          "http://2012.sharcs.org/slides/stevens.pdf",
          "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"
        ],
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "pattern": "hashlib.sha1(...)",
      "severity": "WARNING"
    },
    {
      "fix-regex": {
        "regex": "csv",
        "replacement": "defusedcsv"
      },
      "id": "vendored-rules.python.lang.security.use-defusedcsv",
      "languages": [
        "python"
      ],
      "message": "Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-1236: Improper Neutralization of Formula Elements in a CSV File"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://github.com/raphaelm/defusedcsv",
          "https://owasp.org/www-community/attacks/CSV_Injection",
          "https://web.archive.org/web/20220516052229/https://www.contextis.com/us/blog/comma-separated-vulnerabilities"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern": "csv.writer(...)"
        },
        {
          "pattern-not": "defusedcsv.writer(...)"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.dangerous-asyncio-create-exec-audit",
      "languages": [
        "python"
      ],
      "message": "Detected 'create_subprocess_exec' function without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.",
      "metadata": {
        "asvs": {
          "control_id": "5.3.8 OS Command Injection",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.create_subprocess_exec",
          "https://docs.python.org/3/library/shlex.html",
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "pattern-either": [
        {
          "patterns": [
            {
              "pattern-not": "asyncio.create_subprocess_exec($PROG, \"...\", ...)"
            },
            {
              "pattern-not": "asyncio.create_subprocess_exec($PROG, [\"...\",...], ...)"
            },
            {
              "pattern": "asyncio.create_subprocess_exec(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-not": "asyncio.create_subprocess_exec($PROG, \"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", \"...\", ...)"
            },
            {
              "pattern": "asyncio.create_subprocess_exec($PROG, \"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\",...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-not": "asyncio.create_subprocess_exec($PROG, [\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", \"...\", ...], ...)"
            },
            {
              "pattern": "asyncio.create_subprocess_exec($PROG, [\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", ...], ...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-not": "asyncio.subprocess.create_subprocess_exec($PROG, \"...\", ...)"
            },
            {
              "pattern-not": "asyncio.subprocess.create_subprocess_exec($PROG, [\"...\",...], ...)"
            },
            {
              "pattern": "asyncio.subprocess.create_subprocess_exec(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-not": "asyncio.subprocess.create_subprocess_exec($PROG, \"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", \"...\", ...)"
            },
            {
              "pattern": "asyncio.subprocess.create_subprocess_exec($PROG, \"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\",...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-not": "asyncio.subprocess.create_subprocess_exec($PROG, [\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", \"...\", ...], ...)"
            },
            {
              "pattern": "asyncio.subprocess.create_subprocess_exec($PROG, [\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", ...], ...)"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.dangerous-asyncio-create-exec-tainted-env-args",
      "languages": [
        "python"
      ],
      "message": "Detected 'create_subprocess_exec' function with user controlled data. You may consider using 'shlex.escape()'.",
      "metadata": {
        "asvs": {
          "control_id": "5.3.8 OS Command Injection",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.create_subprocess_exec",
          "https://docs.python.org/3/library/shlex.html",
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sinks": [
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern-not": "asyncio.create_subprocess_exec($PROG, \"...\", ...)"
                },
                {
                  "pattern-not": "asyncio.create_subprocess_exec($PROG, [\"...\",...], ...)"
                },
                {
                  "pattern": "asyncio.create_subprocess_exec(...)"
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern-not": "asyncio.create_subprocess_exec($PROG, \"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", \"...\", ...)"
                },
                {
                  "pattern": "asyncio.create_subprocess_exec($PROG, \"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\",...)"
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern-not": "asyncio.create_subprocess_exec($PROG, [\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", \"...\", ...], ...)"
                },
                {
                  "pattern": "asyncio.create_subprocess_exec($PROG, [\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", ...], ...)"
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern-not": "asyncio.subprocess.create_subprocess_exec($PROG, \"...\", ...)"
                },
                {
                  "pattern-not": "asyncio.subprocess.create_subprocess_exec($PROG, [\"...\",...], ...)"
                },
                {
                  "pattern": "asyncio.subprocess.create_subprocess_exec(...)"
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern-not": "asyncio.subprocess.create_subprocess_exec($PROG, \"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", \"...\", ...)"
                },
                {
                  "pattern": "asyncio.subprocess.create_subprocess_exec($PROG, \"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\",...)"
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern-not": "asyncio.subprocess.create_subprocess_exec($PROG, [\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", \"...\", ...], ...)"
                },
                {
                  "pattern": "asyncio.subprocess.create_subprocess_exec($PROG, [\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", ...], ...)"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "os.environ"
                        },
                        {
                          "pattern": "os.environ.get('$FOO', ...)"
                        },
                        {
                          "pattern": "os.environb"
                        },
                        {
                          "pattern": "os.environb.get('$FOO', ...)"
                        },
                        {
                          "pattern": "os.getenv('$ANYTHING', ...)"
                        },
                        {
                          "pattern": "os.getenvb('$ANYTHING', ...)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern": "sys.argv"
                                },
                                {
                                  "pattern": "sys.orig_argv"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "$PARSER = argparse.ArgumentParser(...)\n...\n"
                            },
                            {
                              "pattern-inside": "$ARGS = $PARSER.parse_args()\n"
                            },
                            {
                              "pattern": "<... $ARGS ...>"
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "$PARSER = optparse.OptionParser(...)\n...\n"
                            },
                            {
                              "pattern-inside": "$ARGS = $PARSER.parse_args()\n"
                            },
                            {
                              "pattern": "<... $ARGS ...>"
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern-inside": "$OPTS, $ARGS = getopt.getopt(...)\n...\n"
                                },
                                {
                                  "pattern-inside": "$OPTS, $ARGS = getopt.gnu_getopt(...)\n...\n"
                                }
                              ]
                            },
                            {
                              "pattern-either": [
                                {
                                  "patterns": [
                                    {
                                      "pattern-inside": "for $O, $A in $OPTS:\n  ...\n"
                                    },
                                    {
                                      "pattern": "$A"
                                    }
                                  ]
                                },
                                {
                                  "pattern": "$ARGS"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.dangerous-asyncio-exec-audit",
      "languages": [
        "python"
      ],
      "message": "Detected subprocess function '$LOOP.subprocess_exec' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.",
      "metadata": {
        "asvs": {
          "control_id": "5.3.8 OS Command Injection",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.subprocess_exec",
          "https://docs.python.org/3/library/shlex.html",
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "pattern-either": [
        {
          "patterns": [
            {
              "pattern-not": "$LOOP.subprocess_exec($PROTOCOL, \"...\", ...)"
            },
            {
              "pattern-not": "$LOOP.subprocess_exec($PROTOCOL, [\"...\",...], ...)"
            },
            {
              "pattern": "$LOOP.subprocess_exec(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-not": "$LOOP.subprocess_exec($PROTOCOL, \"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", \"...\", ...)"
            },
            {
              "pattern": "$LOOP.subprocess_exec($PROTOCOL, \"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\",...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-not": "$LOOP.subprocess_exec($PROTOCOL, [\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", \"...\", ...], ...)"
            },
            {
              "pattern": "$LOOP.subprocess_exec($PROTOCOL, [\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", ...], ...)"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.dangerous-asyncio-exec-tainted-env-args",
      "languages": [
        "python"
      ],
      "message": "Detected subprocess function '$LOOP.subprocess_exec' with user controlled data. You may consider using 'shlex.escape()'.",
      "metadata": {
        "asvs": {
          "control_id": "5.3.8 OS Command Injection",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.subprocess_exec",
          "https://docs.python.org/3/library/shlex.html",
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sinks": [
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern-not": "$LOOP.subprocess_exec($PROTOCOL, \"...\", ...)"
                },
                {
                  "pattern-not": "$LOOP.subprocess_exec($PROTOCOL, [\"...\",...], ...)"
                },
                {
                  "pattern": "$LOOP.subprocess_exec(...)"
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern-not": "$LOOP.subprocess_exec($PROTOCOL, \"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", \"...\", ...)"
                },
                {
                  "pattern": "$LOOP.subprocess_exec($PROTOCOL, \"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\",...)"
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern-not": "$LOOP.subprocess_exec($PROTOCOL, [\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", \"...\", ...], ...)"
                },
                {
                  "pattern": "$LOOP.subprocess_exec($PROTOCOL, [\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", ...], ...)"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "os.environ"
                        },
                        {
                          "pattern": "os.environ.get('$FOO', ...)"
                        },
                        {
                          "pattern": "os.environb"
                        },
                        {
                          "pattern": "os.environb.get('$FOO', ...)"
                        },
                        {
                          "pattern": "os.getenv('$ANYTHING', ...)"
                        },
                        {
                          "pattern": "os.getenvb('$ANYTHING', ...)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern": "sys.argv"
                                },
                                {
                                  "pattern": "sys.orig_argv"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "$PARSER = argparse.ArgumentParser(...)\n...\n"
                            },
                            {
                              "pattern-inside": "$ARGS = $PARSER.parse_args()\n"
                            },
                            {
                              "pattern": "<... $ARGS ...>"
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "$PARSER = optparse.OptionParser(...)\n...\n"
                            },
                            {
                              "pattern-inside": "$ARGS = $PARSER.parse_args()\n"
                            },
                            {
                              "pattern": "<... $ARGS ...>"
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern-inside": "$OPTS, $ARGS = getopt.getopt(...)\n...\n"
                                },
                                {
                                  "pattern-inside": "$OPTS, $ARGS = getopt.gnu_getopt(...)\n...\n"
                                }
                              ]
                            },
                            {
                              "pattern-either": [
                                {
                                  "patterns": [
                                    {
                                      "pattern-inside": "for $O, $A in $OPTS:\n  ...\n"
                                    },
                                    {
                                      "pattern": "$A"
                                    }
                                  ]
                                },
                                {
                                  "pattern": "$ARGS"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.dangerous-asyncio-shell-audit",
      "languages": [
        "python"
      ],
      "message": "Detected asyncio subprocess function without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.",
      "metadata": {
        "asvs": {
          "control_id": "5.3.8 OS Command Injection",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.python.org/3/library/asyncio-subprocess.html",
          "https://docs.python.org/3/library/shlex.html",
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "$LOOP.subprocess_shell($PROTOCOL, $CMD)"
            },
            {
              "pattern": "asyncio.subprocess.create_subprocess_shell($CMD, ...)"
            },
            {
              "pattern": "asyncio.create_subprocess_shell($CMD, ...)"
            }
          ]
        },
        {
          "pattern-not-inside": "$CMD = \"...\"\n...\n"
        },
        {
          "pattern-not": "$LOOP.subprocess_shell($PROTOCOL, \"...\")"
        },
        {
          "pattern-not": "asyncio.subprocess.create_subprocess_shell(\"...\", ...)"
        },
        {
          "pattern-not": "asyncio.create_subprocess_shell(\"...\", ...)"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.dangerous-asyncio-shell-tainted-env-args",
      "languages": [
        "python"
      ],
      "message": "Detected asyncio subprocess function with user controlled data. You may consider using 'shlex.escape()'.",
      "metadata": {
        "asvs": {
          "control_id": "5.3.8 OS Command Injection",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.python.org/3/library/asyncio-subprocess.html",
          "https://docs.python.org/3/library/shlex.html",
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "$LOOP.subprocess_shell($PROTOCOL, $CMD)"
                },
                {
                  "pattern-inside": "asyncio.subprocess.create_subprocess_shell($CMD, ...)"
                },
                {
                  "pattern-inside": "asyncio.create_subprocess_shell($CMD, ...)"
                }
              ]
            },
            {
              "focus-metavariable": "$CMD"
            },
            {
              "pattern-not-inside": "$CMD = \"...\"\n...\n"
            },
            {
              "pattern-not": "$LOOP.subprocess_shell($PROTOCOL, \"...\")"
            },
            {
              "pattern-not": "asyncio.subprocess.create_subprocess_shell(\"...\", ...)"
            },
            {
              "pattern-not": "asyncio.create_subprocess_shell(\"...\", ...)"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "os.environ"
                        },
                        {
                          "pattern": "os.environ.get('$FOO', ...)"
                        },
                        {
                          "pattern": "os.environb"
                        },
                        {
                          "pattern": "os.environb.get('$FOO', ...)"
                        },
                        {
                          "pattern": "os.getenv('$ANYTHING', ...)"
                        },
                        {
                          "pattern": "os.getenvb('$ANYTHING', ...)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern": "sys.argv"
                                },
                                {
                                  "pattern": "sys.orig_argv"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "$PARSER = argparse.ArgumentParser(...)\n...\n"
                            },
                            {
                              "pattern-inside": "$ARGS = $PARSER.parse_args()\n"
                            },
                            {
                              "pattern": "<... $ARGS ...>"
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "$PARSER = optparse.OptionParser(...)\n...\n"
                            },
                            {
                              "pattern-inside": "$ARGS = $PARSER.parse_args()\n"
                            },
                            {
                              "pattern": "<... $ARGS ...>"
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern-inside": "$OPTS, $ARGS = getopt.getopt(...)\n...\n"
                                },
                                {
                                  "pattern-inside": "$OPTS, $ARGS = getopt.gnu_getopt(...)\n...\n"
                                }
                              ]
                            },
                            {
                              "pattern-either": [
                                {
                                  "patterns": [
                                    {
                                      "pattern-inside": "for $O, $A in $OPTS:\n  ...\n"
                                    },
                                    {
                                      "pattern": "$A"
                                    }
                                  ]
                                },
                                {
                                  "pattern": "$ARGS"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.dangerous-os-exec-audit",
      "languages": [
        "python"
      ],
      "message": "Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.",
      "metadata": {
        "asvs": {
          "control_id": "5.3.8 OS Command Injection",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "pattern-either": [
        {
          "patterns": [
            {
              "pattern-not": "os.$METHOD(\"...\", ...)"
            },
            {
              "pattern": "os.$METHOD(...)"
            },
            {
              "metavariable-regex": {
                "metavariable": "$METHOD",
                "regex": "(execl|execle|execlp|execlpe|execv|execve|execvp|execvpe)"
              }
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-not": "os.$METHOD(\"...\", [$PATH,\"...\",\"...\",...],...)"
            },
            {
              "pattern": "os.$METHOD($BASH,[$PATH,\"-c\",$CMD,...],...)"
            },
            {
              "metavariable-regex": {
                "metavariable": "$METHOD",
                "regex": "(execv|execve|execvp|execvpe)"
              }
            },
            {
              "metavariable-regex": {
                "metavariable": "$BASH",
                "regex": "(.*)(sh|bash|ksh|csh|tcsh|zsh)"
              }
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-not": "os.$METHOD(\"...\", $PATH, \"...\", \"...\",...)"
            },
            {
              "pattern": "os.$METHOD($BASH, $PATH, \"-c\", $CMD,...)"
            },
            {
              "metavariable-regex": {
                "metavariable": "$METHOD",
                "regex": "(execl|execle|execlp|execlpe)"
              }
            },
            {
              "metavariable-regex": {
                "metavariable": "$BASH",
                "regex": "(.*)(sh|bash|ksh|csh|tcsh|zsh)"
              }
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.dangerous-os-exec-tainted-env-args",
      "languages": [
        "python"
      ],
      "message": "Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands.",
      "metadata": {
        "asvs": {
          "control_id": "5.3.8 OS Command Injection",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-not": "os.$METHOD(\"...\", ...)"
                    },
                    {
                      "pattern": "os.$METHOD(...)"
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "(execl|execle|execlp|execlpe|execv|execve|execvp|execvpe)"
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-not": "os.$METHOD(\"...\", [$PATH,\"...\",\"...\",...],...)"
                    },
                    {
                      "pattern-inside": "os.$METHOD($BASH,[$PATH,\"-c\",$CMD,...],...)"
                    },
                    {
                      "pattern": "$CMD"
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "(execv|execve|execvp|execvpe)"
                      }
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$BASH",
                        "regex": "(.*)(sh|bash|ksh|csh|tcsh|zsh)"
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-not": "os.$METHOD(\"...\", $PATH, \"...\", \"...\",...)"
                    },
                    {
                      "pattern-inside": "os.$METHOD($BASH, $PATH, \"-c\", $CMD,...)"
                    },
                    {
                      "pattern": "$CMD"
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "(execl|execle|execlp|execlpe)"
                      }
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$BASH",
                        "regex": "(.*)(sh|bash|ksh|csh|tcsh|zsh)"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "os.environ"
                        },
                        {
                          "pattern": "os.environ.get('$FOO', ...)"
                        },
                        {
                          "pattern": "os.environb"
                        },
                        {
                          "pattern": "os.environb.get('$FOO', ...)"
                        },
                        {
                          "pattern": "os.getenv('$ANYTHING', ...)"
                        },
                        {
                          "pattern": "os.getenvb('$ANYTHING', ...)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern": "sys.argv"
                                },
                                {
                                  "pattern": "sys.orig_argv"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "$PARSER = argparse.ArgumentParser(...)\n...\n"
                            },
                            {
                              "pattern-inside": "$ARGS = $PARSER.parse_args()\n"
                            },
                            {
                              "pattern": "<... $ARGS ...>"
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "$PARSER = optparse.OptionParser(...)\n...\n"
                            },
                            {
                              "pattern-inside": "$ARGS = $PARSER.parse_args()\n"
                            },
                            {
                              "pattern": "<... $ARGS ...>"
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern-inside": "$OPTS, $ARGS = getopt.getopt(...)\n...\n"
                                },
                                {
                                  "pattern-inside": "$OPTS, $ARGS = getopt.gnu_getopt(...)\n...\n"
                                }
                              ]
                            },
                            {
                              "pattern-either": [
                                {
                                  "patterns": [
                                    {
                                      "pattern-inside": "for $O, $A in $OPTS:\n  ...\n"
                                    },
                                    {
                                      "pattern": "$A"
                                    }
                                  ]
                                },
                                {
                                  "pattern": "$ARGS"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.dangerous-spawn-process-audit",
      "languages": [
        "python"
      ],
      "message": "Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.",
      "metadata": {
        "asvs": {
          "control_id": "5.3.8 OS Command Injection",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "pattern-either": [
        {
          "patterns": [
            {
              "pattern-not": "os.$METHOD($MODE, \"...\", ...)"
            },
            {
              "pattern": "os.$METHOD(...)"
            },
            {
              "metavariable-regex": {
                "metavariable": "$METHOD",
                "regex": "(spawnl|spawnle|spawnlp|spawnlpe|spawnv|spawnve|spawnvp|spawnvp|spawnvpe|posix_spawn|posix_spawnp|startfile)"
              }
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-not": "os.$METHOD($MODE, \"...\", [\"...\",\"...\",...], ...)"
            },
            {
              "pattern": "os.$METHOD($MODE, $BASH, [\"-c\",$CMD,...],...)"
            },
            {
              "metavariable-regex": {
                "metavariable": "$METHOD",
                "regex": "(spawnv|spawnve|spawnvp|spawnvp|spawnvpe|posix_spawn|posix_spawnp)"
              }
            },
            {
              "metavariable-regex": {
                "metavariable": "$BASH",
                "regex": "(.*)(sh|bash|ksh|csh|tcsh|zsh)"
              }
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-not": "os.$METHOD($MODE, \"...\", \"...\", \"...\", ...)"
            },
            {
              "pattern": "os.$METHOD($MODE, $BASH, \"-c\", $CMD,...)"
            },
            {
              "metavariable-regex": {
                "metavariable": "$METHOD",
                "regex": "(spawnl|spawnle|spawnlp|spawnlpe)"
              }
            },
            {
              "metavariable-regex": {
                "metavariable": "$BASH",
                "regex": "(.*)(sh|bash|ksh|csh|tcsh|zsh)"
              }
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.dangerous-spawn-process-tainted-env-args",
      "languages": [
        "python"
      ],
      "message": "Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands.",
      "metadata": {
        "asvs": {
          "control_id": "5.3.8 OS Command Injection",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-not": "os.$METHOD($MODE, \"...\", ...)"
                    },
                    {
                      "pattern-inside": "os.$METHOD($MODE, $CMD, ...)"
                    },
                    {
                      "pattern": "$CMD"
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "(spawnl|spawnle|spawnlp|spawnlpe|spawnv|spawnve|spawnvp|spawnvp|spawnvpe|posix_spawn|posix_spawnp|startfile)"
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-not": "os.$METHOD($MODE, \"...\", [\"...\",\"...\",...], ...)"
                    },
                    {
                      "pattern-inside": "os.$METHOD($MODE, $BASH, [\"-c\",$CMD,...],...)"
                    },
                    {
                      "pattern": "$CMD"
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "(spawnv|spawnve|spawnvp|spawnvp|spawnvpe|posix_spawn|posix_spawnp)"
                      }
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$BASH",
                        "regex": "(.*)(sh|bash|ksh|csh|tcsh|zsh)"
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-not": "os.$METHOD($MODE, \"...\", \"...\", \"...\", ...)"
                    },
                    {
                      "pattern-inside": "os.$METHOD($MODE, $BASH, \"-c\", $CMD,...)"
                    },
                    {
                      "pattern": "$CMD"
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "(spawnl|spawnle|spawnlp|spawnlpe)"
                      }
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$BASH",
                        "regex": "(.*)(sh|bash|ksh|csh|tcsh|zsh)"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "os.environ"
                        },
                        {
                          "pattern": "os.environ.get('$FOO', ...)"
                        },
                        {
                          "pattern": "os.environb"
                        },
                        {
                          "pattern": "os.environb.get('$FOO', ...)"
                        },
                        {
                          "pattern": "os.getenv('$ANYTHING', ...)"
                        },
                        {
                          "pattern": "os.getenvb('$ANYTHING', ...)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern": "sys.argv"
                                },
                                {
                                  "pattern": "sys.orig_argv"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "$PARSER = argparse.ArgumentParser(...)\n...\n"
                            },
                            {
                              "pattern-inside": "$ARGS = $PARSER.parse_args()\n"
                            },
                            {
                              "pattern": "<... $ARGS ...>"
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "$PARSER = optparse.OptionParser(...)\n...\n"
                            },
                            {
                              "pattern-inside": "$ARGS = $PARSER.parse_args()\n"
                            },
                            {
                              "pattern": "<... $ARGS ...>"
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern-inside": "$OPTS, $ARGS = getopt.getopt(...)\n...\n"
                                },
                                {
                                  "pattern-inside": "$OPTS, $ARGS = getopt.gnu_getopt(...)\n...\n"
                                }
                              ]
                            },
                            {
                              "pattern-either": [
                                {
                                  "patterns": [
                                    {
                                      "pattern-inside": "for $O, $A in $OPTS:\n  ...\n"
                                    },
                                    {
                                      "pattern": "$A"
                                    }
                                  ]
                                },
                                {
                                  "pattern": "$ARGS"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.dangerous-subinterpreters-run-string-audit",
      "languages": [
        "python"
      ],
      "message": "Found dynamic content in `run_string`. This is dangerous if external data can reach this function call because it allows a malicious actor to run arbitrary Python code. Ensure no external data reaches here.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
        ],
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://bugs.python.org/issue43472",
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern": "_xxsubinterpreters.run_string($ID, $PAYLOAD, ...)\n"
        },
        {
          "pattern-not": "_xxsubinterpreters.run_string($ID, \"...\", ...)\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.dangerous-subinterpreters-run-string-tainted-env-args",
      "languages": [
        "python"
      ],
      "message": "Found user controlled content in `run_string`. This is dangerous because it allows a malicious actor to run arbitrary Python code.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
        ],
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://bugs.python.org/issue43472",
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-inside": "_xxsubinterpreters.run_string($ID, $PAYLOAD, ...)\n"
            },
            {
              "pattern-not": "_xxsubinterpreters.run_string($ID, \"...\", ...)\n"
            },
            {
              "pattern": "$PAYLOAD"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "os.environ"
                        },
                        {
                          "pattern": "os.environ.get('$FOO', ...)"
                        },
                        {
                          "pattern": "os.environb"
                        },
                        {
                          "pattern": "os.environb.get('$FOO', ...)"
                        },
                        {
                          "pattern": "os.getenv('$ANYTHING', ...)"
                        },
                        {
                          "pattern": "os.getenvb('$ANYTHING', ...)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern": "sys.argv"
                                },
                                {
                                  "pattern": "sys.orig_argv"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "$PARSER = argparse.ArgumentParser(...)\n...\n"
                            },
                            {
                              "pattern-inside": "$ARGS = $PARSER.parse_args()\n"
                            },
                            {
                              "pattern": "<... $ARGS ...>"
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "$PARSER = optparse.OptionParser(...)\n...\n"
                            },
                            {
                              "pattern-inside": "$ARGS = $PARSER.parse_args()\n"
                            },
                            {
                              "pattern": "<... $ARGS ...>"
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern-inside": "$OPTS, $ARGS = getopt.getopt(...)\n...\n"
                                },
                                {
                                  "pattern-inside": "$OPTS, $ARGS = getopt.gnu_getopt(...)\n...\n"
                                }
                              ]
                            },
                            {
                              "pattern-either": [
                                {
                                  "patterns": [
                                    {
                                      "pattern-inside": "for $O, $A in $OPTS:\n  ...\n"
                                    },
                                    {
                                      "pattern": "$A"
                                    }
                                  ]
                                },
                                {
                                  "pattern": "$ARGS"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit",
      "languages": [
        "python"
      ],
      "message": "Detected subprocess function '$FUNC' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.",
      "metadata": {
        "asvs": {
          "control_id": "5.3.8 OS Command Injection",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess",
          "https://docs.python.org/3/library/subprocess.html",
          "https://docs.python.org/3/library/shlex.html",
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "pattern-either": [
        {
          "patterns": [
            {
              "pattern-not": "subprocess.$FUNC(\"...\", ...)"
            },
            {
              "pattern-not": "subprocess.$FUNC([\"...\",...], ...)"
            },
            {
              "pattern-not": "subprocess.$FUNC((\"...\",...), ...)"
            },
            {
              "pattern-not": {
                "patterns": [
                  {
                    "pattern-not-inside": "$ARR = [\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", ...]\n...\n"
                  },
                  {
                    "pattern-inside": "$ARR = [...]\n...\n"
                  },
                  {
                    "pattern-either": [
                      {
                        "pattern": "subprocess.$FUNC(*$ARR, ...)"
                      },
                      {
                        "pattern": "subprocess.$FUNC([*$ARR, ...])"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "pattern-not": "subprocess.CalledProcessError(...)"
            },
            {
              "pattern-not": "subprocess.SubprocessError(...)"
            },
            {
              "pattern": "subprocess.$FUNC(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern": "subprocess.$FUNC(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",...)"
            },
            {
              "pattern-not": "subprocess.$FUNC(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",\"...\",...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "subprocess.$FUNC([\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",...],...)"
                },
                {
                  "pattern": "subprocess.$FUNC((\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",...),...)"
                }
              ]
            },
            {
              "pattern-not": "subprocess.$FUNC([\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",\"...\",...],...)"
            },
            {
              "pattern-not": "subprocess.$FUNC((\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",\"...\",...),...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern": "subprocess.$FUNC(\"=~/(python)/\",...)"
            },
            {
              "pattern-not": "subprocess.$FUNC(\"=~/(python)/\",\"...\",...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "subprocess.$FUNC([\"=~/(python)/\",...],...)"
                },
                {
                  "pattern": "subprocess.$FUNC((\"=~/(python)/\",...),...)"
                }
              ]
            },
            {
              "pattern-not": "subprocess.$FUNC([\"=~/(python)/\",\"...\",...],...)"
            },
            {
              "pattern-not": "subprocess.$FUNC((\"=~/(python)/\",\"...\",...),...)"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.dangerous-subprocess-use-tainted-env-args",
      "languages": [
        "python"
      ],
      "message": "Detected subprocess function '$FUNC' with user controlled data. A malicious actor could leverage this to perform command injection. You may consider using 'shlex.quote()'.",
      "metadata": {
        "asvs": {
          "control_id": "5.3.8 OS Command Injection",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess",
          "https://docs.python.org/3/library/subprocess.html",
          "https://docs.python.org/3/library/shlex.html",
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sanitizers": [
        {
          "pattern": "shlex.quote(...)"
        }
      ],
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-not": "subprocess.$FUNC(\"...\", ...)"
                    },
                    {
                      "pattern-not": "subprocess.$FUNC([\"...\",...], ...)"
                    },
                    {
                      "pattern-not": "subprocess.$FUNC((\"...\",...), ...)"
                    },
                    {
                      "pattern-not": "subprocess.CalledProcessError(...)"
                    },
                    {
                      "pattern-not": "subprocess.SubprocessError(...)"
                    },
                    {
                      "pattern": "subprocess.$FUNC($CMD, ...)"
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-not": "subprocess.$FUNC(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",\"...\",...)"
                    },
                    {
                      "pattern": "subprocess.$FUNC(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\", $CMD)"
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-not": "subprocess.$FUNC([\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",\"...\",...],...)"
                    },
                    {
                      "pattern-not": "subprocess.$FUNC((\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",\"...\",...),...)"
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "subprocess.$FUNC([\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\", $CMD], ...)"
                        },
                        {
                          "pattern": "subprocess.$FUNC((\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\", $CMD), ...)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-not": "subprocess.$FUNC(\"=~/(python)/\",\"...\",...)"
                    },
                    {
                      "pattern": "subprocess.$FUNC(\"=~/(python)/\", $CMD)"
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-not": "subprocess.$FUNC([\"=~/(python)/\",\"...\",...],...)"
                    },
                    {
                      "pattern-not": "subprocess.$FUNC((\"=~/(python)/\",\"...\",...),...)"
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "subprocess.$FUNC([\"=~/(python)/\", $CMD],...)"
                        },
                        {
                          "pattern": "subprocess.$FUNC((\"=~/(python)/\", $CMD),...)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "focus-metavariable": "$CMD"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "os.environ"
                        },
                        {
                          "pattern": "os.environ.get('$FOO', ...)"
                        },
                        {
                          "pattern": "os.environb"
                        },
                        {
                          "pattern": "os.environb.get('$FOO', ...)"
                        },
                        {
                          "pattern": "os.getenv('$ANYTHING', ...)"
                        },
                        {
                          "pattern": "os.getenvb('$ANYTHING', ...)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern": "sys.argv"
                                },
                                {
                                  "pattern": "sys.orig_argv"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "$PARSER = argparse.ArgumentParser(...)\n...\n"
                            },
                            {
                              "pattern-inside": "$ARGS = $PARSER.parse_args()\n"
                            },
                            {
                              "pattern": "<... $ARGS ...>"
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "$PARSER = optparse.OptionParser(...)\n...\n"
                            },
                            {
                              "pattern-inside": "$ARGS = $PARSER.parse_args()\n"
                            },
                            {
                              "pattern": "<... $ARGS ...>"
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern-inside": "$OPTS, $ARGS = getopt.getopt(...)\n...\n"
                                },
                                {
                                  "pattern-inside": "$OPTS, $ARGS = getopt.gnu_getopt(...)\n...\n"
                                }
                              ]
                            },
                            {
                              "pattern-either": [
                                {
                                  "patterns": [
                                    {
                                      "pattern-inside": "for $O, $A in $OPTS:\n  ...\n"
                                    },
                                    {
                                      "pattern": "$A"
                                    }
                                  ]
                                },
                                {
                                  "pattern": "$ARGS"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.dangerous-system-call-audit",
      "languages": [
        "python"
      ],
      "message": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.",
      "metadata": {
        "asvs": {
          "control_id": "5.2.4 Dyanmic Code Execution Features",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern-not": "os.$W(\"...\", ...)"
        },
        {
          "pattern-either": [
            {
              "pattern": "os.system(...)"
            },
            {
              "pattern": "getattr(os, \"system\")(...)"
            },
            {
              "pattern": "__import__(\"os\").system(...)"
            },
            {
              "pattern": "getattr(__import__(\"os\"), \"system\")(...)"
            },
            {
              "pattern": "$X = __import__(\"os\")\n...\n$X.system(...)\n"
            },
            {
              "pattern": "$X = __import__(\"os\")\n...\ngetattr($X, \"system\")(...)\n"
            },
            {
              "pattern": "$X = getattr(os, \"system\")\n...\n$X(...)\n"
            },
            {
              "pattern": "$X = __import__(\"os\")\n...\n$Y = getattr($X, \"system\")\n...\n$Y(...)\n"
            },
            {
              "pattern": "os.popen(...)"
            },
            {
              "pattern": "os.popen2(...)"
            },
            {
              "pattern": "os.popen3(...)"
            },
            {
              "pattern": "os.popen4(...)"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.dangerous-system-call-tainted-env-args",
      "languages": [
        "python"
      ],
      "message": "Found user-controlled data used in a system call. This could allow a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.",
      "metadata": {
        "asvs": {
          "control_id": "5.2.4 Dyanmic Code Execution Features",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-not": "os.$W(\"...\", ...)"
            },
            {
              "pattern-either": [
                {
                  "pattern": "os.system(...)"
                },
                {
                  "pattern": "$X = __import__(\"os\")\n...\n$X.system(...)\n"
                },
                {
                  "pattern": "$X = __import__(\"os\")\n...\ngetattr($X, \"system\")(...)\n"
                },
                {
                  "pattern": "$X = getattr(os, \"system\")\n...\n$X(...)\n"
                },
                {
                  "pattern": "$X = __import__(\"os\")\n...\n$Y = getattr($X, \"system\")\n...\n$Y(...)\n"
                },
                {
                  "pattern": "os.popen(...)"
                },
                {
                  "pattern": "os.popen2(...)"
                },
                {
                  "pattern": "os.popen3(...)"
                },
                {
                  "pattern": "os.popen4(...)"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "os.environ"
                        },
                        {
                          "pattern": "os.environ.get('$FOO', ...)"
                        },
                        {
                          "pattern": "os.environb"
                        },
                        {
                          "pattern": "os.environb.get('$FOO', ...)"
                        },
                        {
                          "pattern": "os.getenv('$ANYTHING', ...)"
                        },
                        {
                          "pattern": "os.getenvb('$ANYTHING', ...)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern": "sys.argv"
                                },
                                {
                                  "pattern": "sys.orig_argv"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "$PARSER = argparse.ArgumentParser(...)\n...\n"
                            },
                            {
                              "pattern-inside": "$ARGS = $PARSER.parse_args()\n"
                            },
                            {
                              "pattern": "<... $ARGS ...>"
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "$PARSER = optparse.OptionParser(...)\n...\n"
                            },
                            {
                              "pattern-inside": "$ARGS = $PARSER.parse_args()\n"
                            },
                            {
                              "pattern": "<... $ARGS ...>"
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern-inside": "$OPTS, $ARGS = getopt.getopt(...)\n...\n"
                                },
                                {
                                  "pattern-inside": "$OPTS, $ARGS = getopt.gnu_getopt(...)\n...\n"
                                }
                              ]
                            },
                            {
                              "pattern-either": [
                                {
                                  "patterns": [
                                    {
                                      "pattern-inside": "for $O, $A in $OPTS:\n  ...\n"
                                    },
                                    {
                                      "pattern": "$A"
                                    }
                                  ]
                                },
                                {
                                  "pattern": "$ARGS"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.dangerous-testcapi-run-in-subinterp-audit",
      "languages": [
        "python"
      ],
      "message": "Found dynamic content in `run_in_subinterp`. This is dangerous if external data can reach this function call because it allows a malicious actor to run arbitrary Python code. Ensure no external data reaches here.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
        ],
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "_testcapi.run_in_subinterp($PAYLOAD, ...)\n"
            },
            {
              "pattern": "test.support.run_in_subinterp($PAYLOAD, ...)\n"
            }
          ]
        },
        {
          "pattern-not": "_testcapi.run_in_subinterp(\"...\", ...)\n"
        },
        {
          "pattern-not": "test.support.run_in_subinterp(\"...\", ...)\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.dangerous-testcapi-run-in-subinterp-tainted-env-args",
      "languages": [
        "python"
      ],
      "message": "Found user controlled content in `run_in_subinterp`. This is dangerous because it allows a malicious actor to run arbitrary Python code.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
        ],
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "_testcapi.run_in_subinterp($PAYLOAD, ...)\n"
                },
                {
                  "pattern-inside": "test.support.run_in_subinterp($PAYLOAD, ...)\n"
                }
              ]
            },
            {
              "pattern": "$PAYLOAD"
            },
            {
              "pattern-not": "_testcapi.run_in_subinterp(\"...\", ...)\n"
            },
            {
              "pattern-not": "test.support.run_in_subinterp(\"...\", ...)\n"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "os.environ"
                        },
                        {
                          "pattern": "os.environ.get('$FOO', ...)"
                        },
                        {
                          "pattern": "os.environb"
                        },
                        {
                          "pattern": "os.environb.get('$FOO', ...)"
                        },
                        {
                          "pattern": "os.getenv('$ANYTHING', ...)"
                        },
                        {
                          "pattern": "os.getenvb('$ANYTHING', ...)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern": "sys.argv"
                                },
                                {
                                  "pattern": "sys.orig_argv"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "$PARSER = argparse.ArgumentParser(...)\n...\n"
                            },
                            {
                              "pattern-inside": "$ARGS = $PARSER.parse_args()\n"
                            },
                            {
                              "pattern": "<... $ARGS ...>"
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "$PARSER = optparse.OptionParser(...)\n...\n"
                            },
                            {
                              "pattern-inside": "$ARGS = $PARSER.parse_args()\n"
                            },
                            {
                              "pattern": "<... $ARGS ...>"
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern-inside": "$OPTS, $ARGS = getopt.getopt(...)\n...\n"
                                },
                                {
                                  "pattern-inside": "$OPTS, $ARGS = getopt.gnu_getopt(...)\n...\n"
                                }
                              ]
                            },
                            {
                              "pattern-either": [
                                {
                                  "patterns": [
                                    {
                                      "pattern-inside": "for $O, $A in $OPTS:\n  ...\n"
                                    },
                                    {
                                      "pattern": "$A"
                                    }
                                  ]
                                },
                                {
                                  "pattern": "$ARGS"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.dynamic-urllib-use-detected",
      "languages": [
        "python"
      ],
      "message": "Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.",
      "metadata": {
        "asvs": {
          "control_id": "5.2.4 Dynamic Code Execution Features",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "bandit-code": "B310",
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-939: Improper Authorization in Handler for Custom URL Scheme"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": "A01:2017 - Injection",
        "references": [
          "https://cwe.mitre.org/data/definitions/939.html"
        ],
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/blacklists/calls.py#L163",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern-not": "urllib.$W(\"...\")"
        },
        {
          "pattern-not": "urllib.request.$W(\"...\")"
        },
        {
          "pattern-not": "$OPENER.$W(\"...\")"
        },
        {
          "pattern-either": [
            {
              "pattern": "urllib.urlopen(...)"
            },
            {
              "pattern": "urllib.request.urlopen(...)"
            },
            {
              "pattern": "urllib.urlretrieve(...)"
            },
            {
              "pattern": "urllib.request.urlretrieve(...)"
            },
            {
              "patterns": [
                {
                  "pattern-either": [
                    {
                      "pattern-inside": "$OPENER = urllib.URLopener(...)\n...\n"
                    },
                    {
                      "pattern-inside": "$OPENER = urllib.request.URLopener(...)\n...\n"
                    },
                    {
                      "pattern-inside": "$OPENER = urllib.FancyURLopener(...)\n...\n"
                    },
                    {
                      "pattern-inside": "$OPENER = urllib.request.FancyURLopener(...)\n...\n"
                    }
                  ]
                },
                {
                  "pattern-either": [
                    {
                      "pattern": "$OPENER.open(...)"
                    },
                    {
                      "pattern": "$OPENER.retrieve(...)"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.eval-detected",
      "languages": [
        "python"
      ],
      "message": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.",
      "metadata": {
        "asvs": {
          "control_id": "5.2.4 Dyanmic Code Execution Features",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
        ],
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "source-rule-url": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b307-eval",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern-not": "eval(f\"\")"
        },
        {
          "pattern-not": "eval(\"...\")"
        },
        {
          "pattern": "eval(...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.exec-detected",
      "languages": [
        "python"
      ],
      "message": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.",
      "metadata": {
        "asvs": {
          "control_id": "5.2.4 Dyanmic Code Execution Features",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
        ],
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b102_exec_used.html",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern-not": "exec(\"...\")"
        },
        {
          "pattern": "exec(...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.formatted-sql-query",
      "languages": [
        "python"
      ],
      "message": "Detected possible formatted SQL query. Use parameterized queries instead.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://stackoverflow.com/questions/775296/mysql-parameterized-queries"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "pattern-either": [
        {
          "pattern": "$DB.execute(\"...\" % ...)"
        },
        {
          "pattern": "$DB.execute(\"...\".format(...))"
        },
        {
          "pattern": "$DB.execute(f\"...\")"
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "$SQL = \"...\" % ...\n...\n"
                },
                {
                  "pattern-inside": "$SQL = \"...\".format(...)\n...\n"
                },
                {
                  "pattern-inside": "$SQL = f\"...{$X}...\"\n...\n"
                }
              ]
            },
            {
              "pattern": "$DB.execute($SQL)"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.hardcoded-password-default-argument",
      "languages": [
        "python"
      ],
      "message": "Hardcoded password is used as a default argument to '$FUNC'. This could be dangerous if a real password is not supplied.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern": "def $FUNC(..., password=\"...\", ...):\n  ...\n"
        },
        {
          "pattern-not": "def $FUNC(..., password=\"\", ...):\n  ...\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.httpsconnection-detected",
      "languages": [
        "python"
      ],
      "message": "The HTTPSConnection API has changed frequently with minor releases of Python. Ensure you are using the API for your version of Python securely. For example, Python 3 versions prior to 3.4.3 will not verify SSL certificates by default. See https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection for more information.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-295: Improper Certificate Validation"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "pattern-either": [
        {
          "pattern": "httplib.HTTPSConnection(...)"
        },
        {
          "pattern": "http.client.HTTPSConnection(...)"
        },
        {
          "pattern": "six.moves.http_client.HTTPSConnection(...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.insecure-file-permissions",
      "languages": [
        "python"
      ],
      "message": "These permissions `$BITS` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-276: Incorrect Default Permissions"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "os.$METHOD(...)"
        },
        {
          "metavariable-pattern": {
            "metavariable": "$METHOD",
            "patterns": [
              {
                "pattern-either": [
                  {
                    "pattern": "chmod"
                  },
                  {
                    "pattern": "lchmod"
                  },
                  {
                    "pattern": "fchmod"
                  }
                ]
              }
            ]
          }
        },
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern": "os.$METHOD($FILE, $BITS, ...)"
                },
                {
                  "metavariable-comparison": {
                    "comparison": "$BITS >= 0o650 and $BITS < 0o100000",
                    "metavariable": "$BITS"
                  }
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern": "os.$METHOD($FILE, $BITS)"
                },
                {
                  "metavariable-comparison": {
                    "comparison": "$BITS >= 0o100650",
                    "metavariable": "$BITS"
                  }
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern": "os.$METHOD($FILE, $BITS, ...)"
                },
                {
                  "metavariable-pattern": {
                    "metavariable": "$BITS",
                    "patterns": [
                      {
                        "pattern-either": [
                          {
                            "pattern": "<... stat.S_IWGRP ...>"
                          },
                          {
                            "pattern": "<... stat.S_IXGRP ...>"
                          },
                          {
                            "pattern": "<... stat.S_IWOTH ...>"
                          },
                          {
                            "pattern": "<... stat.S_IXOTH ...>"
                          },
                          {
                            "pattern": "<... stat.S_IRWXO ...>"
                          },
                          {
                            "pattern": "<... stat.S_IRWXG ...>"
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern": "os.$METHOD($FILE, $EXPR | $MOD, ...)"
                },
                {
                  "metavariable-comparison": {
                    "comparison": "$MOD == 0o111",
                    "metavariable": "$MOD"
                  }
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.md5-used-as-password",
      "languages": [
        "python"
      ],
      "message": "It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as scrypt. You can use `hashlib.scrypt`.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "LOW",
        "likelihood": "HIGH",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://tools.ietf.org/html/rfc6151",
          "https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision",
          "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html",
          "https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords",
          "https://github.com/returntocorp/semgrep-rules/issues/1609",
          "https://docs.python.org/3/library/hashlib.html#hashlib.scrypt"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pycryptodome",
          "hashlib",
          "md5"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern": "$FUNCTION(...)"
            },
            {
              "metavariable-regex": {
                "metavariable": "$FUNCTION",
                "regex": "(?i)(.*password.*)"
              }
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "hashlib.md5"
                },
                {
                  "pattern": "hashlib.new(..., name=\"MD5\", ...)"
                },
                {
                  "pattern": "Cryptodome.Hash.MD5"
                },
                {
                  "pattern": "Crypto.Hash.MD5"
                },
                {
                  "pattern": "cryptography.hazmat.primitives.hashes.MD5"
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.non-literal-import",
      "languages": [
        "python"
      ],
      "message": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-706: Use of Incorrectly-Resolved Name or Reference"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern": "importlib.import_module($NAME, ...)\n"
        },
        {
          "pattern-not": "importlib.import_module(\"...\", ...)\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.paramiko-implicit-trust-host-key",
      "languages": [
        "python"
      ],
      "message": "Detected a paramiko host key policy that implicitly trusts a server's host key. Host keys should be verified to ensure the connection is not to a malicious server. Use RejectPolicy or a custom subclass instead.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-322: Key Exchange without Entity Authentication"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "http://docs.paramiko.org/en/stable/api/client.html#paramiko.client.AutoAddPolicy"
        ],
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/ssh_no_host_key_verification.py",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "paramiko"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "$CLIENT = paramiko.client.SSHClient(...)\n...\n$CLIENT.set_missing_host_key_policy(...)\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "paramiko.client.AutoAddPolicy"
            },
            {
              "pattern": "paramiko.client.WarningPolicy"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.python-reverse-shell",
      "languages": [
        "python"
      ],
      "message": "Semgrep found a Python reverse shell using $BINPATH to $IP at $PORT",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-553: Command Shell in Externally Accessible Directory"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "references": [
          "https://cwe.mitre.org/data/definitions/553.html"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "pty.spawn(\"$BINPATH\",...)"
            },
            {
              "pattern": "subprocess.call([\"$BINPATH\",...],...)"
            }
          ]
        },
        {
          "metavariable-regex": {
            "metavariable": "$BINPATH",
            "regex": "/bin/.*?sh\\b"
          }
        },
        {
          "pattern-inside": "import socket\n...\n$S = socket.socket(...)\n...\n$S.connect(($IP,$PORT),...)\n...\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.ssl-wrap-socket-is-deprecated",
      "languages": [
        "python"
      ],
      "message": "'ssl.wrap_socket()' is deprecated. This function creates an insecure socket without server name indication or hostname matching. Instead, create an SSL context using 'ssl.SSLContext()' and use that to wrap a socket.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-326: Inadequate Encryption Strength"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/ssl.html#ssl.wrap_socket",
          "https://docs.python.org/3/library/ssl.html#ssl.SSLContext.wrap_socket"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "pattern": "ssl.wrap_socket(...)",
      "severity": "WARNING"
    },
    {
      "fix": "False\n",
      "id": "vendored-rules.python.lang.security.audit.subprocess-shell-true",
      "languages": [
        "python"
      ],
      "message": "Found 'subprocess' function '$FUNC' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess",
          "https://docs.python.org/3/library/subprocess.html"
        ],
        "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b602_subprocess_popen_with_shell_equals_true.html",
        "subcategory": [
          "secure default"
        ],
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern": "subprocess.$FUNC(..., shell=$TRUE, ...)"
        },
        {
          "metavariable-pattern": {
            "metavariable": "$TRUE",
            "pattern": "True \n"
          }
        },
        {
          "pattern-not": "subprocess.$FUNC(\"...\", shell=True, ...)"
        },
        {
          "focus-metavariable": "$TRUE"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.system-wildcard-detected",
      "languages": [
        "python"
      ],
      "message": "Detected use of the wildcard character in a system call that spawns a shell. This subjects the wildcard to normal shell expansion, which can have unintended consequences if there exist any non-standard file names. Consider a file named '-e sh script.sh' -- this will execute a script when 'rsync' is called. See https://www.defensecode.com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt for more information.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-155: Improper Neutralization of Wildcards or Matching Symbols"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": "A01:2017 - Injection",
        "references": [
          "https://www.defensecode.com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt"
        ],
        "source-url-open": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/injection_wildcard.py",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern-inside": "os.system(\"...\")"
            },
            {
              "pattern-inside": "os.popen(\"...\")"
            },
            {
              "pattern-inside": "os.popen2(\"...\")"
            },
            {
              "pattern-inside": "os.popen3(\"...\")"
            },
            {
              "pattern-inside": "os.popen4(\"...\")"
            },
            {
              "pattern-inside": "subprocess.$W(..., shell=True, ...)"
            }
          ]
        },
        {
          "pattern-regex": "(tar|chmod|chown|rsync)(.*?)\\*"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.telnetlib",
      "languages": [
        "python"
      ],
      "message": "Telnet does not encrypt communications. Use SSH instead.",
      "metadata": {
        "bandit-code": "B312",
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-319: Cleartext Transmission of Sensitive Information"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/telnetlib.html"
        ],
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L208",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "pattern": "telnetlib.$ANYTHING(...)",
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.weak-ssl-version",
      "languages": [
        "python"
      ],
      "message": "An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use 'ssl.PROTOCOL_TLSv1_2' or higher.",
      "metadata": {
        "asvs": {
          "control_id": "9.1.3 Weak TLS",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v91-client-communications-security-requirements",
          "section": "V9 Communications Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-326: Inadequate Encryption Strength"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://tools.ietf.org/html/rfc7568",
          "https://tools.ietf.org/id/draft-ietf-tls-oldversions-deprecate-02.html",
          "https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLSv1_2"
        ],
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/insecure_ssl_tls.py#L30",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "pattern-either": [
        {
          "pattern": "ssl.PROTOCOL_SSLv2"
        },
        {
          "pattern": "ssl.PROTOCOL_SSLv3"
        },
        {
          "pattern": "ssl.PROTOCOL_TLSv1"
        },
        {
          "pattern": "ssl.PROTOCOL_TLSv1_1"
        },
        {
          "pattern": "pyOpenSSL.SSL.SSLv2_METHOD"
        },
        {
          "pattern": "pyOpenSSL.SSL.SSLv23_METHOD"
        },
        {
          "pattern": "pyOpenSSL.SSL.SSLv3_METHOD"
        },
        {
          "pattern": "pyOpenSSL.SSL.TLSv1_METHOD"
        },
        {
          "pattern": "pyOpenSSL.SSL.TLSv1_1_METHOD"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.multiprocessing-recv",
      "languages": [
        "python"
      ],
      "message": "The Connection.recv() method automatically unpickles the data it receives, which can be a security risk unless you can trust the process which sent the message. Therefore, unless the connection object was produced using Pipe() you should only use the recv() and send() methods after performing some sort of authentication. See more dettails: https://docs.python.org/3/library/multiprocessing.html?highlight=security#multiprocessing.connection.Connection",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-502: Deserialization of Untrusted Data"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A08:2017 - Insecure Deserialization",
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/multiprocessing.html?highlight=security#multiprocessing.connection.Connection"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "pattern-either": [
        {
          "pattern": "multiprocessing.connection.Connection.recv(...)"
        },
        {
          "pattern": "multiprocessing.connection.Client.recv(...)"
        },
        {
          "pattern": "$C = multiprocessing.connection.Client(...)\n...\n$C.recv(...)\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.dangerous-annotations-usage",
      "languages": [
        "python"
      ],
      "message": "Annotations passed to `typing.get_type_hints` are evaluated in `globals` and `locals` namespaces. Make sure that no arbitrary value can be written as the annotation and passed to `typing.get_type_hints` function.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.python.org/3/library/typing.html#typing.get_type_hints"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern": "$C.__annotations__[$NAME] = $X\n"
        },
        {
          "pattern-not": "$C.__annotations__[$NAME] = \"...\"\n"
        },
        {
          "pattern-not": "$C.__annotations__[$NAME] = typing.$Y\n"
        },
        {
          "metavariable-regex": {
            "metavariable": "$X",
            "regex": "(?!(int|float|complex|list|tuple|range|str|bytes|bytearray|memoryview|set|frozenset|dict))"
          }
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.dangerous-interactive-code-run-audit",
      "languages": [
        "python"
      ],
      "message": "Found dynamic content inside InteractiveConsole/InteractiveInterpreter method. This is dangerous if external data can reach this function call because it allows a malicious actor to run arbitrary Python code. Ensure no external data reaches here.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
        ],
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "$X.push($PAYLOAD,...)\n"
            },
            {
              "pattern": "$X.runsource($PAYLOAD,...)\n"
            },
            {
              "pattern": "$X.runcode(code.compile_command($PAYLOAD),...)\n"
            },
            {
              "pattern": "$PL = code.compile_command($PAYLOAD,...)\n...\n$X.runcode($PL,...)\n"
            }
          ]
        },
        {
          "pattern-either": [
            {
              "pattern-inside": "$X = code.InteractiveConsole(...)\n...\n"
            },
            {
              "pattern-inside": "$X = code.InteractiveInterpreter(...)\n...\n"
            }
          ]
        },
        {
          "pattern-not": "$X.push(\"...\",...)\n"
        },
        {
          "pattern-not": "$X.runsource(\"...\",...)\n"
        },
        {
          "pattern-not": "$X.runcode(code.compile_command(\"...\"),...)\n"
        },
        {
          "pattern-not": "$PL = code.compile_command(\"...\",...)\n...\n$X.runcode($PL,...)\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.dangerous-interactive-code-run-tainted-env-args",
      "languages": [
        "python"
      ],
      "message": "Found user controlled data inside InteractiveConsole/InteractiveInterpreter method. This is dangerous if external data can reach this function call because it allows a malicious actor to run arbitrary Python code.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
        ],
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "$X = code.InteractiveConsole(...)\n...\n"
                },
                {
                  "pattern-inside": "$X = code.InteractiveInterpreter(...)\n...\n"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "$X.push($PAYLOAD,...)\n"
                },
                {
                  "pattern-inside": "$X.runsource($PAYLOAD,...)\n"
                },
                {
                  "pattern-inside": "$X.runcode(code.compile_command($PAYLOAD),...)\n"
                },
                {
                  "pattern-inside": "$PL = code.compile_command($PAYLOAD,...)\n...\n$X.runcode($PL,...)\n"
                }
              ]
            },
            {
              "pattern": "$PAYLOAD"
            },
            {
              "pattern-not": "$X.push(\"...\",...)\n"
            },
            {
              "pattern-not": "$X.runsource(\"...\",...)\n"
            },
            {
              "pattern-not": "$X.runcode(code.compile_command(\"...\"),...)\n"
            },
            {
              "pattern-not": "$PL = code.compile_command(\"...\",...)\n...\n$X.runcode($PL,...)\n"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "os.environ"
                        },
                        {
                          "pattern": "os.environ.get('$FOO', ...)"
                        },
                        {
                          "pattern": "os.environb"
                        },
                        {
                          "pattern": "os.environb.get('$FOO', ...)"
                        },
                        {
                          "pattern": "os.getenv('$ANYTHING', ...)"
                        },
                        {
                          "pattern": "os.getenvb('$ANYTHING', ...)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern": "sys.argv"
                                },
                                {
                                  "pattern": "sys.orig_argv"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "$PARSER = argparse.ArgumentParser(...)\n...\n"
                            },
                            {
                              "pattern-inside": "$ARGS = $PARSER.parse_args()\n"
                            },
                            {
                              "pattern": "<... $ARGS ...>"
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "$PARSER = optparse.OptionParser(...)\n...\n"
                            },
                            {
                              "pattern-inside": "$ARGS = $PARSER.parse_args()\n"
                            },
                            {
                              "pattern": "<... $ARGS ...>"
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern-inside": "$OPTS, $ARGS = getopt.getopt(...)\n...\n"
                                },
                                {
                                  "pattern-inside": "$OPTS, $ARGS = getopt.gnu_getopt(...)\n...\n"
                                }
                              ]
                            },
                            {
                              "pattern-either": [
                                {
                                  "patterns": [
                                    {
                                      "pattern-inside": "for $O, $A in $OPTS:\n  ...\n"
                                    },
                                    {
                                      "pattern": "$A"
                                    }
                                  ]
                                },
                                {
                                  "pattern": "$ARGS"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.mako-templates-detected",
      "languages": [
        "python"
      ],
      "message": "Mako templates do not provide a global HTML escaping mechanism. This means you must escape all sensitive data in your templates using '| u' for URL escaping or '| h' for HTML escaping. If you are using Mako to serve web content, consider using a system such as Jinja2 which enables global escaping.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.makotemplates.org/en/latest/syntax.html#expression-escaping",
          "https://jinja.palletsprojects.com/en/2.11.x/intro/#"
        ],
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/mako_templates.py",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "mako"
        ]
      },
      "pattern": "mako.template.Template(...)",
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.marshal-usage",
      "languages": [
        "python"
      ],
      "message": "The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-502: Deserialization of Untrusted Data"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A08:2017 - Insecure Deserialization",
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/marshal.html?highlight=security"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "pattern-either": [
        {
          "pattern": "marshal.dump(...)"
        },
        {
          "pattern": "marshal.dumps(...)"
        },
        {
          "pattern": "marshal.load(...)"
        },
        {
          "pattern": "marshal.loads(...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.regex_dos",
      "languages": [
        "python"
      ],
      "message": "Detected usage of re.compile with an inefficient regular expression. This can lead to regular expression denial of service, which can result in service down time. Instead, check all regexes or use safer alternatives such as pyre2.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": "CWE-1333: Inefficient Regular Expression Complexity",
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": "A06:2017 - Security Misconfiguration",
        "references": [
          "https://docs.python.org/3/library/re.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern": "$A = re.compile(\"$B\", ...)\n...\n$A.$METHOD(...)\n"
        },
        {
          "metavariable-analysis": {
            "analyzer": "redos",
            "metavariable": "$B"
          }
        },
        {
          "metavariable-regex": {
            "metavariable": "$METHOD",
            "regex": "(?!(escape)|(purge))"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix-regex": {
        "regex": "FTP(.*)\\)",
        "replacement": "FTP_TLS\\1, context=ssl.create_default_context())"
      },
      "id": "vendored-rules.python.lang.security.audit.insecure-transport.ftplib.use-ftp-tls",
      "languages": [
        "python"
      ],
      "message": "The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-319: Cleartext Transmission of Sensitive Information"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/ftplib.html#ftplib.FTP_TLS"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "ftplib"
        ]
      },
      "patterns": [
        {
          "pattern": "ftplib.FTP(...)"
        },
        {
          "pattern-not": "ftplib.FTP_TLS(...)"
        }
      ],
      "severity": "INFO"
    },
    {
      "fix-regex": {
        "count": 1,
        "regex": "[Hh][Tt][Tt][Pp]://",
        "replacement": "https://"
      },
      "id": "vendored-rules.python.lang.security.audit.insecure-transport.requests.request-session-http-in-with-context",
      "languages": [
        "python"
      ],
      "message": "Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.",
      "metadata": {
        "asvs": {
          "control_id": "9.2.1 Weak TLS",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v92-server-communications-security-requirements",
          "section": "V9 Communications Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-319: Cleartext Transmission of Sensitive Information"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A02_2021-Cryptographic_Failures"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "requests"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-inside": "with requests.Session(...) as $SESSION:\n  ...\n"
            },
            {
              "pattern-either": [
                {
                  "pattern": "$SESSION.$W($SINK, ...)"
                },
                {
                  "pattern": "$SESSION.request($METHOD, $SINK, ...)"
                }
              ]
            },
            {
              "focus-metavariable": "$SINK"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "\"$URL\"\n"
            },
            {
              "metavariable-pattern": {
                "language": "regex",
                "metavariable": "$URL",
                "patterns": [
                  {
                    "pattern-regex": "http://"
                  },
                  {
                    "pattern-not-regex": ".*://localhost"
                  },
                  {
                    "pattern-not-regex": ".*://127\\.0\\.0\\.1"
                  }
                ]
              }
            }
          ]
        }
      ],
      "severity": "INFO"
    },
    {
      "fix-regex": {
        "count": 1,
        "regex": "[Hh][Tt][Tt][Pp]://",
        "replacement": "https://"
      },
      "id": "vendored-rules.python.lang.security.audit.insecure-transport.requests.request-session-with-http",
      "languages": [
        "python"
      ],
      "message": "Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.",
      "metadata": {
        "asvs": {
          "control_id": "9.1.1 Weak TLS",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v92-server-communications-security-requirements",
          "section": "V9 Communications Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-319: Cleartext Transmission of Sensitive Information"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A02_2021-Cryptographic_Failures"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "requests"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "requests.Session(...).$W($SINK, ...)"
                },
                {
                  "pattern": "requests.Session(...).request($METHOD, $SINK, ...)"
                }
              ]
            },
            {
              "focus-metavariable": "$SINK"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "\"$URL\"\n"
            },
            {
              "metavariable-pattern": {
                "language": "regex",
                "metavariable": "$URL",
                "patterns": [
                  {
                    "pattern-regex": "http://"
                  },
                  {
                    "pattern-not-regex": ".*://localhost"
                  },
                  {
                    "pattern-not-regex": ".*://127\\.0\\.0\\.1"
                  }
                ]
              }
            }
          ]
        }
      ],
      "severity": "INFO"
    },
    {
      "fix-regex": {
        "count": 1,
        "regex": "[Hh][Tt][Tt][Pp]://",
        "replacement": "https://"
      },
      "id": "vendored-rules.python.lang.security.audit.insecure-transport.requests.request-with-http",
      "languages": [
        "python"
      ],
      "message": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead.",
      "metadata": {
        "asvs": {
          "control_id": "9.1.1 Weak TLS",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v92-server-communications-security-requirements",
          "section": "V9 Communications Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-319: Cleartext Transmission of Sensitive Information"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A02_2021-Cryptographic_Failures"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "requests"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "requests.$W($SINK, ...)"
                },
                {
                  "pattern": "requests.request($METHOD, $SINK, ...)"
                },
                {
                  "pattern": "requests.Request($METHOD, $SINK, ...)"
                }
              ]
            },
            {
              "focus-metavariable": "$SINK"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "\"$URL\"\n"
            },
            {
              "metavariable-pattern": {
                "language": "regex",
                "metavariable": "$URL",
                "patterns": [
                  {
                    "pattern-regex": "http://"
                  },
                  {
                    "pattern-not-regex": ".*://localhost"
                  },
                  {
                    "pattern-not-regex": ".*://127\\.0\\.0\\.1"
                  }
                ]
              }
            }
          ]
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.insecure-transport.ssl.no-set-ciphers",
      "languages": [
        "python"
      ],
      "message": "The 'ssl' module disables insecure cipher suites by default. Therefore, use of 'set_ciphers()' should only be used when you have very specialized requirements. Otherwise, you risk lowering the security of the SSL channel.",
      "metadata": {
        "asvs": {
          "control_id": "9.1.3 Weak TLS",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v91-client-communications-security-requirements",
          "section": "V9 Communications Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-326: Inadequate Encryption Strength"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/ssl.html#cipher-selection",
          "https://docs.python.org/3/library/ssl.html#ssl.SSLContext.set_ciphers"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "ssl"
        ]
      },
      "pattern": "$CONTEXT.set_ciphers(...)",
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.insecure-transport.urllib.insecure-openerdirector-open-ftp",
      "languages": [
        "python"
      ],
      "message": "Detected an unsecured transmission channel. 'OpenerDirector.open(...)' is being used with 'ftp://'. Information sent over this connection will be unencrypted. Consider using SFTP instead. urllib does not support SFTP, so consider a library which supports SFTP.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-319: Cleartext Transmission of Sensitive Information"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/urllib.request.html#urllib.request.OpenerDirector.open"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "urllib"
        ]
      },
      "pattern-either": [
        {
          "pattern": "urllib.request.OpenerDirector(...).open(\"=~/^[Ff][Tt][Pp]://.*/\", ...)"
        },
        {
          "patterns": [
            {
              "pattern-inside": "$OPENERDIRECTOR = urllib.request.OpenerDirector(...)\n...\n"
            },
            {
              "pattern": "$OPENERDIRECTOR.open(\"=~/^[Ff][Tt][Pp]://.*/\", ...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$OPENERDIRECTOR = urllib.request.OpenerDirector(...)\n...\n"
            },
            {
              "pattern": "$URL = \"=~/^[Ff][Tt][Pp]://.*/\"\n...\n$OPENERDIRECTOR.open($URL, ...)\n"
            }
          ]
        },
        {
          "pattern": "$URL = \"=~/^[Ff][Tt][Pp]://.*/\"\n...\nurllib.request.OpenerDirector(...).open($URL, ...)\n"
        },
        {
          "patterns": [
            {
              "pattern-inside": "def $FUNC(..., $URL = \"=~/^[Ff][Tt][Pp]://.*/\", ...):\n  ...\n"
            },
            {
              "pattern-either": [
                {
                  "pattern": "urllib.request.OpenerDirector(...).open($URL, ...)"
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "$OPENERDIRECTOR = urllib.request.OpenerDirector(...)\n...\n"
                    },
                    {
                      "pattern": "$OPENERDIRECTOR.open($URL, ...)"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix-regex": {
        "count": 1,
        "regex": "[Hh][Tt][Tt][Pp]://",
        "replacement": "https://"
      },
      "id": "vendored-rules.python.lang.security.audit.insecure-transport.urllib.insecure-openerdirector-open",
      "languages": [
        "python"
      ],
      "message": "Detected an unsecured transmission channel. 'OpenerDirector.open(...)' is being used with 'http://'. Use 'https://' instead to secure the channel.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-319: Cleartext Transmission of Sensitive Information"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/urllib.request.html#urllib.request.OpenerDirector.open"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "urllib"
        ]
      },
      "pattern-either": [
        {
          "pattern": "urllib.request.OpenerDirector(...).open(\"=~/[Hh][Tt][Tt][Pp]://.*/\", ...)"
        },
        {
          "patterns": [
            {
              "pattern-inside": "$OPENERDIRECTOR = urllib.request.OpenerDirector(...)\n...\n"
            },
            {
              "pattern": "$OPENERDIRECTOR.open(\"=~/[Hh][Tt][Tt][Pp]://.*/\", ...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$OPENERDIRECTOR = urllib.request.OpenerDirector(...)\n...\n"
            },
            {
              "pattern": "$URL = \"=~/[Hh][Tt][Tt][Pp]://.*/\"\n...\n$OPENERDIRECTOR.open($URL, ...)\n"
            }
          ]
        },
        {
          "pattern": "$URL = \"=~/[Hh][Tt][Tt][Pp]://.*/\"\n...\nurllib.request.OpenerDirector(...).open($URL, ...)\n"
        },
        {
          "patterns": [
            {
              "pattern-inside": "def $FUNC(..., $URL = \"=~/[Hh][Tt][Tt][Pp]://.*/\", ...):\n  ...\n"
            },
            {
              "pattern-either": [
                {
                  "pattern": "urllib.request.OpenerDirector(...).open($URL, ...)"
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "$OPENERDIRECTOR = urllib.request.OpenerDirector(...)\n...\n"
                    },
                    {
                      "pattern": "$OPENERDIRECTOR.open($URL, ...)"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.insecure-transport.urllib.insecure-request-object-ftp",
      "languages": [
        "python"
      ],
      "message": "Detected a 'urllib.request.Request()' object using an insecure transport protocol, 'ftp://'. This connection will not be encrypted. Consider using SFTP instead. urllib does not support SFTP natively, so consider using a library which supports SFTP.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-319: Cleartext Transmission of Sensitive Information"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/urllib.request.html#urllib.request.Request"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "urllib"
        ]
      },
      "pattern-either": [
        {
          "pattern": "urllib.request.Request(\"=~/^[Ff][Tt][Pp]://.*/\", ...)"
        },
        {
          "pattern": "$URL = \"=~/^[Ff][Tt][Pp]://.*/\"\n...\nurllib.request.Request($URL, ...)\n"
        },
        {
          "pattern": "def $FUNC(..., $URL = \"=~/^[Ff][Tt][Pp]://.*/\", ...):\n  ...\n  urllib.request.Request($URL, ...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix-regex": {
        "count": 1,
        "regex": "[Hh][Tt][Tt][Pp]://",
        "replacement": "https://"
      },
      "id": "vendored-rules.python.lang.security.audit.insecure-transport.urllib.insecure-request-object",
      "languages": [
        "python"
      ],
      "message": "Detected a 'urllib.request.Request()' object using an insecure transport protocol, 'http://'. This connection will not be encrypted. Use 'https://' instead.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-319: Cleartext Transmission of Sensitive Information"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/urllib.request.html#urllib.request.Request"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "urllib"
        ]
      },
      "pattern-either": [
        {
          "pattern": "urllib.request.Request(\"=~/[Hh][Tt][Tt][Pp]://.*/\", ...)"
        },
        {
          "pattern": "$URL = \"=~/[Hh][Tt][Tt][Pp]://.*/\"\n...\nurllib.request.Request($URL, ...)\n"
        },
        {
          "pattern": "def $FUNC(..., $URL = \"=~/[Hh][Tt][Tt][Pp]://.*/\", ...):\n  ...\n  urllib.request.Request($URL, ...)\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.insecure-transport.urllib.insecure-urlopen-ftp",
      "languages": [
        "python"
      ],
      "message": "Detected 'urllib.urlopen()' using 'ftp://'. This request will not be encrypted. Consider using SFTP instead. urllib does not support SFTP, so consider switching to a library which supports SFTP.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-319: Cleartext Transmission of Sensitive Information"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/urllib.request.html#urllib.request.urlopen"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "urllib"
        ]
      },
      "pattern-either": [
        {
          "pattern": "urllib.request.urlopen(\"=~/^[Ff][Tt][Pp]://.*/\", ...)"
        },
        {
          "pattern": "$URL = \"=~/^[Ff][Tt][Pp]://.*/\"\n...\nurllib.request.urlopen($URL, ...)\n"
        },
        {
          "pattern": "def $FUNC(..., $URL = \"=~/^[Ff][Tt][Pp]://.*/\", ...):\n  ...\n  urllib.request.urlopen($URL, ...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix-regex": {
        "regex": "[Hh][Tt][Tt][Pp]://",
        "replacement": "https://"
      },
      "id": "vendored-rules.python.lang.security.audit.insecure-transport.urllib.insecure-urlopen",
      "languages": [
        "python"
      ],
      "message": "Detected 'urllib.urlopen()' using 'http://'. This request will not be encrypted. Use 'https://' instead.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-319: Cleartext Transmission of Sensitive Information"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/urllib.request.html#urllib.request.urlopen"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "urllib"
        ]
      },
      "pattern-either": [
        {
          "pattern": "urllib.request.urlopen(\"=~/[Hh][Tt][Tt][Pp]://.*/\", ...)"
        },
        {
          "pattern": "$URL = \"=~/[Hh][Tt][Tt][Pp]://.*/\"\n...\nurllib.request.urlopen($URL, ...)\n"
        },
        {
          "pattern": "def $FUNC(..., $URL = \"=~/[Hh][Tt][Tt][Pp]://.*/\", ...):\n  ...\n  urllib.request.urlopen($URL, ...)\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.insecure-transport.urllib.insecure-urlopener-open-ftp",
      "languages": [
        "python"
      ],
      "message": "Detected an insecure transmission channel. 'URLopener.open(...)' is being used with 'ftp://'. Use SFTP instead. urllib does not support SFTP, so consider using a library which supports SFTP.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-319: Cleartext Transmission of Sensitive Information"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener.open"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "urllib"
        ]
      },
      "pattern-either": [
        {
          "pattern": "urllib.request.URLopener(...).open(\"=~/[Ff][Tt][Pp]://.*/\", ...)"
        },
        {
          "patterns": [
            {
              "pattern-inside": "$OPENERDIRECTOR = urllib.request.URLopener(...)\n...\n"
            },
            {
              "pattern": "$OPENERDIRECTOR.open(\"=~/[Ff][Tt][Pp]://.*/\", ...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$OPENERDIRECTOR = urllib.request.URLopener(...)\n...\n"
            },
            {
              "pattern": "$URL = \"=~/[Ff][Tt][Pp]://.*/\"\n...\n$OPENERDIRECTOR.open($URL, ...)\n"
            }
          ]
        },
        {
          "pattern": "$URL = \"=~/[Ff][Tt][Pp]://.*/\"\n...\nurllib.request.URLopener(...).open($URL, ...)\n"
        },
        {
          "patterns": [
            {
              "pattern-inside": "def $FUNC(..., $URL = \"=~/[Ff][Tt][Pp]://.*/\", ...):\n  ...\n"
            },
            {
              "pattern-either": [
                {
                  "pattern": "urllib.request.URLopener(...).open($URL, ...)"
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "$OPENERDIRECTOR = urllib.request.URLopener(...)\n...\n"
                    },
                    {
                      "pattern": "$OPENERDIRECTOR.open($URL, ...)"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix-regex": {
        "count": 1,
        "regex": "[Hh][Tt][Tt][Pp]://",
        "replacement": "https://"
      },
      "id": "vendored-rules.python.lang.security.audit.insecure-transport.urllib.insecure-urlopener-open",
      "languages": [
        "python"
      ],
      "message": "Detected an unsecured transmission channel. 'URLopener.open(...)' is being used with 'http://'. Use 'https://' instead to secure the channel.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-319: Cleartext Transmission of Sensitive Information"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener.open"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "urllib"
        ]
      },
      "pattern-either": [
        {
          "pattern": "urllib.request.URLopener(...).open(\"=~/[Hh][Tt][Tt][Pp]://.*/\", ...)"
        },
        {
          "patterns": [
            {
              "pattern-inside": "$OPENERDIRECTOR = urllib.request.URLopener(...)\n...\n"
            },
            {
              "pattern": "$OPENERDIRECTOR.open(\"=~/[Hh][Tt][Tt][Pp]://.*/\", ...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$OPENERDIRECTOR = urllib.request.URLopener(...)\n...\n"
            },
            {
              "pattern": "$URL = \"=~/[Hh][Tt][Tt][Pp]://.*/\"\n...\n$OPENERDIRECTOR.open($URL, ...)\n"
            }
          ]
        },
        {
          "pattern": "$URL = \"=~/[Hh][Tt][Tt][Pp]://.*/\"\n...\nurllib.request.URLopener(...).open($URL, ...)\n"
        },
        {
          "patterns": [
            {
              "pattern-inside": "def $FUNC(..., $URL = \"=~/[Hh][Tt][Tt][Pp]://.*/\", ...):\n  ...\n"
            },
            {
              "pattern-either": [
                {
                  "pattern": "urllib.request.URLopener(...).open($URL, ...)"
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "$OPENERDIRECTOR = urllib.request.URLopener(...)\n...\n"
                    },
                    {
                      "pattern": "$OPENERDIRECTOR.open($URL, ...)"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.insecure-transport.urllib.insecure-urlopener-retrieve-ftp",
      "languages": [
        "python"
      ],
      "message": "Detected an insecure transmission channel. 'URLopener.retrieve(...)' is being used with 'ftp://'. Use SFTP instead. urllib does not support SFTP, so consider using a library which supports SFTP.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-319: Cleartext Transmission of Sensitive Information"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener.retrieve"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "urllib"
        ]
      },
      "pattern-either": [
        {
          "pattern": "urllib.request.URLopener(...).retrieve(\"=~/[Ff][Tt][Pp]://.*/\", ...)"
        },
        {
          "patterns": [
            {
              "pattern-inside": "$OPENERDIRECTOR = urllib.request.URLopener(...)\n...\n"
            },
            {
              "pattern": "$OPENERDIRECTOR.retrieve(\"=~/[Ff][Tt][Pp]://.*/\", ...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$OPENERDIRECTOR = urllib.request.URLopener(...)\n...\n"
            },
            {
              "pattern": "$URL = \"=~/[Ff][Tt][Pp]://.*/\"\n...\n$OPENERDIRECTOR.retrieve($URL, ...)\n"
            }
          ]
        },
        {
          "pattern": "$URL = \"=~/[Ff][Tt][Pp]://.*/\"\n...\nurllib.request.URLopener(...).retrieve($URL, ...)\n"
        },
        {
          "patterns": [
            {
              "pattern-inside": "def $FUNC(..., $URL = \"=~/[Ff][Tt][Pp]://.*/\", ...):\n  ...\n"
            },
            {
              "pattern-either": [
                {
                  "pattern": "urllib.request.URLopener(...).retrieve($URL, ...)"
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "$OPENERDIRECTOR = urllib.request.URLopener(...)\n...\n"
                    },
                    {
                      "pattern": "$OPENERDIRECTOR.retrieve($URL, ...)"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix-regex": {
        "count": 1,
        "regex": "[Hh][Tt][Tt][Pp]://",
        "replacement": "https://"
      },
      "id": "vendored-rules.python.lang.security.audit.insecure-transport.urllib.insecure-urlopener-retrieve",
      "languages": [
        "python"
      ],
      "message": "Detected an unsecured transmission channel. 'URLopener.retrieve(...)' is being used with 'http://'. Use 'https://' instead to secure the channel.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-319: Cleartext Transmission of Sensitive Information"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener.retrieve"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "urllib"
        ]
      },
      "pattern-either": [
        {
          "pattern": "urllib.request.URLopener(...).retrieve(\"=~/[Hh][Tt][Tt][Pp]://.*/\", ...)"
        },
        {
          "patterns": [
            {
              "pattern-inside": "$OPENERDIRECTOR = urllib.request.URLopener(...)\n...\n"
            },
            {
              "pattern": "$OPENERDIRECTOR.retrieve(\"=~/[Hh][Tt][Tt][Pp]://.*/\", ...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$OPENERDIRECTOR = urllib.request.URLopener(...)\n...\n"
            },
            {
              "pattern": "$URL = \"=~/[Hh][Tt][Tt][Pp]://.*/\"\n...\n$OPENERDIRECTOR.retrieve($URL, ...)\n"
            }
          ]
        },
        {
          "pattern": "$URL = \"=~/[Hh][Tt][Tt][Pp]://.*/\"\n...\nurllib.request.URLopener(...).retrieve($URL, ...)\n"
        },
        {
          "patterns": [
            {
              "pattern-inside": "def $FUNC(..., $URL = \"=~/[Hh][Tt][Tt][Pp]://.*/\", ...):\n  ...\n"
            },
            {
              "pattern-either": [
                {
                  "pattern": "urllib.request.URLopener(...).retrieve($URL, ...)"
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "$OPENERDIRECTOR = urllib.request.URLopener(...)\n...\n"
                    },
                    {
                      "pattern": "$OPENERDIRECTOR.retrieve($URL, ...)"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.insecure-transport.urllib.insecure-urlretrieve-ftp",
      "languages": [
        "python"
      ],
      "message": "Detected 'urllib.urlretrieve()' using 'ftp://'. This request will not be encrypted. Use SFTP instead. urllib does not support SFTP, so consider switching to a library which supports SFTP.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-319: Cleartext Transmission of Sensitive Information"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/urllib.request.html#urllib.request.urlretrieve"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "urllib"
        ]
      },
      "pattern-either": [
        {
          "pattern": "urllib.request.urlretrieve(\"=~/^[Ff][Tt][Pp]://.*/\", ...)"
        },
        {
          "pattern": "$URL = \"=~/^[Ff][Tt][Pp]://.*/\"\n...\nurllib.request.urlretrieve($URL, ...)\n"
        },
        {
          "pattern": "def $FUNC(..., $URL = \"=~/^[Ff][Tt][Pp]://.*/\", ...):\n  ...\n  urllib.request.urlretrieve($URL, ...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix-regex": {
        "regex": "[Hh][Tt][Tt][Pp]://",
        "replacement": "https://"
      },
      "id": "vendored-rules.python.lang.security.audit.insecure-transport.urllib.insecure-urlretrieve",
      "languages": [
        "python"
      ],
      "message": "Detected 'urllib.urlretrieve()' using 'http://'. This request will not be encrypted. Use 'https://' instead.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-319: Cleartext Transmission of Sensitive Information"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/urllib.request.html#urllib.request.urlretrieve"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "urllib"
        ]
      },
      "pattern-either": [
        {
          "pattern": "urllib.request.urlretrieve(\"=~/[Hh][Tt][Tt][Pp]://.*/\", ...)"
        },
        {
          "pattern": "$URL = \"=~/[Hh][Tt][Tt][Pp]://.*/\"\n...\nurllib.request.urlretrieve($URL, ...)\n"
        },
        {
          "pattern": "def $FUNC(..., $URL = \"=~/[Hh][Tt][Tt][Pp]://.*/\", ...):\n  ...\n  urllib.request.urlretrieve($URL, ...)\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.logging.listen-eval",
      "languages": [
        "python"
      ],
      "message": "Because portions of the logging configuration are passed through eval(), use of this function may open its users to a security risk. While the function only binds to a socket on localhost, and so does not accept connections from remote machines, there are scenarios where untrusted code could be run under the account of the process which calls listen(). To avoid this happening, use the `verify()` argument to `listen()` to prevent unrecognized configurations.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.python.org/3/library/logging.config.html?highlight=security#logging.config.listen"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "pattern": "logging.config.listen(...)",
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.logging.python-logger-credential-disclosure",
      "languages": [
        "python"
      ],
      "message": "Detected a python logger call with a potential hardcoded secret $FORMAT_STRING being logged. This may lead to secret credentials being exposed. Make sure that the logger is not logging  sensitive information.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-532: Insertion of Sensitive Information into Log File"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A09:2021 - Security Logging and Monitoring Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern": "$LOGGER_OBJ.$LOGGER_CALL($FORMAT_STRING,...)\n"
        },
        {
          "metavariable-regex": {
            "metavariable": "$LOGGER_OBJ",
            "regex": "(?i)(_logger|logger|self.logger|log)"
          }
        },
        {
          "metavariable-regex": {
            "metavariable": "$LOGGER_CALL",
            "regex": "(debug|info|warn|warning|error|exception|critical)"
          }
        },
        {
          "metavariable-regex": {
            "metavariable": "$FORMAT_STRING",
            "regex": "(?i).*(api.key|secret|credential|token|password).*\\%s.*"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.network.disabled-cert-validation",
      "languages": [
        "python"
      ],
      "message": "certificate verification explicitly disabled, insecure connections possible",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-295: Improper Certificate Validation"
        ],
        "impact": "MEDIUM",
        "likelihood": "HIGH",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "urllib3.PoolManager(..., cert_reqs=$REQS, ...)"
            },
            {
              "pattern": "urllib3.ProxyManager(..., cert_reqs=$REQS, ...)"
            },
            {
              "pattern": "urllib3.HTTPSConnectionPool(..., cert_reqs=$REQS, ...)"
            },
            {
              "pattern": "urllib3.connectionpool.HTTPSConnectionPool(..., cert_reqs=$REQS, ...)"
            },
            {
              "pattern": "urllib3.connection_from_url(..., cert_reqs=$REQS, ...)"
            },
            {
              "pattern": "urllib3.proxy_from_url(..., cert_reqs=$REQS, ...)"
            },
            {
              "pattern": "$CONTEXT.wrap_socket(..., cert_reqs=$REQS, ...)"
            },
            {
              "pattern": "ssl.wrap_socket(..., cert_reqs=$REQS, ...)"
            }
          ]
        },
        {
          "metavariable-regex": {
            "metavariable": "$REQS",
            "regex": "(NONE|CERT_NONE|CERT_OPTIONAL|ssl\\.CERT_NONE|ssl\\.CERT_OPTIONAL|\\'NONE\\'|\\\"NONE\\\"|\\'OPTIONAL\\'|\\\"OPTIONAL\\\")"
          }
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.network.http-not-https-connection",
      "languages": [
        "python"
      ],
      "message": "Detected HTTPConnectionPool. This will transmit data in cleartext. It is recommended to use HTTPSConnectionPool instead for to encrypt communications.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-319: Cleartext Transmission of Sensitive Information"
        ],
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://urllib3.readthedocs.io/en/1.2.1/pools.html#urllib3.connectionpool.HTTPSConnectionPool"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "pattern-either": [
        {
          "pattern": "urllib3.HTTPConnectionPool(...)"
        },
        {
          "pattern": "urllib3.connectionpool.HTTPConnectionPool(...)"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.network.avoid-bind-to-all-interfaces",
      "languages": [
        "python"
      ],
      "message": "Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file.",
      "metadata": {
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor"
        ],
        "cwe2021-top25": true,
        "impact": "MEDIUM",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "pattern-either": [
        {
          "pattern": "$S = socket.socket(...)\n...\n$S.bind((\"0.0.0.0\", ...))\n"
        },
        {
          "pattern": "$S = socket.socket(...)\n...\n$S.bind((\"::\", ...))\n"
        },
        {
          "pattern": "$S = socket.socket(...)\n...\n$S.bind((\"\", ...))\n"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.paramiko.paramiko-exec-command",
      "languages": [
        "python"
      ],
      "message": "Unverified SSL context detected. This will permit insecure connections without verifying SSL certificates. Use 'ssl.create_default_context()' instead.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "http://docs.paramiko.org/en/stable/api/client.html#paramiko.client.SSHClient.exec_command",
          "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/plugins/injection_paramiko.py"
        ],
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/plugins/injection_paramiko.py",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "paramiko"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "$CLIENT = paramiko.client.SSHClient(...)\n...\n"
        },
        {
          "pattern": "$CLIENT.exec_command(...)"
        },
        {
          "pattern-not": "$CLIENT.exec_command(\"...\", ...)"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.sqli.aiopg-sqli",
      "languages": [
        "python"
      ],
      "message": "Detected string concatenation with a non-literal variable in an aiopg Python SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries instead. You can create parameterized queries like so: 'cur.execute(\"SELECT %s FROM table\", (user_value,))'.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://github.com/aio-libs/aiopg"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "aiopg"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern": "$CUR.$METHOD(...,$QUERY,...)"
                },
                {
                  "pattern-either": [
                    {
                      "pattern-inside": "$QUERY = $X + $Y\n...\n"
                    },
                    {
                      "pattern-inside": "$QUERY += $X\n...\n"
                    },
                    {
                      "pattern-inside": "$QUERY = '...'.format(...)\n...\n"
                    },
                    {
                      "pattern-inside": "$QUERY = '...' % (...)\n...\n"
                    },
                    {
                      "pattern-inside": "$QUERY = f'...{$USERINPUT}...'\n...\n"
                    }
                  ]
                },
                {
                  "pattern-not-inside": "$QUERY += \"...\"\n...\n"
                },
                {
                  "pattern-not-inside": "$QUERY = \"...\" + \"...\"\n...\n"
                },
                {
                  "pattern-not-inside": "$QUERY = '...'.format()\n...\n"
                },
                {
                  "pattern-not-inside": "$QUERY = '...' % ()\n...\n"
                }
              ]
            },
            {
              "pattern": "$CUR.$METHOD(..., $X + $Y, ...)"
            },
            {
              "pattern": "$CUR.$METHOD(..., '...'.format(...), ...)"
            },
            {
              "pattern": "$CUR.$METHOD(..., '...' % (...), ...)"
            },
            {
              "pattern": "$CUR.$METHOD(..., f'...{$USERINPUT}...', ...)"
            }
          ]
        },
        {
          "pattern-either": [
            {
              "pattern-inside": "$CONN = await aiopg.connect(...)\n...\n$CUR = await $CONN.cursor(...)\n...\n"
            },
            {
              "pattern-inside": "$POOL = await aiopg.create_pool(...)\n...\nasync with $POOL.acquire(...) as $CONN:\n  ...\n  async with $CONN.cursor(...) as $CUR:\n    ...\n"
            },
            {
              "pattern-inside": "$POOL = await aiopg.create_pool(...)\n...\nwith (await $POOL.cursor(...)) as $CUR:\n  ...\n"
            },
            {
              "pattern-inside": "$POOL = await aiopg.create_pool(...)\n...\nasync with $POOL as $CONN:\n  ...\n  $CUR = await $CONN.cursor(...)\n  ...\n"
            },
            {
              "pattern-inside": "$POOL = await aiopg.create_pool(...)\n...\nasync with $POOL.cursor(...) as $CUR:\n  ...\n"
            }
          ]
        },
        {
          "pattern-not": "$CUR.$METHOD(..., \"...\" + \"...\", ...)"
        },
        {
          "pattern-not": "$CUR.$METHOD(..., '...'.format(), ...)"
        },
        {
          "pattern-not": "$CUR.$METHOD(..., '...'%(), ...)"
        },
        {
          "metavariable-regex": {
            "metavariable": "$METHOD",
            "regex": "^(execute)$"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.sqli.asyncpg-sqli",
      "languages": [
        "python"
      ],
      "message": "Detected string concatenation with a non-literal variable in a asyncpg Python SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can create parameterized queries like so: 'conn.fetch(\"SELECT $1 FROM table\", value)'. You can also create prepared statements with 'Connection.prepare': 'stmt = conn.prepare(\"SELECT $1 FROM table\"); await stmt.fetch(user_value)'",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://github.com/MagicStack/asyncpg",
          "https://magicstack.github.io/asyncpg/current/"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "asyncpg"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern": "$CONN.$METHOD(...,$QUERY,...)"
                },
                {
                  "pattern-either": [
                    {
                      "pattern-inside": "$QUERY = $X + $Y\n...\n"
                    },
                    {
                      "pattern-inside": "$QUERY += $X\n...\n"
                    },
                    {
                      "pattern-inside": "$QUERY = '...'.format(...)\n...\n"
                    },
                    {
                      "pattern-inside": "$QUERY = '...' % (...)\n...\n"
                    },
                    {
                      "pattern-inside": "$QUERY = f'...{$USERINPUT}...'\n...\n"
                    }
                  ]
                },
                {
                  "pattern-not-inside": "$QUERY += \"...\"\n...\n"
                },
                {
                  "pattern-not-inside": "$QUERY = \"...\" + \"...\"\n...\n"
                },
                {
                  "pattern-not-inside": "$QUERY = '...'.format()\n...\n"
                },
                {
                  "pattern-not-inside": "$QUERY = '...' % ()\n...\n"
                }
              ]
            },
            {
              "pattern": "$CONN.$METHOD(..., $X + $Y, ...)"
            },
            {
              "pattern": "$CONN.$METHOD(..., $Y.format(...), ...)"
            },
            {
              "pattern": "$CONN.$METHOD(..., '...'.format(...), ...)"
            },
            {
              "pattern": "$CONN.$METHOD(..., '...' % (...), ...)"
            },
            {
              "pattern": "$CONN.$METHOD(..., f'...{$USERINPUT}...', ...)"
            }
          ]
        },
        {
          "pattern-either": [
            {
              "pattern-inside": "$CONN = await asyncpg.connect(...)\n...\n"
            },
            {
              "pattern-inside": "async with asyncpg.create_pool(...) as $CONN:\n    ...\n"
            },
            {
              "pattern-inside": "async with $POOL.acquire(...) as $CONN:\n    ...\n"
            },
            {
              "pattern-inside": "$CONN = await $POOL.acquire(...)\n...\n"
            },
            {
              "pattern-inside": "def $FUNCNAME(..., $CONN: Connection, ...):\n    ...\n"
            },
            {
              "pattern-inside": "def $FUNCNAME(..., $CONN: asyncpg.Connection, ...):\n    ...\n"
            }
          ]
        },
        {
          "pattern-not": "$CONN.$METHOD(..., \"...\" + \"...\", ...)"
        },
        {
          "pattern-not": "$CONN.$METHOD(..., '...'.format(), ...)"
        },
        {
          "pattern-not": "$CONN.$METHOD(..., '...'%(), ...)"
        },
        {
          "metavariable-regex": {
            "metavariable": "$METHOD",
            "regex": "^(fetch|fetchrow|fetchval|execute|executemany|prepare|cursor|copyfromquery)$"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.sqli.pg8000-sqli",
      "languages": [
        "python"
      ],
      "message": "Detected string concatenation with a non-literal variable in a pg8000 Python SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can create parameterized queries like so: 'conn.run(\"SELECT :value FROM table\", value=myvalue)'. You can also create prepared statements with 'conn.prepare': 'conn.prepare(\"SELECT (:v) FROM table\")'",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://github.com/tlocke/pg8000"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "pg8000"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern": "$CONN.$METHOD(...,$QUERY,...)"
                },
                {
                  "pattern-either": [
                    {
                      "pattern-inside": "$QUERY = $X + $Y\n...\n"
                    },
                    {
                      "pattern-inside": "$QUERY += $X\n...\n"
                    },
                    {
                      "pattern-inside": "$QUERY = '...'.format(...)\n...\n"
                    },
                    {
                      "pattern-inside": "$QUERY = '...' % (...)\n...\n"
                    },
                    {
                      "pattern-inside": "$QUERY = f'...{$USERINPUT}...'\n...\n"
                    }
                  ]
                },
                {
                  "pattern-not-inside": "$QUERY += \"...\"\n...\n"
                },
                {
                  "pattern-not-inside": "$QUERY = \"...\" + \"...\"\n...\n"
                },
                {
                  "pattern-not-inside": "$QUERY = '...'.format()\n...\n"
                },
                {
                  "pattern-not-inside": "$QUERY = '...' % ()\n...\n"
                }
              ]
            },
            {
              "pattern": "$CONN.$METHOD(..., $X + $Y, ...)"
            },
            {
              "pattern": "$CONN.$METHOD(..., '...'.format(...), ...)"
            },
            {
              "pattern": "$CONN.$METHOD(..., '...' % (...), ...)"
            },
            {
              "pattern": "$CONN.$METHOD(..., f'...{$USERINPUT}...', ...)"
            }
          ]
        },
        {
          "pattern-either": [
            {
              "pattern-inside": "$CONN = pg8000.native.Connection(...)\n...\n"
            },
            {
              "pattern-inside": "$CONN = pg8000.dhapi.connect(...)\n...\n"
            },
            {
              "pattern-inside": "$CONN1 = pg8000.connect(...)\n...\n$CONN = $CONN1.cursor(...)\n...\n"
            },
            {
              "pattern-inside": "$CONN = pg8000.connect(...)\n...\n"
            }
          ]
        },
        {
          "pattern-not": "$CONN.$METHOD(..., \"...\" + \"...\", ...)"
        },
        {
          "pattern-not": "$CONN.$METHOD(..., '...'.format(), ...)"
        },
        {
          "pattern-not": "$CONN.$METHOD(..., '...'%(), ...)"
        },
        {
          "metavariable-regex": {
            "metavariable": "$METHOD",
            "regex": "^(run|execute|executemany|prepare)$"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.audit.sqli.psycopg-sqli",
      "languages": [
        "python"
      ],
      "message": "Detected string concatenation with a non-literal variable in a psycopg2 Python SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use prepared statements by creating a 'sql.SQL' string. You can also use the pyformat binding style to create parameterized queries. For example: 'cur.execute(SELECT * FROM table WHERE name=%s, user_input)'",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://www.psycopg.org/docs/sql.html"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "psycopg"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern": "$CUR.$METHOD(...,$QUERY,...)"
                },
                {
                  "pattern-either": [
                    {
                      "pattern-inside": "$QUERY = $X + $Y\n...\n"
                    },
                    {
                      "pattern-inside": "$QUERY += $X\n...\n"
                    },
                    {
                      "pattern-inside": "$QUERY = '...'.format(...)\n...\n"
                    },
                    {
                      "pattern-inside": "$QUERY = '...' % (...)\n...\n"
                    },
                    {
                      "pattern-inside": "$QUERY = f'...{$USERINPUT}...'\n...\n"
                    }
                  ]
                },
                {
                  "pattern-not-inside": "$QUERY += \"...\"\n...\n"
                },
                {
                  "pattern-not-inside": "$QUERY = \"...\" + \"...\"\n...\n"
                },
                {
                  "pattern-not-inside": "$QUERY = '...'.format()\n...\n"
                },
                {
                  "pattern-not-inside": "$QUERY = '...' % ()\n...\n"
                }
              ]
            },
            {
              "pattern": "$CUR.$METHOD(..., $X + $Y, ...)"
            },
            {
              "pattern": "$CUR.$METHOD(..., '...'.format(...), ...)"
            },
            {
              "pattern": "$CUR.$METHOD(..., '...' % (...), ...)"
            },
            {
              "pattern": "$CUR.$METHOD(..., f'...{$USERINPUT}...', ...)"
            }
          ]
        },
        {
          "pattern-either": [
            {
              "pattern-inside": "$CONN = psycopg2.connect(...)\n...\n$CUR = $CONN.cursor(...)\n...\n"
            },
            {
              "pattern-inside": "$CONN = psycopg2.connect(...)\n...\nwith $CONN.cursor(...) as $CUR:\n  ...\n"
            }
          ]
        },
        {
          "pattern-not": "$CUR.$METHOD(..., \"...\" + \"...\", ...)"
        },
        {
          "pattern-not": "$CUR.$METHOD(..., '...'.format(), ...)"
        },
        {
          "pattern-not": "$CUR.$METHOD(..., '...'%(), ...)"
        },
        {
          "metavariable-regex": {
            "metavariable": "$METHOD",
            "regex": "^(execute|executemany|mogrify)$"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.deserialization.avoid-jsonpickle",
      "languages": [
        "python"
      ],
      "message": "Avoid using `jsonpickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data using `json` module.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-502: Deserialization of Untrusted Data"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A08:2017 - Insecure Deserialization",
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://github.com/jsonpickle/jsonpickle#jsonpickle",
          "https://www.exploit-db.com/exploits/49585"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "jsonpickle"
        ]
      },
      "patterns": [
        {
          "pattern": "jsonpickle.decode($PAYLOAD,...)\n"
        },
        {
          "pattern-not": "jsonpickle.decode(\"...\",...)\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix-regex": {
        "count": 1,
        "regex": "unsafe_load",
        "replacement": "safe_load"
      },
      "id": "vendored-rules.python.lang.security.deserialization.avoid-pyyaml-load",
      "languages": [
        "python"
      ],
      "message": "Detected a possible YAML deserialization vulnerability. `yaml.unsafe_load`, `yaml.Loader`, `yaml.CLoader`, and `yaml.UnsafeLoader` are all known to be unsafe methods of deserializing YAML. An attacker with control over the YAML input could create special YAML input that allows the attacker to run arbitrary Python code. This would allow the attacker to steal files, download and install malware, or otherwise take over the machine. Use `yaml.safe_load` or `yaml.SafeLoader` instead.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-502: Deserialization of Untrusted Data"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A08:2017 - Insecure Deserialization",
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation",
          "https://nvd.nist.gov/vuln/detail/CVE-2017-18342"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "pyyaml"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "import yaml\n...\n"
        },
        {
          "pattern-not-inside": "$YAML = ruamel.yaml.YAML(...)\n...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "yaml.unsafe_load(...)"
            },
            {
              "pattern": "yaml.load(..., Loader=yaml.Loader, ...)"
            },
            {
              "pattern": "yaml.load(..., Loader=yaml.UnsafeLoader, ...)"
            },
            {
              "pattern": "yaml.load(..., Loader=yaml.CLoader, ...)"
            },
            {
              "pattern": "yaml.load_all(..., Loader=yaml.Loader, ...)"
            },
            {
              "pattern": "yaml.load_all(..., Loader=yaml.UnsafeLoader, ...)"
            },
            {
              "pattern": "yaml.load_all(..., Loader=yaml.CLoader, ...)"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.lang.security.deserialization.avoid-unsafe-ruamel",
      "languages": [
        "python"
      ],
      "message": "Avoid using unsafe `ruamel.yaml.YAML()`. `ruamel.yaml.YAML` can create arbitrary Python objects. A malicious actor could exploit this to run arbitrary code. Use `YAML(typ='rt')` or `YAML(typ='safe')` instead.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-502: Deserialization of Untrusted Data"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A08:2017 - Insecure Deserialization",
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://yaml.readthedocs.io/en/latest/basicuse.html?highlight=typ"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "ruamel.yaml"
        ]
      },
      "pattern-either": [
        {
          "pattern": "ruamel.yaml.YAML(..., typ='unsafe', ...)"
        },
        {
          "pattern": "ruamel.yaml.YAML(..., typ='base', ...)"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.lang.security.deserialization.avoid-pickle",
      "languages": [
        "python"
      ],
      "message": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-502: Deserialization of Untrusted Data"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A08:2017 - Insecure Deserialization",
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/pickle.html"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "pickle.$FUNC(...)"
            },
            {
              "pattern": "_pickle.$FUNC(...)"
            }
          ]
        },
        {
          "pattern-not": "pickle.$FUNC(\"...\")"
        },
        {
          "pattern-not": "_pickle.$FUNC(\"...\")"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.deserialization.avoid-cPickle",
      "languages": [
        "python"
      ],
      "message": "Avoid using `cPickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-502: Deserialization of Untrusted Data"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A08:2017 - Insecure Deserialization",
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/pickle.html"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern": "cPickle.$FUNC(...)"
        },
        {
          "pattern-not": "cPickle.$FUNC(\"...\")"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.deserialization.avoid-dill",
      "languages": [
        "python"
      ],
      "message": "Avoid using `dill`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-502: Deserialization of Untrusted Data"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A08:2017 - Insecure Deserialization",
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/pickle.html"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern": "dill.$FUNC(...)"
        },
        {
          "pattern-not": "dill.$FUNC(\"...\")"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.lang.security.deserialization.avoid-shelve",
      "languages": [
        "python"
      ],
      "message": "Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-502: Deserialization of Untrusted Data"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A08:2017 - Insecure Deserialization",
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/pickle.html"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "pattern": "shelve.$FUNC(...)",
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.pycryptodome.security.insecure-cipher-algorithm-blowfish",
      "languages": [
        "python"
      ],
      "message": "Detected Blowfish cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use secure stream ciphers such as ChaCha20, XChaCha20 and Salsa20, or a block cipher such as AES with a block size of 128 bits. When using a block cipher, use a modern mode of operation that also provides authentication, such as GCM.",
      "metadata": {
        "bandit-code": "B304",
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "functional-categories": [
          "crypto::search::symmetric-algorithm::pycryptodome",
          "crypto::search::symmetric-algorithm::pycryptodomex"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://stackoverflow.com/questions/1135186/whats-wrong-with-xor-encryption",
          "https://www.pycryptodome.org/src/cipher/cipher"
        ],
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pycryptodome"
        ]
      },
      "options": {
        "symbolic_propagation": true
      },
      "pattern-either": [
        {
          "pattern": "Cryptodome.Cipher.Blowfish.new(...)"
        },
        {
          "pattern": "Crypto.Cipher.Blowfish.new(...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.pycryptodome.security.insecure-cipher-algorithm-des",
      "languages": [
        "python"
      ],
      "message": "Detected DES cipher or Triple DES algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use a secure symmetric cipher from the cryptodome package instead. Use secure stream ciphers such as ChaCha20, XChaCha20 and Salsa20, or a block cipher such as AES with a block size of 128 bits. When using a block cipher, use a modern mode of operation that also provides authentication, such as GCM.",
      "metadata": {
        "bandit-code": "B304",
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "functional-categories": [
          "crypto::search::symmetric-algorithm::pycryptodome",
          "crypto::search::symmetric-algorithm::pycryptodomex"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://cwe.mitre.org/data/definitions/326.html",
          "https://www.pycryptodome.org/src/cipher/cipher"
        ],
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pycryptodome"
        ]
      },
      "options": {
        "symbolic_propagation": true
      },
      "pattern-either": [
        {
          "pattern": "Cryptodome.Cipher.DES.new(...)"
        },
        {
          "pattern": "Crypto.Cipher.DES.new(...)"
        },
        {
          "pattern": "Cryptodome.Cipher.DES3.new(...)"
        },
        {
          "pattern": "Crypto.Cipher.DES3.new(...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.pycryptodome.security.insecure-cipher-algorithm-rc2",
      "languages": [
        "python"
      ],
      "message": "Detected RC2 cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use secure stream ciphers such as ChaCha20, XChaCha20 and Salsa20, or a block cipher such as AES with a block size of 128 bits. When using a block cipher, use a modern mode of operation that also provides authentication, such as GCM.",
      "metadata": {
        "bandit-code": "B304",
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "functional-categories": [
          "crypto::search::symmetric-algorithm::pycryptodome",
          "crypto::search::symmetric-algorithm::pycryptodomex"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://cwe.mitre.org/data/definitions/326.html",
          "https://www.pycryptodome.org/src/cipher/cipher"
        ],
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pycryptodome"
        ]
      },
      "options": {
        "symbolic_propagation": true
      },
      "pattern-either": [
        {
          "pattern": "Cryptodome.Cipher.ARC2.new(...)"
        },
        {
          "pattern": "Crypto.Cipher.ARC2.new(...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.pycryptodome.security.insecure-cipher-algorithm-rc4",
      "languages": [
        "python"
      ],
      "message": "Detected ARC4 cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use secure stream ciphers such as ChaCha20, XChaCha20 and Salsa20, or a block cipher such as AES with a block size of 128 bits. When using a block cipher, use a modern mode of operation that also provides authentication, such as GCM.",
      "metadata": {
        "bandit-code": "B304",
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "functional-categories": [
          "crypto::search::symmetric-algorithm::pycryptodome",
          "crypto::search::symmetric-algorithm::pycryptodomex"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://cwe.mitre.org/data/definitions/326.html",
          "https://www.pycryptodome.org/src/cipher/cipher"
        ],
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pycryptodome"
        ]
      },
      "pattern-either": [
        {
          "pattern": "Cryptodome.Cipher.ARC4.new(...)"
        },
        {
          "pattern": "Crypto.Cipher.ARC4.new(...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.pycryptodome.security.insecure-hash-algorithm-md2",
      "languages": [
        "python"
      ],
      "message": "Detected MD2 hash algorithm which is considered insecure. MD2 is not collision resistant and is therefore not suitable as a cryptographic signature.  Use a modern hash algorithm from the SHA-2, SHA-3, or BLAKE2 family instead.",
      "metadata": {
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "functional-categories": [
          "crypto::search::hash-algorithm::pycryptodome",
          "crypto::search::hash-algorithm::pycryptodomex"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://www.pycryptodome.org/src/hash/hash#modern-hash-algorithms",
          "https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html",
          "https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability",
          "http://2012.sharcs.org/slides/stevens.pdf",
          "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"
        ],
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pycryptodome"
        ]
      },
      "options": {
        "symbolic_propagation": true
      },
      "pattern-either": [
        {
          "pattern": "Crypto.Hash.MD2.new(...)"
        },
        {
          "pattern": "Cryptodome.Hash.MD2.new (...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.pycryptodome.security.insecure-hash-algorithm-md4",
      "languages": [
        "python"
      ],
      "message": "Detected MD4 hash algorithm which is considered insecure. MD4 is not collision resistant and is therefore not suitable as a cryptographic signature. Use a modern hash algorithm from the SHA-2, SHA-3, or BLAKE2 family instead.",
      "metadata": {
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "functional-categories": [
          "crypto::search::hash-algorithm::pycryptodome",
          "crypto::search::hash-algorithm::pycryptodomex"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://www.pycryptodome.org/src/hash/hash#modern-hash-algorithms",
          "https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html",
          "https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability",
          "http://2012.sharcs.org/slides/stevens.pdf",
          "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"
        ],
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pycryptodome"
        ]
      },
      "options": {
        "symbolic_propagation": true
      },
      "pattern-either": [
        {
          "pattern": "Crypto.Hash.MD4.new(...)"
        },
        {
          "pattern": "Cryptodome.Hash.MD4.new (...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.pycryptodome.security.insecure-hash-algorithm-md5",
      "languages": [
        "python"
      ],
      "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature.  Use a modern hash algorithm from the SHA-2, SHA-3, or BLAKE2 family instead.",
      "metadata": {
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "functional-categories": [
          "crypto::search::hash-algorithm::pycryptodome",
          "crypto::search::hash-algorithm::pycryptodomex"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://www.pycryptodome.org/src/hash/hash#modern-hash-algorithms",
          "https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html",
          "https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability",
          "http://2012.sharcs.org/slides/stevens.pdf",
          "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"
        ],
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pycryptodome"
        ]
      },
      "options": {
        "symbolic_propagation": true
      },
      "pattern-either": [
        {
          "pattern": "Crypto.Hash.MD5.new(...)"
        },
        {
          "pattern": "Cryptodome.Hash.MD5.new (...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.pycryptodome.security.insufficient-dsa-key-size",
      "languages": [
        "python"
      ],
      "message": "Detected an insufficient key size for DSA. NIST recommends a key size of 2048 or higher.",
      "metadata": {
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-326: Inadequate Encryption Strength"
        ],
        "functional-categories": [
          "crypto::search::key-length::pycryptodome",
          "crypto::search::key-length::pycryptodomex"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://www.pycryptodome.org/src/public_key/dsa",
          "https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57pt1r5.pdf"
        ],
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pycryptodome"
        ]
      },
      "options": {
        "symbolic_propagation": true
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "Crypto.PublicKey.DSA.generate(..., bits=$SIZE, ...)"
            },
            {
              "pattern": "Crypto.PublicKey.DSA.generate($SIZE, ...)"
            },
            {
              "pattern": "Cryptodome.PublicKey.DSA.generate(..., bits=$SIZE, ...)"
            },
            {
              "pattern": "Cryptodome.PublicKey.DSA.generate($SIZE, ...)"
            }
          ]
        },
        {
          "metavariable-comparison": {
            "comparison": "$SIZE < 2048",
            "metavariable": "$SIZE"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.pycryptodome.security.insufficient-rsa-key-size",
      "languages": [
        "python"
      ],
      "message": "Detected an insufficient key size for RSA. NIST recommends a key size of 3072 or higher.",
      "metadata": {
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-326: Inadequate Encryption Strength"
        ],
        "functional-categories": [
          "crypto::search::key-length::pycryptodome",
          "crypto::search::key-length::pycryptodomex"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://www.pycryptodome.org/src/public_key/rsa#rsa",
          "https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57pt1r5.pdf"
        ],
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pycryptodome"
        ]
      },
      "options": {
        "symbolic_propagation": true
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "Crypto.PublicKey.RSA.generate(..., bits=$SIZE, ...)"
            },
            {
              "pattern": "Crypto.PublicKey.RSA.generate($SIZE, ...)"
            },
            {
              "pattern": "Cryptodome.PublicKey.RSA.generate(..., bits=$SIZE, ...)"
            },
            {
              "pattern": "Cryptodome.PublicKey.RSA.generate($SIZE, ...)"
            }
          ]
        },
        {
          "metavariable-comparison": {
            "comparison": "$SIZE < 3072",
            "metavariable": "$SIZE"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.pycryptodome.security.insecure-cipher-algorithm-xor",
      "languages": [
        "python"
      ],
      "message": "Detected XOR cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead.",
      "metadata": {
        "bandit-code": "B304",
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://stackoverflow.com/questions/1135186/whats-wrong-with-xor-encryption"
        ],
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pycryptodome"
        ]
      },
      "pattern-either": [
        {
          "pattern": "Cryptodome.Cipher.XOR.new(...)"
        },
        {
          "pattern": "Crypto.Cipher.XOR.new(...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.pycryptodome.security.insecure-hash-algorithm-sha1",
      "languages": [
        "python"
      ],
      "message": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html",
          "https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability",
          "http://2012.sharcs.org/slides/stevens.pdf",
          "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"
        ],
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pycryptodome"
        ]
      },
      "pattern-either": [
        {
          "pattern": "Crypto.Hash.SHA.new(...)"
        },
        {
          "pattern": "Cryptodome.Hash.SHA.new (...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.pycryptodome.security.crypto-mode-without-authentication",
      "languages": [
        "python"
      ],
      "message": "An encryption mode of operation is being used without proper message authentication. This can potentially result in the encrypted content to be decrypted by an attacker. Consider instead use an AEAD mode of operation like GCM. ",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A02_2021-Cryptographic_Failures"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "cryptography"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern-either": [
                    {
                      "pattern": "AES.new(..., $PYCRYPTODOME_MODE)\n"
                    }
                  ]
                },
                {
                  "pattern-not-inside": "AES.new(..., $PYCRYPTODOME_MODE)\n...\nHMAC.new\n"
                },
                {
                  "metavariable-pattern": {
                    "metavariable": "$PYCRYPTODOME_MODE",
                    "patterns": [
                      {
                        "pattern-either": [
                          {
                            "pattern": "AES.MODE_CBC"
                          },
                          {
                            "pattern": "AES.MODE_CTR"
                          },
                          {
                            "pattern": "AES.MODE_CFB"
                          },
                          {
                            "pattern": "AES.MODE_OFB"
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "fix-regex": {
        "regex": "MONGODB-CR",
        "replacement": "SCRAM-SHA-256"
      },
      "id": "vendored-rules.python.pymongo.security.mongo-client-bad-auth",
      "languages": [
        "python"
      ],
      "message": "Warning MONGODB-CR was deprecated with the release of MongoDB 3.6 and is no longer supported by MongoDB 4.0 (see https://api.mongodb.com/python/current/examples/authentication.html for details).",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-477: Use of Obsolete Function"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "references": [
          "https://cwe.mitre.org/data/definitions/477.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pymongo"
        ]
      },
      "pattern": "pymongo.MongoClient(..., authMechanism='MONGODB-CR')\n",
      "severity": "WARNING"
    },
    {
      "fix": "$...PARAMS, httponly=True\n",
      "id": "vendored-rules.python.pyramid.audit.pyramid-authtkt-cookie-httponly-unsafe-default",
      "languages": [
        "python"
      ],
      "message": "Found a Pyramid Authentication Ticket cookie without the httponly option correctly set. Pyramid cookies should be handled securely by setting httponly=True. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A05:2021 - Security Misconfiguration"
        ],
        "references": [
          "https://owasp.org/Top10/A05_2021-Security_Misconfiguration"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pyramid"
        ]
      },
      "patterns": [
        {
          "pattern": "pyramid.authentication.$FUNC($...PARAMS)"
        },
        {
          "metavariable-pattern": {
            "metavariable": "$FUNC",
            "pattern-either": [
              {
                "pattern": "AuthTktCookieHelper"
              },
              {
                "pattern": "AuthTktAuthenticationPolicy"
              }
            ]
          }
        },
        {
          "pattern-not": "pyramid.authentication.$FUNC(..., httponly=$HTTPONLY, ...)"
        },
        {
          "pattern-not": "pyramid.authentication.$FUNC(..., **$PARAMS, ...)"
        },
        {
          "focus-metavariable": "$...PARAMS"
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix": "True\n",
      "id": "vendored-rules.python.pyramid.audit.pyramid-authtkt-cookie-httponly-unsafe-value",
      "languages": [
        "python"
      ],
      "message": "Found a Pyramid Authentication Ticket cookie without the httponly option correctly set. Pyramid cookies should be handled securely by setting httponly=True. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A05:2021 - Security Misconfiguration"
        ],
        "references": [
          "https://owasp.org/Top10/A05_2021-Security_Misconfiguration"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pyramid"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern-not": "pyramid.authentication.AuthTktCookieHelper(..., **$PARAMS)"
                },
                {
                  "pattern": "pyramid.authentication.AuthTktCookieHelper(..., httponly=$HTTPONLY, ...)"
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern-not": "pyramid.authentication.AuthTktAuthenticationPolicy(..., **$PARAMS)"
                },
                {
                  "pattern": "pyramid.authentication.AuthTktAuthenticationPolicy(..., httponly=$HTTPONLY, ...)"
                }
              ]
            }
          ]
        },
        {
          "pattern": "$HTTPONLY"
        },
        {
          "metavariable-pattern": {
            "metavariable": "$HTTPONLY",
            "pattern": "False\n"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix": "'Lax'\n",
      "id": "vendored-rules.python.pyramid.audit.pyramid-authtkt-cookie-samesite",
      "languages": [
        "python"
      ],
      "message": "Found a Pyramid Authentication Ticket without the samesite option correctly set. Pyramid cookies should be handled securely by setting samesite='Lax'. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-1275: Sensitive Cookie with Improper SameSite Attribute"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pyramid"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "pyramid.authentication.AuthTktCookieHelper(..., samesite=$SAMESITE, ...)"
            },
            {
              "pattern": "pyramid.authentication.AuthTktAuthenticationPolicy(..., samesite=$SAMESITE, ...)"
            }
          ]
        },
        {
          "pattern": "$SAMESITE"
        },
        {
          "metavariable-regex": {
            "metavariable": "$SAMESITE",
            "regex": "(?!'Lax')"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix-regex": {
        "regex": "(.*)\\)",
        "replacement": "\\1, secure=True)"
      },
      "id": "vendored-rules.python.pyramid.audit.pyramid-authtkt-cookie-secure-unsafe-default",
      "languages": [
        "python"
      ],
      "message": "Found a Pyramid Authentication Ticket cookie using an unsafe default for the secure option. Pyramid cookies should be handled securely by setting secure=True. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A05:2021 - Security Misconfiguration"
        ],
        "references": [
          "https://owasp.org/Top10/A05_2021-Security_Misconfiguration"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pyramid"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern-not": "pyramid.authentication.AuthTktCookieHelper(..., secure=$SECURE, ...)"
                },
                {
                  "pattern-not": "pyramid.authentication.AuthTktCookieHelper(..., **$PARAMS)"
                },
                {
                  "pattern": "pyramid.authentication.AuthTktCookieHelper(...)"
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern-not": "pyramid.authentication.AuthTktAuthenticationPolicy(..., secure=$SECURE, ...)"
                },
                {
                  "pattern-not": "pyramid.authentication.AuthTktAuthenticationPolicy(..., **$PARAMS)"
                },
                {
                  "pattern": "pyramid.authentication.AuthTktAuthenticationPolicy(...)"
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix": "True\n",
      "id": "vendored-rules.python.pyramid.audit.pyramid-authtkt-cookie-secure-unsafe-value",
      "languages": [
        "python"
      ],
      "message": "Found a Pyramid Authentication Ticket cookie without the secure option correctly set. Pyramid cookies should be handled securely by setting secure=True. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A05:2021 - Security Misconfiguration"
        ],
        "references": [
          "https://owasp.org/Top10/A05_2021-Security_Misconfiguration"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pyramid"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern-not": "pyramid.authentication.AuthTktCookieHelper(..., **$PARAMS)"
                },
                {
                  "pattern": "pyramid.authentication.AuthTktCookieHelper(..., secure=$SECURE, ...)"
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern-not": "pyramid.authentication.AuthTktAuthenticationPolicy(..., **$PARAMS)"
                },
                {
                  "pattern": "pyramid.authentication.AuthTktAuthenticationPolicy(..., secure=$SECURE, ...)"
                }
              ]
            }
          ]
        },
        {
          "pattern": "$SECURE"
        },
        {
          "metavariable-pattern": {
            "metavariable": "$SECURE",
            "pattern": "False\n"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix": "True\n",
      "id": "vendored-rules.python.pyramid.audit.pyramid-csrf-check-disabled",
      "languages": [
        "python"
      ],
      "message": "CSRF protection is disabled for this view. This is a security risk.",
      "metadata": {
        "asvs": {
          "control_id": "4.2.2 CSRF",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V4-Access-Control.md#v42-operation-level-access-control",
          "section": "V4 Access Control",
          "version": "4"
        },
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-352: Cross-Site Request Forgery (CSRF)"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "pyramid"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "from pyramid.view import view_config\n...\n@view_config(..., require_csrf=$REQUIRE_CSRF, ...)\ndef $VIEW(...):\n  ...\n"
        },
        {
          "pattern": "$REQUIRE_CSRF"
        },
        {
          "metavariable-comparison": {
            "comparison": "$REQUIRE_CSRF == False",
            "metavariable": "$REQUIRE_CSRF"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix": "True\n",
      "id": "vendored-rules.python.pyramid.audit.pyramid-csrf-origin-check-disabled-globally",
      "languages": [
        "python"
      ],
      "message": "Automatic check of the referrer for cross-site request forgery tokens has been explicitly disabled globally, which might leave views unprotected when an unsafe CSRF storage policy is used. Use 'pyramid.config.Configurator.set_default_csrf_options(check_origin=True)' to turn the automatic check for all unsafe methods (per RFC2616).",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-352: Cross-Site Request Forgery (CSRF)"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pyramid"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "$CONFIG.set_default_csrf_options(..., check_origin=$CHECK_ORIGIN, ...)\n"
        },
        {
          "pattern": "$CHECK_ORIGIN"
        },
        {
          "metavariable-comparison": {
            "comparison": "$CHECK_ORIGIN == False",
            "metavariable": "$CHECK_ORIGIN"
          }
        }
      ],
      "severity": "ERROR"
    },
    {
      "fix": "True\n",
      "id": "vendored-rules.python.pyramid.audit.pyramid-csrf-origin-check-disabled",
      "languages": [
        "python"
      ],
      "message": "Origin check for the CSRF token is disabled for this view. This might represent a security risk if the CSRF storage policy is not known to be secure.",
      "metadata": {
        "asvs": {
          "control_id": "4.2.2 CSRF",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V4-Access-Control.md#v42-operation-level-access-control",
          "section": "V4 Access Control",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-352: Cross-Site Request Forgery (CSRF)"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pyramid"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "from pyramid.view import view_config\n...\n@view_config(..., check_origin=$CHECK_ORIGIN, ...)\ndef $VIEW(...):\n  ...\n"
        },
        {
          "pattern": "$CHECK_ORIGIN"
        },
        {
          "metavariable-comparison": {
            "comparison": "$CHECK_ORIGIN == False",
            "metavariable": "$CHECK_ORIGIN"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix-regex": {
        "regex": "(.*)\\)",
        "replacement": "\\1, httponly=True)"
      },
      "id": "vendored-rules.python.pyramid.audit.pyramid-set-cookie-httponly-unsafe-default",
      "languages": [
        "python"
      ],
      "message": "Found a Pyramid cookie using an unsafe default for the httponly option. Pyramid cookies should be handled securely by setting httponly=True in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A05:2021 - Security Misconfiguration"
        ],
        "references": [
          "https://owasp.org/Top10/A05_2021-Security_Misconfiguration"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pyramid"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern-inside": "@pyramid.view.view_config(...)\ndef $VIEW($REQUEST):\n    ...\n    $RESPONSE = $REQUEST.response\n    ...\n"
            },
            {
              "pattern-inside": "def $VIEW(...):\n    ...\n    $RESPONSE = pyramid.httpexceptions.HTTPFound(...)\n    ...\n"
            }
          ]
        },
        {
          "pattern-not": "$RESPONSE.set_cookie(..., httponly=$HTTPONLY, ...)"
        },
        {
          "pattern-not": "$RESPONSE.set_cookie(..., **$PARAMS)"
        },
        {
          "pattern": "$RESPONSE.set_cookie(...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix": "True\n",
      "id": "vendored-rules.python.pyramid.audit.pyramid-set-cookie-httponly-unsafe-value",
      "languages": [
        "python"
      ],
      "message": "Found a Pyramid cookie without the httponly option correctly set. Pyramid cookies should be handled securely by setting httponly=True in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A05:2021 - Security Misconfiguration"
        ],
        "references": [
          "https://owasp.org/www-community/controls/SecureCookieAttribute",
          "https://owasp.org/www-community/HttpOnly",
          "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#httponly-attribute"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pyramid"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern-inside": "@pyramid.view.view_config(...)\ndef $VIEW($REQUEST):\n    ...\n    $RESPONSE = $REQUEST.response\n    ...\n"
            },
            {
              "pattern-inside": "def $VIEW(...):\n    ...\n    $RESPONSE = pyramid.httpexceptions.HTTPFound(...)\n    ...\n"
            }
          ]
        },
        {
          "pattern-not": "$RESPONSE.set_cookie(..., **$PARAMS)"
        },
        {
          "pattern": "$RESPONSE.set_cookie(..., httponly=$HTTPONLY, ...)"
        },
        {
          "pattern": "$HTTPONLY"
        },
        {
          "metavariable-pattern": {
            "metavariable": "$HTTPONLY",
            "pattern": "False\n"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix-regex": {
        "regex": "(.*)\\)",
        "replacement": "\\1, samesite='Lax')"
      },
      "id": "vendored-rules.python.pyramid.audit.pyramid-set-cookie-samesite-unsafe-default",
      "languages": [
        "python"
      ],
      "message": "Found a Pyramid cookie using an unsafe value for the samesite option. Pyramid cookies should be handled securely by setting samesite='Lax' in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-1275: Sensitive Cookie with Improper SameSite Attribute"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pyramid"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern-inside": "@pyramid.view.view_config(...)\ndef $VIEW($REQUEST):\n    ...\n    $RESPONSE = $REQUEST.response\n    ...\n"
            },
            {
              "pattern-inside": "def $VIEW(...):\n    ...\n    $RESPONSE = pyramid.httpexceptions.HTTPFound(...)\n    ...\n"
            }
          ]
        },
        {
          "pattern-not": "$RESPONSE.set_cookie(..., samesite=$SAMESITE, ...)"
        },
        {
          "pattern-not": "$RESPONSE.set_cookie(..., **$PARAMS)"
        },
        {
          "pattern": "$RESPONSE.set_cookie(...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix": "'Lax'\n",
      "id": "vendored-rules.python.pyramid.audit.pyramid-set-cookie-samesite-unsafe-value",
      "languages": [
        "python"
      ],
      "message": "Found a Pyramid cookie without the samesite option correctly set. Pyramid cookies should be handled securely by setting samesite='Lax' in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-1275: Sensitive Cookie with Improper SameSite Attribute"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pyramid"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern-inside": "@pyramid.view.view_config(...)\ndef $VIEW($REQUEST):\n    ...\n    $RESPONSE = $REQUEST.response\n    ...\n"
            },
            {
              "pattern-inside": "def $VIEW(...):\n    ...\n    $RESPONSE = pyramid.httpexceptions.HTTPFound(...)\n    ...\n"
            }
          ]
        },
        {
          "pattern-not": "$RESPONSE.set_cookie(..., **$PARAMS)"
        },
        {
          "pattern": "$RESPONSE.set_cookie(..., samesite=$SAMESITE, ...)"
        },
        {
          "pattern": "$SAMESITE"
        },
        {
          "metavariable-regex": {
            "metavariable": "$SAMESITE",
            "regex": "(?!'Lax')"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix-regex": {
        "regex": "(.*)\\)",
        "replacement": "\\1, secure=True)"
      },
      "id": "vendored-rules.python.pyramid.audit.pyramid-set-cookie-secure-unsafe-default",
      "languages": [
        "python"
      ],
      "message": "Found a Pyramid cookie using an unsafe default for the secure option. Pyramid cookies should be handled securely by setting secure=True in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A05:2021 - Security Misconfiguration"
        ],
        "references": [
          "https://owasp.org/Top10/A05_2021-Security_Misconfiguration"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pyramid"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern-inside": "@pyramid.view.view_config(...)\ndef $VIEW($REQUEST):\n    ...\n    $RESPONSE = $REQUEST.response\n    ...\n"
            },
            {
              "pattern-inside": "def $VIEW(...):\n    ...\n    $RESPONSE = pyramid.httpexceptions.HTTPFound(...)\n    ...\n"
            }
          ]
        },
        {
          "pattern-not": "$RESPONSE.set_cookie(..., secure=$SECURE, ...)"
        },
        {
          "pattern-not": "$RESPONSE.set_cookie(..., **$PARAMS)"
        },
        {
          "pattern": "$RESPONSE.set_cookie(...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix": "True\n",
      "id": "vendored-rules.python.pyramid.audit.pyramid-set-cookie-secure-unsafe-value",
      "languages": [
        "python"
      ],
      "message": "Found a Pyramid cookie without the secure option correctly set. Pyramid cookies should be handled securely by setting secure=True in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A05:2021 - Security Misconfiguration"
        ],
        "references": [
          "https://owasp.org/Top10/A05_2021-Security_Misconfiguration"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pyramid"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern-inside": "@pyramid.view.view_config(...)\ndef $VIEW($REQUEST):\n    ...\n    $RESPONSE = $REQUEST.response\n    ...\n"
            },
            {
              "pattern-inside": "def $VIEW(...):\n    ...\n    $RESPONSE = pyramid.httpexceptions.HTTPFound(...)\n    ...\n"
            }
          ]
        },
        {
          "pattern-not": "$RESPONSE.set_cookie(..., **$PARAMS)"
        },
        {
          "pattern": "$RESPONSE.set_cookie(..., secure=$SECURE, ...)"
        },
        {
          "pattern": "$SECURE"
        },
        {
          "metavariable-pattern": {
            "metavariable": "$SECURE",
            "pattern": "False\n"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix-regex": {
        "regex": "format",
        "replacement": "bindparams"
      },
      "id": "vendored-rules.python.pyramid.security.pyramid-sqlalchemy-sql-injection",
      "languages": [
        "python"
      ],
      "message": "Distinct, Having, Group_by, Order_by, and Filter in SQLAlchemy can cause sql injections if the developer inputs raw SQL into the before-mentioned clauses. This pattern captures relevant cases in which the developer inputs raw SQL into the distinct, having, group_by, order_by or filter clauses and injects user-input into the raw SQL with any function besides \"bindparams\". Use bindParams to securely bind user-input to SQL statements.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.sqlalchemy.org/en/14/tutorial/data_select.html#tutorial-selecting-data"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pyramid"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-inside": "$QUERY = $REQ.dbsession.query(...)\n...\n"
            },
            {
              "pattern-either": [
                {
                  "pattern": "$QUERY.$SQLFUNC(\"...\".$FORMATFUNC(..., $SINK, ...))\n"
                },
                {
                  "pattern": "$QUERY.join(...).$SQLFUNC(\"...\".$FORMATFUNC(..., $SINK, ...))\n"
                }
              ]
            },
            {
              "pattern": "$SINK"
            },
            {
              "metavariable-regex": {
                "metavariable": "$SQLFUNC",
                "regex": "(group_by|order_by|distinct|having|filter)"
              }
            },
            {
              "metavariable-regex": {
                "metavariable": "$FORMATFUNC",
                "regex": "(?!bindparams)"
              }
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-inside": "from pyramid.view import view_config\n...\n@view_config( ... )\ndef $VIEW($REQ):\n  ...\n"
            },
            {
              "pattern": "$REQ.$ANYTHING"
            },
            {
              "pattern-not": "$REQ.dbsession"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "fix": "True\n",
      "id": "vendored-rules.python.pyramid.security.pyramid-csrf-check-disabled-globally",
      "languages": [
        "python"
      ],
      "message": "Automatic check of cross-site request forgery tokens has been explicitly disabled globally, which might leave views unprotected. Use 'pyramid.config.Configurator.set_default_csrf_options(require_csrf=True)' to turn the automatic check for all unsafe methods (per RFC2616).",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-352: Cross-Site Request Forgery (CSRF)"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pyramid"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "$CONFIG.set_default_csrf_options(..., require_csrf=$REQUIRE_CSRF, ...)\n"
        },
        {
          "pattern": "$REQUIRE_CSRF"
        },
        {
          "metavariable-comparison": {
            "comparison": "$REQUIRE_CSRF == False",
            "metavariable": "$REQUIRE_CSRF"
          }
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.pyramid.security.pyramid-direct-use-of-response",
      "languages": [
        "python"
      ],
      "message": "Detected data rendered directly to the end user via 'Response'. This bypasses Pyramid's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Pyramid's template engines to safely render HTML.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pyramid"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "pyramid.request.Response.text($SINK)\n"
                },
                {
                  "pattern": "pyramid.request.Response($SINK)\n"
                },
                {
                  "pattern": "$REQ.response.body = $SINK\n"
                },
                {
                  "pattern": "$REQ.response.text = $SINK\n"
                },
                {
                  "pattern": "$REQ.response.ubody = $SINK\n"
                },
                {
                  "pattern": "$REQ.response.unicode_body = $SINK\n"
                }
              ]
            },
            {
              "pattern": "$SINK"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-inside": "@pyramid.view.view_config( ... )\ndef $VIEW($REQ):\n  ...\n"
            },
            {
              "pattern": "$REQ.$ANYTHING"
            },
            {
              "pattern-not": "$REQ.dbsession"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "fix-regex": {
        "regex": "verify(\\s)*=(\\s)*False",
        "replacement": "verify=True"
      },
      "id": "vendored-rules.python.requests.security.disabled-cert-validation",
      "languages": [
        "python"
      ],
      "message": "Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-295: Improper Certificate Validation"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://stackoverflow.com/questions/41740361/is-it-safe-to-disable-ssl-certificate-verification-in-pythonss-requests-lib"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "requests"
        ]
      },
      "pattern-either": [
        {
          "pattern": "requests.put(..., verify=False, ...)"
        },
        {
          "pattern": "requests.patch(..., verify=False, ...)"
        },
        {
          "pattern": "requests.delete(..., verify=False, ...)"
        },
        {
          "pattern": "requests.head(..., verify=False, ...)"
        },
        {
          "pattern": "requests.options(..., verify=False, ...)"
        },
        {
          "pattern": "requests.request(..., verify=False, ...)"
        },
        {
          "pattern": "requests.get(..., verify=False, ...)"
        },
        {
          "pattern": "requests.post(..., verify=False, ...)"
        }
      ],
      "severity": "ERROR"
    },
    {
      "fix-regex": {
        "count": 1,
        "regex": "http:\\/\\/",
        "replacement": "https://"
      },
      "id": "vendored-rules.python.requests.security.no-auth-over-http",
      "languages": [
        "python"
      ],
      "message": "Authentication detected over HTTP. HTTP does not provide any encryption or protection for these authentication credentials. This may expose these credentials to unauthorized parties. Use 'https://' instead.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-523: Unprotected Transport of Credentials"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A02:2017 - Broken Authentication",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://semgrep.dev/blog/2020/bento-check-no-auth-over-http/",
          "https://bento.dev/checks/requests/no-auth-over-http/"
        ],
        "source-rule-url": "https://pypi.org/project/flake8-flask/",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "requests"
        ]
      },
      "pattern-either": [
        {
          "pattern": "requests.$W(\"=~/http:\\/\\/.*/\", ..., auth=$X, ...)"
        },
        {
          "pattern": "$URL = \"=~/http:\\/\\/.../\"\n...\nrequests.$W($URL, ..., auth=$X, ...)\n"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.sh.security.string-concat",
      "languages": [
        "python"
      ],
      "message": "Detected string concatenation or formatting in a call to a command via 'sh'. This could be a command injection vulnerability if the data is user-controlled. Instead, use a list and append the argument.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "sh"
        ]
      },
      "pattern-either": [
        {
          "pattern": "sh.$BIN($X + $Y)"
        },
        {
          "pattern": "sh.$BIN($X.format(...))"
        },
        {
          "pattern": "sh.$BIN(f\"...{...}...\")"
        }
      ],
      "severity": "ERROR"
    },
    {
      "fix-regex": {
        "regex": "format",
        "replacement": "bindparams"
      },
      "id": "vendored-rules.python.sqlalchemy.security.sqlalchemy-sql-injection",
      "languages": [
        "python"
      ],
      "message": "Distinct, Having, Group_by, Order_by, and Filter in SQLAlchemy can cause sql injections if the developer inputs raw SQL into the before-mentioned clauses. This pattern captures relevant cases in which the developer inputs raw SQL into the distinct, having, group_by, order_by or filter clauses and injects user-input into the raw SQL with any function besides \"bindparams\". Use bindParams to securely bind user-input to SQL statements.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "sqlalchemy"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "def $FUNC(...,$VAR,...):\n  ...\n  $SESSION.query(...).$SQLFUNC(\"...\".$FORMATFUNC(...,$VAR,...))\n"
            },
            {
              "pattern": "def $FUNC(...,$VAR,...):\n  ...\n  $SESSION.query.join(...).$SQLFUNC(\"...\".$FORMATFUNC(...,$VAR,...))\n"
            },
            {
              "pattern": "def $FUNC(...,$VAR,...):\n  ...\n  $SESSION.query.$SQLFUNC(\"...\".$FORMATFUNC(...,$VAR,...))\n"
            },
            {
              "pattern": "def $FUNC(...,$VAR,...):\n  ...\n  query.$SQLFUNC(\"...\".$FORMATFUNC(...,$VAR,...))\n"
            }
          ]
        },
        {
          "metavariable-regex": {
            "metavariable": "$SQLFUNC",
            "regex": "(group_by|order_by|distinct|having|filter)"
          }
        },
        {
          "metavariable-regex": {
            "metavariable": "$FORMATFUNC",
            "regex": "(?!bindparams)"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.python.sqlalchemy.security.sqlalchemy-execute-raw-query",
      "languages": [
        "python"
      ],
      "message": "Avoid executing dynamically constructed SQL strings as this bypasses SQLAlchemy's SQL injection \nprotections. Dynamic string construction makes the query vulnerable when user input is involved. \nUse `execute(text(\"... :param_name\"), param_name=value)` with named parameters instead of \nf-strings/concatenation to ensure proper escaping.\n",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql",
          "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm",
          "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "sqlalchemy"
        ]
      },
      "pattern-either": [
        {
          "pattern": "$CONNECTION.execute( $SQL + ..., ... )\n"
        },
        {
          "pattern": "$CONNECTION.execute( $SQL % (...), ...)\n"
        },
        {
          "pattern": "$CONNECTION.execute( $SQL.format(...), ... )\n"
        },
        {
          "pattern": "$CONNECTION.execute(f\"...{...}...\", ...)\n"
        },
        {
          "patterns": [
            {
              "pattern-inside": "$QUERY = $SQL + ...\n...\n"
            },
            {
              "pattern": "$CONNECTION.execute($QUERY, ...)\n"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$QUERY = $SQL % (...)\n...\n"
            },
            {
              "pattern": "$CONNECTION.execute($QUERY, ...)\n"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$QUERY = $SQL.format(...)\n...\n"
            },
            {
              "pattern": "$CONNECTION.execute($QUERY, ...)\n"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$QUERY = f\"...{...}...\"\n...\n"
            },
            {
              "pattern": "$CONNECTION.execute($QUERY, ...)\n"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.sqlalchemy.security.audit.avoid-sqlalchemy-text",
      "languages": [
        "python"
      ],
      "message": "Avoid sqlalchemy.text() with dynamically constructed SQL strings as this bypasses SQLAlchemy's \nSQL injection protections. The constructed SQL is passed to the database mostly unchanged, making \nit vulnerable when user input is involved. Replace f-strings/concatenation with named parameters \nlike `text(\"... :param_name\")` and pass parameters separately to execute().\n",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "sqlalchemy"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "pattern": "sqlalchemy.text(...)\n"
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "$X + $Y\n"
            },
            {
              "metavariable-type": {
                "metavariable": "$X",
                "type": "string"
              }
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern": "$X + $Y\n"
            },
            {
              "metavariable-type": {
                "metavariable": "$Y",
                "type": "string"
              }
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern": "f\"...\"\n"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern": "$X.format(...)\n"
            },
            {
              "metavariable-type": {
                "metavariable": "$X",
                "type": "string"
              }
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern": "$X % $Y\n"
            },
            {
              "metavariable-type": {
                "metavariable": "$X",
                "type": "string"
              }
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.python.twilio.security.twiml-injection",
      "languages": [
        "python"
      ],
      "message": "Using non-constant TwiML (Twilio Markup Language) argument when creating a Twilio conversation could allow the injection of additional TwiML commands",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-91: XML Injection"
        ],
        "impact": "MEDIUM",
        "likelihood": "HIGH",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://codeberg.org/fennix/funjection"
        ],
        "subcategory": "vuln",
        "technology": [
          "python",
          "twilio",
          "twiml"
        ]
      },
      "mode": "taint",
      "pattern-sanitizers": [
        {
          "pattern": "xml.sax.saxutils.escape(...)"
        },
        {
          "pattern": "html.escape(...)"
        }
      ],
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern": "$CLIENT.calls.create(..., twiml=$SINK, ...)\n"
            },
            {
              "focus-metavariable": "$SINK"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "pattern": "f\"...\"\n"
        },
        {
          "pattern": "\"...\" % ...\n"
        },
        {
          "pattern": "\"...\".format(...)\n"
        },
        {
          "patterns": [
            {
              "pattern": "$ARG"
            },
            {
              "pattern-inside": "def $F(..., $ARG, ...):\n    ...\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.typescript.angular.security.audit.angular-bypasssecuritytrust",
      "languages": [
        "typescript"
      ],
      "message": "Detected the use of `$TRUST`. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. If you have to use `$TRUST`, ensure it does not come from user-input or use the appropriate prevention mechanism e.g. input validation or sanitization depending on the context.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://angular.io/api/platform-browser/DomSanitizer",
          "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "angular",
          "browser"
        ]
      },
      "mode": "taint",
      "pattern-sanitizers": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "import $S from \"underscore.string\"\n...\n"
                },
                {
                  "pattern-inside": "import * as $S from \"underscore.string\"\n...\n"
                },
                {
                  "pattern-inside": "import $S from \"underscore.string\"\n...\n"
                },
                {
                  "pattern-inside": "$S = require(\"underscore.string\")\n...\n"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$S.escapeHTML(...)"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "import $S from \"dompurify\"\n...\n"
                },
                {
                  "pattern-inside": "import { ..., $S,... } from \"dompurify\"\n...\n"
                },
                {
                  "pattern-inside": "import * as $S from \"dompurify\"\n...\n"
                },
                {
                  "pattern-inside": "$S = require(\"dompurify\")\n...\n"
                },
                {
                  "pattern-inside": "import $S from \"isomorphic-dompurify\"\n...\n"
                },
                {
                  "pattern-inside": "import * as $S from \"isomorphic-dompurify\"\n...\n"
                },
                {
                  "pattern-inside": "$S = require(\"isomorphic-dompurify\")\n...\n"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-inside": "$VALUE = $S(...)\n...\n"
                    },
                    {
                      "pattern": "$VALUE.sanitize(...)"
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "$VALUE = $S.sanitize\n...\n"
                    },
                    {
                      "pattern": "$S(...)"
                    }
                  ]
                },
                {
                  "pattern": "$S.sanitize(...)"
                },
                {
                  "pattern": "$S(...)"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "import $S from 'xss';\n...\n"
                },
                {
                  "pattern-inside": "import * as $S from 'xss';\n...\n"
                },
                {
                  "pattern-inside": "$S = require(\"xss\")\n...\n"
                }
              ]
            },
            {
              "pattern": "$S(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "import $S from 'sanitize-html';\n...\n"
                },
                {
                  "pattern-inside": "import * as $S from \"sanitize-html\";\n...\n"
                },
                {
                  "pattern-inside": "$S = require(\"sanitize-html\")\n...\n"
                }
              ]
            },
            {
              "pattern": "$S(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern": "sanitizer.sanitize(...)"
            },
            {
              "pattern-not": "sanitizer.sanitize(SecurityContext.NONE, ...);"
            }
          ]
        }
      ],
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "$X.$TRUST($Y)"
                }
              ]
            },
            {
              "focus-metavariable": "$Y"
            },
            {
              "pattern-not": "$X.$TRUST(`...`)\n"
            },
            {
              "pattern-not": "$X.$TRUST(\"...\")\n"
            },
            {
              "metavariable-regex": {
                "metavariable": "$TRUST",
                "regex": "(bypassSecurityTrustHtml|bypassSecurityTrustStyle|bypassSecurityTrustScript|bypassSecurityTrustUrl|bypassSecurityTrustResourceUrl)"
              }
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "function ...({..., $X: string, ...}) { ... }\n"
                },
                {
                  "pattern-inside": "function ...(..., $X: string, ...) { ... }\n"
                }
              ]
            },
            {
              "focus-metavariable": "$X"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.typescript.aws-cdk.security.awscdk-bucket-grantpublicaccessmethod",
      "languages": [
        "ts"
      ],
      "message": "Using the GrantPublicAccess method on bucket contruct $X will make the objects in the bucket world accessible. Verify if this is intentional.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-306: Missing Authentication for Critical Function"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "HIGH",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-control-overview.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "AWS-CDK"
        ]
      },
      "pattern-either": [
        {
          "patterns": [
            {
              "pattern-inside": "import {Bucket} from '@aws-cdk/aws-s3'\n...\n"
            },
            {
              "pattern": "const $X = new Bucket(...)\n...\n$X.grantPublicAccess(...)\n"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "import * as $Y from '@aws-cdk/aws-s3'\n...\n"
            },
            {
              "pattern": "const $X = new $Y.Bucket(...)\n...\n$X.grantPublicAccess(...)\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.typescript.aws-cdk.security.awscdk-codebuild-project-public",
      "languages": [
        "ts"
      ],
      "message": "CodeBuild Project $X is set to have a public URL. This will make the build results, logs, artifacts publically accessible, including builds prior to the project being public. Ensure this is acceptable for the project.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-306: Missing Authentication for Critical Function"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://docs.aws.amazon.com/codebuild/latest/userguide/public-builds.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "AWS-CDK"
        ]
      },
      "pattern-either": [
        {
          "patterns": [
            {
              "pattern-inside": "import {Project} from '@aws-cdk/aws-codebuild'\n...\n"
            },
            {
              "pattern": "const $X = new Project(..., {..., badge: true, ...})\n"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "import * as $Y from '@aws-cdk/aws-codebuild'\n...\n"
            },
            {
              "pattern": "const $X = new $Y.Project(..., {..., badge: true, ...})\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.typescript.aws-cdk.security.audit.awscdk-bucket-encryption",
      "languages": [
        "typescript"
      ],
      "message": "Add \"encryption: $Y.BucketEncryption.KMS_MANAGED\" or \"encryption: $Y.BucketEncryption.S3_MANAGED\" to the bucket props for Bucket construct $X",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-311: Missing Encryption of Sensitive Data"
        ],
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A04:2021 - Insecure Design"
        ],
        "references": [
          "https://docs.aws.amazon.com/AmazonS3/latest/userguide/security-best-practices.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "AWS-CDK"
        ]
      },
      "pattern-either": [
        {
          "patterns": [
            {
              "pattern-inside": "import {Bucket} from '@aws-cdk/aws-s3'\n...\n"
            },
            {
              "pattern": "const $X = new Bucket(...)"
            },
            {
              "pattern-not": "const $X = new Bucket(..., {..., encryption: BucketEncryption.KMS_MANAGED, ...})\n"
            },
            {
              "pattern-not": "const $X = new Bucket(..., {..., encryption: BucketEncryption.KMS, ...})\n"
            },
            {
              "pattern-not": "const $X = new Bucket(..., {..., encryption: BucketEncryption.S3_MANAGED, ...})\n"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "import * as $Y from '@aws-cdk/aws-s3'\n...\n"
            },
            {
              "pattern": "const $X = new $Y.Bucket(...)"
            },
            {
              "pattern-not": "const $X = new $Y.Bucket(..., {..., encryption: $Y.BucketEncryption.KMS_MANAGED, ...})\n"
            },
            {
              "pattern-not": "const $X = new $Y.Bucket(..., {..., encryption: $Y.BucketEncryption.KMS, ...})\n"
            },
            {
              "pattern-not": "const $X = new $Y.Bucket(..., {..., encryption: $Y.BucketEncryption.S3_MANAGED, ...})\n"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.typescript.aws-cdk.security.audit.awscdk-sqs-unencryptedqueue",
      "languages": [
        "ts"
      ],
      "message": "Queue $X is missing encryption at rest. Add \"encryption: $Y.QueueEncryption.KMS\" or \"encryption: $Y.QueueEncryption.KMS_MANAGED\" to the queue props to enable encryption at rest for the queue.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-311: Missing Encryption of Sensitive Data"
        ],
        "impact": "HIGH",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A04:2021 - Insecure Design"
        ],
        "references": [
          "https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-data-protection.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "AWS-CDK"
        ]
      },
      "pattern-either": [
        {
          "patterns": [
            {
              "pattern-inside": "import {Queue} from '@aws-cdk/aws-sqs'\n...\n"
            },
            {
              "pattern": "const $X = new Queue(...)"
            },
            {
              "pattern-not": "const $X = new Queue(..., {..., encryption: QueueEncryption.KMS_MANAGED, ...})\n"
            },
            {
              "pattern-not": "const $X = new Queue(..., {..., encryption: QueueEncryption.KMS, ...})\n"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "import * as $Y from '@aws-cdk/aws-sqs'\n...\n"
            },
            {
              "pattern": "const $X = new $Y.Queue(...)"
            },
            {
              "pattern-not": "const $X = new $Y.Queue(..., {..., encryption: $Y.QueueEncryption.KMS_MANAGED, ...})\n"
            },
            {
              "pattern-not": "const $X = new $Y.Queue(..., {..., encryption: $Y.QueueEncryption.KMS, ...})\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.typescript.aws-cdk.security.audit.aws-cdk-bucket-enforcessl",
      "languages": [
        "ts"
      ],
      "message": "Bucket $X is not set to enforce encryption-in-transit, if not explictly setting this on the bucket policy - the property \"enforceSSL\" should be set to true",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-319: Cleartext Transmission of Sensitive Information"
        ],
        "impact": "MEDIUM",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://docs.aws.amazon.com/AmazonS3/latest/userguide/security-best-practices.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "AWS-CDK"
        ]
      },
      "pattern-either": [
        {
          "patterns": [
            {
              "pattern-inside": "import {Bucket} from '@aws-cdk/aws-s3';\n...\n"
            },
            {
              "pattern": "const $X = new Bucket(...)"
            },
            {
              "pattern-not": "const $X = new Bucket(..., {enforceSSL: true}, ...)\n"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "import * as $Y from '@aws-cdk/aws-s3';\n...\n"
            },
            {
              "pattern": "const $X = new $Y.Bucket(...)"
            },
            {
              "pattern-not": "const $X = new $Y.Bucket(..., {..., enforceSSL: true, ...})\n"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.typescript.lang.security.audit.cors-regex-wildcard",
      "languages": [
        "ts"
      ],
      "message": "Unescaped '.' character in CORS domain regex $CORS: $PATTERN",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-183: Permissive List of Allowed Inputs"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A04:2021 - Insecure Design"
        ],
        "references": [
          "https://owasp.org/Top10/A04_2021-Insecure_Design"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "cors"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "$CORS = [...,/$PATTERN/,...]"
            },
            {
              "pattern": "$CORS = /$PATTERN/"
            }
          ]
        },
        {
          "focus-metavariable": "$PATTERN"
        },
        {
          "metavariable-regex": {
            "metavariable": "$PATTERN",
            "regex": ".+?(?<!\\\\).\\..+(?<!\\\\)\\..+"
          }
        },
        {
          "metavariable-regex": {
            "metavariable": "$CORS",
            "regex": "(?i)cors"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.typescript.nestjs.security.audit.nestjs-header-cors-any",
      "languages": [
        "typescript"
      ],
      "message": "Access-Control-Allow-Origin response header is set to \"*\". This will disable CORS Same Origin Policy restrictions.",
      "metadata": {
        "asvs": {
          "control_id": "14.4.8 Permissive CORS",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x22-V14-Config.md#v144-http-security-headers-requirements",
          "section": "V14: Configuration Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-183: Permissive List of Allowed Inputs"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A04:2021 - Insecure Design"
        ],
        "references": [
          "https://owasp.org/Top10/A04_2021-Insecure_Design"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "nestjs"
        ]
      },
      "pattern-either": [
        {
          "pattern": "class $CN {\n    @Header(\"=~/[Aa][Cc][Cc][Ee][Ss][Ss]-[Cc][Oo][Nn][Tt][Rr][Oo][Ll]-[Aa][Ll][Ll][Oo][Ww]-[Oo][Rr][Ii][Gg][Ii][Nn]/\", '*')\n    $FN(...) {\n        ...\n    }\n}\n"
        },
        {
          "pattern": "NestFactory.create($MODULE, {cors: true})\n"
        },
        {
          "pattern": "NestFactory.create($MODULE, {cors: {origin: '*'}})\n"
        },
        {
          "pattern": "$APP.enableCors()\n"
        },
        {
          "pattern": "$APP.enableCors({origin: '*'})\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.typescript.nestjs.security.audit.nestjs-header-xss-disabled",
      "languages": [
        "typescript"
      ],
      "message": "X-XSS-Protection header is set to 0. This will disable the browser's XSS Filter.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "nestjs"
        ]
      },
      "pattern": "class $CN {\n    ...\n    @Header(\"=~/[Xx]-[Xx][Ss][Ss]-[Pp][Rr][Oo][Tt][Ee][Cc][Tt][Ii][Oo][Nn]/\", '0')\n    $FN(...) {\n        ...\n    }\n    ...\n}\n",
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.typescript.nestjs.security.audit.nestjs-open-redirect",
      "languages": [
        "typescript"
      ],
      "message": "Untrusted user input in {url: ...} can result in Open Redirect vulnerability.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "nestjs"
        ]
      },
      "patterns": [
        {
          "pattern": "return {url: $URL}\n"
        },
        {
          "pattern-inside": "class $CN {\n    @Redirect(...)\n    $FN(...) {\n        ...\n    }\n}\n"
        },
        {
          "pattern-not": "return {url: \"...\"}\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.typescript.react.security.react-markdown-insecure-html",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Overwriting `transformLinkUri` or `transformImageUri` to something insecure, or turning `allowDangerousHtml` on, or turning `escapeHtml` off, will open the code up to XSS vectors.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://www.npmjs.com/package/react-markdown#security"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "react"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern-inside": "$X = require('react-markdown/with-html');\n...\n"
            },
            {
              "pattern-inside": "$X = require('react-markdown');\n...\n"
            },
            {
              "pattern-inside": "import 'react-markdown/with-html';\n...\n"
            },
            {
              "pattern-inside": "import 'react-markdown';\n...\n"
            }
          ]
        },
        {
          "pattern-either": [
            {
              "pattern": "<$EL allowDangerousHtml />\n"
            },
            {
              "pattern": "<$EL escapeHtml={false} />\n"
            },
            {
              "pattern": "<$EL transformLinkUri=... />\n"
            },
            {
              "pattern": "<$EL transformImageUri=... />\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.typescript.react.security.react-insecure-request",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Unencrypted request over HTTP detected.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-319: Cleartext Transmission of Sensitive Information"
        ],
        "impact": "MEDIUM",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://www.npmjs.com/package/axios"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "react"
        ],
        "vulnerability": "Insecure Transport"
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern-either": [
                    {
                      "pattern-inside": "import $AXIOS from 'axios';\n...\n$AXIOS.$METHOD(...)\n"
                    },
                    {
                      "pattern-inside": "$AXIOS = require('axios');\n...\n$AXIOS.$METHOD(...)\n"
                    }
                  ]
                },
                {
                  "pattern": "$AXIOS.$VERB(\"$URL\",...)"
                },
                {
                  "metavariable-regex": {
                    "metavariable": "$VERB",
                    "regex": "^(get|post|delete|head|patch|put|options)"
                  }
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern-either": [
                    {
                      "pattern-inside": "import $AXIOS from 'axios';\n...\n$AXIOS(...)\n"
                    },
                    {
                      "pattern-inside": "$AXIOS = require('axios');\n...\n$AXIOS(...)\n"
                    }
                  ]
                },
                {
                  "pattern-either": [
                    {
                      "pattern": "$AXIOS({url: \"$URL\"}, ...)"
                    },
                    {
                      "pattern": "$OPTS = {url: \"$URL\"}\n...\n$AXIOS($OPTS, ...)\n"
                    }
                  ]
                }
              ]
            },
            {
              "pattern": "fetch(\"$URL\", ...)"
            }
          ]
        },
        {
          "metavariable-regex": {
            "metavariable": "$URL",
            "regex": "^([Hh][Tt][Tt][Pp]:\\/\\/(?!localhost|127\\.0\\.0\\.1).*)"
          }
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "vendored-rules.typescript.react.security.audit.react-dangerouslysetinnerhtml",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detection of dangerouslySetInnerHTML from non-constant definition. This can inadvertently expose users to cross-site scripting (XSS) attacks if this comes from user-provided input. If you have to use dangerouslySetInnerHTML, consider using a sanitization library such as DOMPurify to sanitize your HTML.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://react.dev/reference/react-dom/components/common#dangerously-setting-the-inner-html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "react"
        ]
      },
      "mode": "taint",
      "pattern-sanitizers": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "import $S from \"underscore.string\"\n...\n"
                },
                {
                  "pattern-inside": "import * as $S from \"underscore.string\"\n...\n"
                },
                {
                  "pattern-inside": "import $S from \"underscore.string\"\n...\n"
                },
                {
                  "pattern-inside": "$S = require(\"underscore.string\")\n...\n"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$S.escapeHTML(...)"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "import $S from \"dompurify\"\n...\n"
                },
                {
                  "pattern-inside": "import { ..., $S,... } from \"dompurify\"\n...\n"
                },
                {
                  "pattern-inside": "import * as $S from \"dompurify\"\n...\n"
                },
                {
                  "pattern-inside": "$S = require(\"dompurify\")\n...\n"
                },
                {
                  "pattern-inside": "import $S from \"isomorphic-dompurify\"\n...\n"
                },
                {
                  "pattern-inside": "import * as $S from \"isomorphic-dompurify\"\n...\n"
                },
                {
                  "pattern-inside": "$S = require(\"isomorphic-dompurify\")\n...\n"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-inside": "$VALUE = $S(...)\n...\n"
                    },
                    {
                      "pattern": "$VALUE.sanitize(...)"
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "$VALUE = $S.sanitize\n...\n"
                    },
                    {
                      "pattern": "$S(...)"
                    }
                  ]
                },
                {
                  "pattern": "$S.sanitize(...)"
                },
                {
                  "pattern": "$S(...)"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "import $S from 'xss';\n...\n"
                },
                {
                  "pattern-inside": "import * as $S from 'xss';\n...\n"
                },
                {
                  "pattern-inside": "$S = require(\"xss\")\n...\n"
                }
              ]
            },
            {
              "pattern": "$S(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "import $S from 'sanitize-html';\n...\n"
                },
                {
                  "pattern-inside": "import * as $S from \"sanitize-html\";\n...\n"
                },
                {
                  "pattern-inside": "$S = require(\"sanitize-html\")\n...\n"
                }
              ]
            },
            {
              "pattern": "$S(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "$S = new Remarkable()\n...\n"
                }
              ]
            },
            {
              "pattern": "$S.render(...)"
            }
          ]
        }
      ],
      "pattern-sinks": [
        {
          "patterns": [
            {
              "focus-metavariable": "$X"
            },
            {
              "pattern-either": [
                {
                  "pattern": "{...,dangerouslySetInnerHTML: {__html: $X},...}\n"
                },
                {
                  "pattern": "<$Y ... dangerouslySetInnerHTML={{__html: $X}} />\n"
                }
              ]
            },
            {
              "pattern-not": "<$Y ... dangerouslySetInnerHTML={{__html: \"...\"}} />\n"
            },
            {
              "pattern-not": "{...,dangerouslySetInnerHTML:{__html: \"...\"},...}\n"
            },
            {
              "metavariable-pattern": {
                "metavariable": "$X",
                "patterns": [
                  {
                    "pattern-not": "{...}\n"
                  }
                ]
              }
            },
            {
              "pattern-not": "<... {__html: \"...\"} ...>\n"
            },
            {
              "pattern-not": "<... {__html: `...`} ...>\n"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "function ...({..., $X, ...}) { ... }\n"
                },
                {
                  "pattern-inside": "function ...(..., $X, ...) { ... }\n"
                }
              ]
            },
            {
              "focus-metavariable": "$X"
            },
            {
              "pattern-not-inside": "$F. ... .$SANITIZEUNC(...)\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.typescript.react.security.audit.react-href-var",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detected a variable used in an anchor tag with the 'href' attribute. A malicious actor may be able to input the 'javascript:' URI, which could cause cross-site scripting (XSS). It is recommended to disallow 'javascript:' URIs within your application.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://reactjs.org/blog/2019/08/08/react-v16.9.0.html#deprecating-javascript-urls",
          "https://pragmaticwebsecurity.com/articles/spasecurity/react-xss-part1.html"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "react"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "focus-metavariable": "$X"
            },
            {
              "pattern-either": [
                {
                  "pattern": "<$EL href={$X} />\n"
                },
                {
                  "pattern": "React.createElement($EL, {href: $X})\n"
                },
                {
                  "pattern-inside": "$PARAMS = {href: $X};\n...\nReact.createElement($EL, $PARAMS);\n"
                }
              ]
            },
            {
              "metavariable-pattern": {
                "metavariable": "$EL",
                "patterns": [
                  {
                    "pattern-not-regex": "(?i)(button)"
                  }
                ]
              }
            }
          ],
          "requires": "TAINTED and not CONCAT and not CLEAN"
        }
      ],
      "pattern-sources": [
        {
          "label": "TAINTED",
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "function ...({..., $X, ...}) { ... }\n"
                },
                {
                  "pattern-inside": "function ...(..., $X, ...) { ... }\n"
                }
              ]
            },
            {
              "focus-metavariable": "$X"
            },
            {
              "pattern-either": [
                {
                  "pattern": "$X.$Y"
                },
                {
                  "pattern": "$X[...]"
                }
              ]
            },
            {
              "pattern-not-inside": "$F. ... .$SANITIZEUNC(...)\n"
            }
          ]
        },
        {
          "label": "CONCAT",
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "`...${$X}...`\n"
                },
                {
                  "pattern": "$SANITIZE + <... $X ...>\n"
                }
              ]
            },
            {
              "pattern-not": "`${$X}...`\n"
            },
            {
              "pattern-not": "$X + ...\n"
            },
            {
              "focus-metavariable": "$X"
            }
          ],
          "requires": "TAINTED"
        },
        {
          "by-side-effect": true,
          "label": "CLEAN",
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "$A($SOURCE)"
                },
                {
                  "pattern": "$SANITIZE. ... .$A($SOURCE)"
                },
                {
                  "pattern": "$A. ... .$SANITIZE($SOURCE)"
                }
              ]
            },
            {
              "focus-metavariable": "$SOURCE"
            },
            {
              "metavariable-regex": {
                "metavariable": "$A",
                "regex": "(?i)(.*valid|.*sanitiz)"
              }
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.typescript.react.security.audit.react-unsanitized-method",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detection of $HTML from non-constant definition. This can inadvertently expose users to cross-site scripting (XSS) attacks if this comes from user-provided input. If you have to use $HTML, consider using a sanitization library such as DOMPurify to sanitize your HTML.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://developer.mozilla.org/en-US/docs/Web/API/Document/writeln",
          "https://developer.mozilla.org/en-US/docs/Web/API/Document/write",
          "https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "react"
        ]
      },
      "mode": "taint",
      "pattern-sanitizers": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "import $S from \"underscore.string\"\n...\n"
                },
                {
                  "pattern-inside": "import * as $S from \"underscore.string\"\n...\n"
                },
                {
                  "pattern-inside": "import $S from \"underscore.string\"\n...\n"
                },
                {
                  "pattern-inside": "$S = require(\"underscore.string\")\n...\n"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$S.escapeHTML(...)"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "import $S from \"dompurify\"\n...\n"
                },
                {
                  "pattern-inside": "import { ..., $S,... } from \"dompurify\"\n...\n"
                },
                {
                  "pattern-inside": "import * as $S from \"dompurify\"\n...\n"
                },
                {
                  "pattern-inside": "$S = require(\"dompurify\")\n...\n"
                },
                {
                  "pattern-inside": "import $S from \"isomorphic-dompurify\"\n...\n"
                },
                {
                  "pattern-inside": "import * as $S from \"isomorphic-dompurify\"\n...\n"
                },
                {
                  "pattern-inside": "$S = require(\"isomorphic-dompurify\")\n...\n"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-inside": "$VALUE = $S(...)\n...\n"
                    },
                    {
                      "pattern": "$VALUE.sanitize(...)"
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "$VALUE = $S.sanitize\n...\n"
                    },
                    {
                      "pattern": "$S(...)"
                    }
                  ]
                },
                {
                  "pattern": "$S.sanitize(...)"
                },
                {
                  "pattern": "$S(...)"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "import $S from 'xss';\n...\n"
                },
                {
                  "pattern-inside": "import * as $S from 'xss';\n...\n"
                },
                {
                  "pattern-inside": "$S = require(\"xss\")\n...\n"
                }
              ]
            },
            {
              "pattern": "$S(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "import $S from 'sanitize-html';\n...\n"
                },
                {
                  "pattern-inside": "import * as $S from \"sanitize-html\";\n...\n"
                },
                {
                  "pattern-inside": "$S = require(\"sanitize-html\")\n...\n"
                }
              ]
            },
            {
              "pattern": "$S(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "$S = new Remarkable()\n...\n"
                }
              ]
            },
            {
              "pattern": "$S.render(...)"
            }
          ]
        }
      ],
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "this.window.document. ... .$HTML('...',$SINK) \n"
                },
                {
                  "pattern": "window.document. ... .$HTML('...',$SINK) \n"
                },
                {
                  "pattern": "document.$HTML($SINK)  \n"
                }
              ]
            },
            {
              "metavariable-regex": {
                "metavariable": "$HTML",
                "regex": "(writeln|write)"
              }
            },
            {
              "focus-metavariable": "$SINK"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "$PROP. ... .$HTML('...',$SINK) \n"
                }
              ]
            },
            {
              "metavariable-regex": {
                "metavariable": "$HTML",
                "regex": "(insertAdjacentHTML)"
              }
            },
            {
              "focus-metavariable": "$SINK"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "function ...({..., $X, ...}) { ... }\n"
                },
                {
                  "pattern-inside": "function ...(..., $X, ...) { ... }\n"
                }
              ]
            },
            {
              "focus-metavariable": "$X"
            },
            {
              "pattern-either": [
                {
                  "pattern": "$X.$Y"
                },
                {
                  "pattern": "$X[...]"
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.typescript.react.security.audit.react-unsanitized-property",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detection of $HTML from non-constant definition. This can inadvertently expose users to cross-site scripting (XSS) attacks if this comes from user-provided input. If you have to use $HTML, consider using a sanitization library such as DOMPurify to sanitize your HTML.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://react.dev/reference/react-dom/components/common#dangerously-setting-the-inner-html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "react"
        ]
      },
      "mode": "taint",
      "pattern-sanitizers": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "import $S from \"underscore.string\"\n...\n"
                },
                {
                  "pattern-inside": "import * as $S from \"underscore.string\"\n...\n"
                },
                {
                  "pattern-inside": "import $S from \"underscore.string\"\n...\n"
                },
                {
                  "pattern-inside": "$S = require(\"underscore.string\")\n...\n"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$S.escapeHTML(...)"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "import $S from \"dompurify\"\n...\n"
                },
                {
                  "pattern-inside": "import { ..., $S,... } from \"dompurify\"\n...\n"
                },
                {
                  "pattern-inside": "import * as $S from \"dompurify\"\n...\n"
                },
                {
                  "pattern-inside": "$S = require(\"dompurify\")\n...\n"
                },
                {
                  "pattern-inside": "import $S from \"isomorphic-dompurify\"\n...\n"
                },
                {
                  "pattern-inside": "import * as $S from \"isomorphic-dompurify\"\n...\n"
                },
                {
                  "pattern-inside": "$S = require(\"isomorphic-dompurify\")\n...\n"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-inside": "$VALUE = $S(...)\n...\n"
                    },
                    {
                      "pattern": "$VALUE.sanitize(...)"
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "$VALUE = $S.sanitize\n...\n"
                    },
                    {
                      "pattern": "$S(...)"
                    }
                  ]
                },
                {
                  "pattern": "$S.sanitize(...)"
                },
                {
                  "pattern": "$S(...)"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "import $S from 'xss';\n...\n"
                },
                {
                  "pattern-inside": "import * as $S from 'xss';\n...\n"
                },
                {
                  "pattern-inside": "$S = require(\"xss\")\n...\n"
                }
              ]
            },
            {
              "pattern": "$S(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "import $S from 'sanitize-html';\n...\n"
                },
                {
                  "pattern-inside": "import * as $S from \"sanitize-html\";\n...\n"
                },
                {
                  "pattern-inside": "$S = require(\"sanitize-html\")\n...\n"
                }
              ]
            },
            {
              "pattern": "$S(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "$S = new Remarkable()\n...\n"
                }
              ]
            },
            {
              "pattern": "$S.render(...)"
            }
          ]
        }
      ],
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "$BODY = $REACT.useRef(...)\n...\n"
                },
                {
                  "pattern-inside": "$BODY = useRef(...)\n...\n"
                },
                {
                  "pattern-inside": "$BODY = findDOMNode(...)\n...\n"
                },
                {
                  "pattern-inside": "$BODY = createRef(...)\n...\n"
                },
                {
                  "pattern-inside": "$BODY = $REACT.findDOMNode(...)\n...\n"
                },
                {
                  "pattern-inside": "$BODY = $REACT.createRef(...)\n...\n"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$BODY. ... .$HTML = $SINK \n"
                },
                {
                  "pattern": "$BODY.$HTML = $SINK  \n"
                }
              ]
            },
            {
              "metavariable-regex": {
                "metavariable": "$HTML",
                "regex": "(innerHTML|outerHTML)"
              }
            },
            {
              "focus-metavariable": "$SINK"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "ReactDOM.findDOMNode(...).$HTML = $SINK"
                }
              ]
            },
            {
              "metavariable-regex": {
                "metavariable": "$HTML",
                "regex": "(innerHTML|outerHTML)"
              }
            },
            {
              "focus-metavariable": "$SINK"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "function ...({..., $X, ...}) { ... }\n"
                },
                {
                  "pattern-inside": "function ...(..., $X, ...) { ... }\n"
                }
              ]
            },
            {
              "focus-metavariable": "$X"
            },
            {
              "pattern-either": [
                {
                  "pattern": "$X.$Y"
                },
                {
                  "pattern": "$X[...]"
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "vendored-rules.typescript.react.security.audit.react-jwt-decoded-property",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Property decoded from JWT token without verifying and cannot be trustworthy.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-922: Insecure Storage of Sensitive Information"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://pragmaticwebsecurity.com/articles/oauthoidc/localstorage-xss.html"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "react"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "import jwt_decode from \"jwt-decode\";\n...\n"
        },
        {
          "pattern-inside": "$DECODED = jwt_decode($TOKEN,...);\n...\n"
        },
        {
          "pattern": "$DECODED.$PROPERTY"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "vendored-rules.typescript.react.security.audit.react-jwt-in-localstorage",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Storing JWT tokens in localStorage known to be a bad practice, consider moving your tokens from localStorage to a HTTP cookie.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-922: Insecure Storage of Sensitive Information"
        ],
        "impact": "LOW",
        "likelihood": "LOW",
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "react"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "import jwt_decode from \"jwt-decode\";\n...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "$DECODED = jwt_decode($TOKEN,...);\n...\nlocalStorage.setItem($NAME, <... $TOKEN ...>);\n"
            },
            {
              "pattern": "$DECODED = jwt_decode(...);\n...\nlocalStorage.setItem($NAME, <... $DECODED ...>);\n"
            }
          ]
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "replit-rules.javascript.drizzle-orm.security.audit.ban-drizzle-sql-raw",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Replace pool.query(), db.execute() and sql.raw() calls with Drizzle's recommended sql`...` template literals or Drizzle's query builders. This is a required coding standard for all Drizzle projects regardless of context (including migrations). Raw string queries violate framework conventions and must be converted to maintain codebase consistency and type safety.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "impact": "HIGH",
        "likelihood": "LOW",
        "references": [
          "https://orm.drizzle.team/docs/sql#sqlraw"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "javascript",
          "typescript",
          "drizzle-orm"
        ]
      },
      "pattern-either": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "const { sql } = require('drizzle-orm')\n...\n"
                },
                {
                  "pattern-inside": "import { sql } from 'drizzle-orm'\n...\n"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "sql.raw(`...${...}...`)\n"
                },
                {
                  "pattern": "$QUERY = `...${...}...`\n...\nsql.raw($QUERY)\n"
                },
                {
                  "pattern": "$QUERY = $SQL + $VALUE\n...\nsql.raw($QUERY)\n"
                },
                {
                  "pattern": "sql.raw($SQL + $VALUE)\n"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "import { sql as $ALIAS } from 'drizzle-orm'\n...\n"
                },
                {
                  "pattern-inside": "const { sql: $ALIAS } = require('drizzle-orm')\n...\n"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$ALIAS.raw(`...${...}...`)\n"
                },
                {
                  "pattern": "$QUERY = `...${...}...`\n...\n$ALIAS.raw($QUERY)\n"
                },
                {
                  "pattern": "$QUERY = $SQL + $VALUE\n...\n$ALIAS.raw($QUERY)\n"
                },
                {
                  "pattern": "$ALIAS.raw($SQL + $VALUE)\n"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "const $DRIZZLE = require('drizzle-orm')\n...\n"
                },
                {
                  "pattern-inside": "import $DRIZZLE from 'drizzle-orm'\n...\n"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern": "$DRIZZLE.sql.raw(`...${...}...`)\n"
                },
                {
                  "pattern": "$QUERY = `...${...}...`\n...\n$DRIZZLE.sql.raw($QUERY)\n"
                },
                {
                  "pattern": "$QUERY = $SQL + $VALUE\n...\n$DRIZZLE.sql.raw($QUERY)\n"
                },
                {
                  "pattern": "$DRIZZLE.sql.raw($SQL + $VALUE)\n"
                }
              ]
            }
          ]
        },
        {
          "patterns": [
            {
              "metavariable-regex": {
                "metavariable": "$PATH",
                "regex": "(\\./|\\.\\./|/).*db($|/.*)"
              }
            },
            {
              "pattern-inside": "import { $DRIZZLE } from $PATH\n...\n"
            },
            {
              "pattern-either": [
                {
                  "pattern": "$DRIZZLE.execute(`...`)"
                },
                {
                  "pattern": "$DRIZZLE.query(`...`)"
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "replit-rules.javascript.vite.security.audit.vite-vulnerability-check",
      "languages": [
        "json"
      ],
      "message": "Vite version detected is vulnerable to CVE-2025-30208. The vulnerability is patched in versions:\n6.2.3, 6.1.2, 6.0.12, 5.4.15, and 4.5.10. Please upgrade to a patched version.\n",
      "metadata": {
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "impact": "HIGH",
        "likelihood": "HIGH",
        "references": [
          "https://nvd.nist.gov/vuln/detail/CVE-2025-30208"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "vite",
          "javascript",
          "nodejs"
        ]
      },
      "paths": {
        "include": [
          "*package.json"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern-regex": "\"vite\"\\s*:\\s*\"[\\^~]?4\\.([0-4]\\.\\d+|5\\.[0-9])\""
            },
            {
              "pattern-regex": "\"vite\"\\s*:\\s*\"[\\^~]?5\\.([0-3]\\.\\d+|4\\.(1[0-4]|[0-9]))\""
            },
            {
              "pattern-regex": "\"vite\"\\s*:\\s*\"[\\^~]?6\\.0\\.(1[01]|[0-9])\""
            },
            {
              "pattern-regex": "\"vite\"\\s*:\\s*\"[\\^~]?6\\.1\\.[01]\""
            },
            {
              "pattern-regex": "\"vite\"\\s*:\\s*\"[\\^~]?6\\.2\\.[0-2]\""
            },
            {
              "pattern-regex": "\"vite\"\\s*:\\s*\"(latest|>=\\s*[0-6]\\.\\d+\\.\\d+)\""
            },
            {
              "pattern-regex": "\"vite\"\\s*:\\s*\"\\^([0-4]\\.\\d+\\.\\d+|5\\.[0-3]\\.\\d+|5\\.4\\.(1[0-4]|[0-9])|6\\.0\\.(1[01]|[0-9])|6\\.1\\.[01]|6\\.2\\.[0-2])\""
            },
            {
              "pattern-regex": "\"vite\"\\s*:\\s*\"~([0-4]\\.\\d+\\.\\d+|5\\.[0-3]\\.\\d+|5\\.4\\.(1[0-4]|[0-9])|6\\.0\\.(1[01]|[0-9])|6\\.1\\.[01]|6\\.2\\.[0-2])\""
            }
          ]
        },
        {
          "pattern-either": [
            {
              "pattern-inside": "\"dependencies\": {\n  ...\n}\n"
            },
            {
              "pattern-inside": "\"devDependencies\": {\n  ...\n}\n"
            },
            {
              "pattern-inside": "\"optionalDependencies\": {\n  ...\n}\n"
            },
            {
              "pattern-inside": "\"peerDependencies\": {\n  ...\n}\n"
            }
          ]
        },
        {
          "pattern-not-inside": "\"_shrinkwrap\": {\n  ...\n}"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "replit-rules.javascript.multer.security.audit.multer-vulnerable-version-check",
      "languages": [
        "json"
      ],
      "message": "Multer version detected is not the latest secure version. \nCVE-2025-48997 (GHSA-g5hg-p3ph-g8qg) affects versions >=1.4.4-lts.1 and <2.0.1, \nallowing attackers to trigger Denial of Service by sending upload requests with empty string field names. \nPlease upgrade to version 2.0.1 or later for the latest security fixes.\nNote: Upgrading from 1.x to 2.x is a breaking change - the minimum supported Node version is now 10.16.0.\n",
      "metadata": {
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-248: Uncaught Exception"
        ],
        "impact": "HIGH",
        "likelihood": "HIGH",
        "owasp": [
          "A06:2021 - Vulnerable and Outdated Components"
        ],
        "references": [
          "https://github.com/advisories/GHSA-g5hg-p3ph-g8qg",
          "https://nvd.nist.gov/vuln/detail/CVE-2025-48997",
          "https://github.com/expressjs/multer/issues/1233",
          "https://github.com/expressjs/multer/pull/1256",
          "https://osv.dev/vulnerability/GHSA-g5hg-p3ph-g8qg"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "multer",
          "javascript",
          "nodejs",
          "express"
        ]
      },
      "paths": {
        "include": [
          "*package.json"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern-regex": "\"multer\"\\s*:\\s*\"[\\^~]?[01]\\.\\d+\\.\\d+(-\\w+\\.\\d+)?\""
            },
            {
              "pattern-regex": "\"multer\"\\s*:\\s*\"[\\^~]?2\\.0\\.0\""
            },
            {
              "pattern-regex": "\"multer\"\\s*:\\s*\"(latest|\\*)\""
            },
            {
              "pattern-regex": "\"multer\"\\s*:\\s*\">=?\\s*[01]\\.\\d+\""
            },
            {
              "pattern-regex": "\"multer\"\\s*:\\s*\">=?\\s*2\\.0\\.0\""
            },
            {
              "pattern-regex": "\"multer\"\\s*:\\s*\"[\\^~][01]\\.\\d+\\.\\d+\""
            },
            {
              "pattern-regex": "\"multer\"\\s*:\\s*\"[\\^~]2\\.0\\.0\""
            }
          ]
        },
        {
          "pattern-either": [
            {
              "pattern-inside": "\"dependencies\": {\n  ...\n}\n"
            },
            {
              "pattern-inside": "\"devDependencies\": {\n  ...\n}\n"
            },
            {
              "pattern-inside": "\"optionalDependencies\": {\n  ...\n}\n"
            },
            {
              "pattern-inside": "\"peerDependencies\": {\n  ...\n}\n"
            }
          ]
        },
        {
          "pattern-not-inside": "\"_shrinkwrap\": {\n  ...\n}\n"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "replit-rules.javascript.express.security.audit.hardcoded-auth-bypass",
      "languages": [
        "js",
        "ts"
      ],
      "message": "Detected a hardcoded authentication bypass mechanism. This code checks request headers against\nhardcoded string literals that appear to bypass normal authentication flows. This creates a\nbackdoor that could be exploited by attackers who discover these hardcoded values. Remove\nhardcoded bypass mechanisms and use Replit Secret management.\n",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials",
          "CWE-287: Improper Authentication",
          "CWE-489: Active Debug Code"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures",
          "A04:2021 - Insecure Design"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/",
          "https://cwe.mitre.org/data/definitions/798.html",
          "https://cwe.mitre.org/data/definitions/489.html"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "javascript",
          "typescript",
          "express",
          "nodejs"
        ]
      },
      "pattern-not": [
        {
          "pattern": "if ($REQ.headers['content-type'] === ...) { ... }\n"
        },
        {
          "pattern": "if ($REQ.headers['accept'] === ...) { ... }\n"
        },
        {
          "pattern": "if ($REQ.headers['user-agent'] === ...) { ... }\n"
        },
        {
          "pattern": "if ($REQ.headers['host'] === ...) { ... } "
        }
      ],
      "patterns": [
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern": "if ($REQ.headers[$HEADER] === $VALUE) { ... }\n"
                },
                {
                  "metavariable-pattern": {
                    "metavariable": "$VALUE",
                    "patterns": [
                      {
                        "pattern-either": [
                          {
                            "pattern": "\"$STR\""
                          },
                          {
                            "pattern": "'$STR'"
                          }
                        ]
                      },
                      {
                        "metavariable-regex": {
                          "metavariable": "$STR",
                          "regex": ".*(bypass|debug|development|admin|test|override|backdoor|skip|secret|dev|staging).*"
                        }
                      }
                    ]
                  }
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern": "if ($REQ.headers[$HEADER] === $VALUE) { ... }\n"
                },
                {
                  "metavariable-pattern": {
                    "metavariable": "$HEADER",
                    "patterns": [
                      {
                        "pattern-either": [
                          {
                            "pattern": "\"$STR\""
                          },
                          {
                            "pattern": "'$STR'"
                          }
                        ]
                      },
                      {
                        "metavariable-regex": {
                          "metavariable": "$STR",
                          "regex": ".*(bypass|debug|development|admin|test|override|backdoor|skip|secret|dev|staging).*"
                        }
                      }
                    ]
                  }
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern-either": [
                    {
                      "pattern": "const $VAR = $REQ.headers[$HEADER];\n...\nif ($VAR === $VALUE) { ... }\n"
                    },
                    {
                      "pattern": "let $VAR = $REQ.headers[$HEADER];\n...\nif ($VAR === $VALUE) { ... }\n"
                    },
                    {
                      "pattern": "var $VAR = $REQ.headers[$HEADER];\n...\nif ($VAR === $VALUE) { ... }\n"
                    }
                  ]
                },
                {
                  "metavariable-pattern": {
                    "metavariable": "$VALUE",
                    "patterns": [
                      {
                        "pattern-either": [
                          {
                            "pattern": "\"$STR\""
                          },
                          {
                            "pattern": "'$STR'"
                          }
                        ]
                      },
                      {
                        "metavariable-regex": {
                          "metavariable": "$STR",
                          "regex": ".*(bypass|debug|development|admin|test|override|backdoor|skip|secret|dev|staging).*"
                        }
                      }
                    ]
                  }
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern-either": [
                    {
                      "pattern": "const $VAR = $REQ.headers[$HEADER];\n...\nif ($VAR === $VALUE) { ... }\n"
                    },
                    {
                      "pattern": "let $VAR = $REQ.headers[$HEADER];\n...\nif ($VAR === $VALUE) { ... }\n"
                    },
                    {
                      "pattern": "var $VAR = $REQ.headers[$HEADER];\n...\nif ($VAR === $VALUE) { ... }\n"
                    }
                  ]
                },
                {
                  "metavariable-pattern": {
                    "metavariable": "$HEADER",
                    "patterns": [
                      {
                        "pattern-either": [
                          {
                            "pattern": "\"$STR\""
                          },
                          {
                            "pattern": "'$STR'"
                          }
                        ]
                      },
                      {
                        "metavariable-regex": {
                          "metavariable": "$STR",
                          "regex": ".*(bypass|debug|development|admin|test|override|backdoor|skip|secret|dev|staging).*"
                        }
                      }
                    ]
                  }
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "replit-rules.python.django.security.audit.django-replit-cors-csrf-hosts",
      "languages": [
        "python"
      ],
      "message": "An old Replit Django template used overly permissive settings for ALLOWED_HOSTS and CSRF_TRUSTED_ORIGINS in `settings.py`.\nThis deviates from Django's recommended best practices, which restricts these values to the app's own domain.\n\nThis configuration allows apps under *.replit.dev or *.replit.app to potentially exploit CORS and CSRF vulnerabilities\nagainst Django apps running on these domains, exposing them to a wide range of attacks.\n\nReplit recommends setting these values to\n```\nALLOWED_HOSTS = os.environ[\"REPLIT_DOMAINS\"].split(',')\nCSRF_TRUSTED_ORIGINS = [\n    \"https://\" + domain for domain in os.environ[\"REPLIT_DOMAINS\"].split(',')\n]\n```\n",
      "metadata": {
        "category": "security",
        "confidence": "HIGH",
        "cve": "CVE-2016-9014",
        "impact": "HIGH",
        "likelihood": "MEDIUM",
        "references": [
          "https://docs.djangoproject.com/en/1.10/ref/settings/#allowed-hosts",
          "https://nvd.nist.gov/vuln/detail/CVE-2016-9014"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "django"
        ]
      },
      "paths": {
        "include": [
          "settings.py",
          "*/settings.py",
          "*/settings/*.py",
          "django/settings.py"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern-inside": "ALLOWED_HOSTS = [...]\n"
                },
                {
                  "pattern-either": [
                    {
                      "pattern": "\".replit.dev\"\n"
                    },
                    {
                      "pattern": "\".replit.app\"\n"
                    }
                  ]
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern-inside": "CSRF_TRUSTED_ORIGINS = [...]\n"
                },
                {
                  "pattern-either": [
                    {
                      "pattern": "\"https://*.replit.dev\"\n"
                    },
                    {
                      "pattern": "\"https://*.replit.app\"\n"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "replit-rules.generic.replit.security.audit.replit-deployment-dev-check",
      "languages": [
        "generic"
      ],
      "message": "The .replit deployment section contains 'npm run dev' which runs a development server.\nFor production deployments, use the production build command instead (e.g., 'npm run start').\nDevelopment servers are not optimized for production and may expose sensitive information.\n",
      "metadata": {
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "impact": "HIGH",
        "likelihood": "HIGH",
        "references": [
          "https://docs.replit.com/category/replit-deployments"
        ],
        "subcategory": [
          "audit"
        ],
        "technology": [
          "replit",
          "nodejs"
        ]
      },
      "paths": {
        "include": [
          "**/.replit"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "[deployment]\n...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "run = \"$PACKAGE_MANAGER run dev\"\n"
            },
            {
              "pattern": "run = \"$PACKAGE_MANAGER dev\"\n"
            },
            {
              "pattern": "run = [\"$PACKAGE_MANAGER\", \"run\", \"dev\"]\n"
            },
            {
              "pattern": "run = [\"$PACKAGE_MANAGER\", \"dev\"]\n"
            },
            {
              "pattern": "run = [..., \"$PACKAGE_MANAGER\", \"run\", \"dev\"]\n"
            },
            {
              "pattern": "run = [..., \"$PACKAGE_MANAGER\", \"dev\"]\n"
            },
            {
              "pattern": "run = [\"$PACKAGE_MANAGER run dev\"]\n"
            },
            {
              "pattern": "run = [\"$PACKAGE_MANAGER dev\"]\n"
            },
            {
              "pattern": "run = [..., \"$PACKAGE_MANAGER run dev\"]\n"
            },
            {
              "pattern": "run = [..., \"$PACKAGE_MANAGER dev\"]\n"
            }
          ]
        }
      ],
      "severity": "ERROR"
    }
  ]
}